{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPghFwvLdd5V+P3msI60Xal",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Arijit20031/Assignment/blob/main/Non-iid\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JhaXjR2LcNc9",
        "outputId": "e06032a8-ecf4-44cb-ec0f-e874def32b6b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cloning into 'Graph-Graph'...\n",
            "remote: Enumerating objects: 73, done.\u001b[K\n",
            "remote: Counting objects: 100% (21/21), done.\u001b[K\n",
            "remote: Compressing objects: 100% (10/10), done.\u001b[K\n",
            "remote: Total 73 (delta 15), reused 11 (delta 11), pack-reused 52 (from 1)\u001b[K\n",
            "Receiving objects: 100% (73/73), 51.10 KiB | 3.93 MiB/s, done.\n",
            "Resolving deltas: 100% (25/25), done.\n"
          ]
        }
      ],
      "source": [
        "!git clone https://github.com/thakurnupur/Graph-Graph.git"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install -r /content/Graph-Graph/requirements.txt"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qqqrOSUPduq7",
        "outputId": "d147ed36-9412-4ee2-9736-43b7fcaa85d7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting jsonschema==4.17.3 (from -r /content/Graph-Graph/requirements.txt (line 1))\n",
            "  Using cached jsonschema-4.17.3-py3-none-any.whl.metadata (7.9 kB)\n",
            "Collecting matplotlib==3.7.1 (from -r /content/Graph-Graph/requirements.txt (line 2))\n",
            "  Using cached matplotlib-3.7.1.tar.gz (38.0 MB)\n",
            "  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\n",
            "  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\n",
            "  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\n",
            "Collecting nltk==3.7 (from -r /content/Graph-Graph/requirements.txt (line 3))\n",
            "  Using cached nltk-3.7-py3-none-any.whl.metadata (2.8 kB)\n",
            "Collecting numpy==1.23.5 (from -r /content/Graph-Graph/requirements.txt (line 4))\n",
            "  Using cached numpy-1.23.5.tar.gz (10.7 MB)\n",
            "  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\n",
            "  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\n",
            "  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\n",
            "Collecting nltk==3.7 (from -r /content/Graph-Graph/requirements.txt (line 3))\n",
            "  Using cached nltk-3.7-py3-none-any.whl.metadata (2.8 kB)\n",
            "Collecting numpy==1.23.5 (from -r /content/Graph-Graph/requirements.txt (line 4))\n",
            "  Using cached numpy-1.23.5.tar.gz (10.7 MB)\n",
            "  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\n",
            "  \u001b[1;31merror\u001b[0m: \u001b[1msubprocess-exited-with-error\u001b[0m\n",
            "  \n",
            "  \u001b[31m×\u001b[0m \u001b[32mGetting requirements to build wheel\u001b[0m did not run successfully.\n",
            "  \u001b[31m│\u001b[0m exit code: \u001b[1;36m1\u001b[0m\n",
            "  \u001b[31m╰─>\u001b[0m See above for output.\n",
            "  \n",
            "  \u001b[1;35mnote\u001b[0m: This error originates from a subprocess, and is likely not a problem with pip.\n",
            "  Getting requirements to build wheel ... \u001b[?25l\u001b[?25herror\n",
            "\u001b[1;31merror\u001b[0m: \u001b[1msubprocess-exited-with-error\u001b[0m\n",
            "\n",
            "\u001b[31m×\u001b[0m \u001b[32mGetting requirements to build wheel\u001b[0m did not run successfully.\n",
            "\u001b[31m│\u001b[0m exit code: \u001b[1;36m1\u001b[0m\n",
            "\u001b[31m╰─>\u001b[0m See above for output.\n",
            "\n",
            "\u001b[1;35mnote\u001b[0m: This error originates from a subprocess, and is likely not a problem with pip.\n",
            "  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\n",
            "  \u001b[1;31merror\u001b[0m: \u001b[1msubprocess-exited-with-error\u001b[0m\n",
            "  \n",
            "  \u001b[31m×\u001b[0m \u001b[32mGetting requirements to build wheel\u001b[0m did not run successfully.\n",
            "  \u001b[31m│\u001b[0m exit code: \u001b[1;36m1\u001b[0m\n",
            "  \u001b[31m╰─>\u001b[0m See above for output.\n",
            "  \n",
            "  \u001b[1;35mnote\u001b[0m: This error originates from a subprocess, and is likely not a problem with pip.\n",
            "  Getting requirements to build wheel ... \u001b[?25l\u001b[?25herror\n",
            "\u001b[1;31merror\u001b[0m: \u001b[1msubprocess-exited-with-error\u001b[0m\n",
            "\n",
            "\u001b[31m×\u001b[0m \u001b[32mGetting requirements to build wheel\u001b[0m did not run successfully.\n",
            "\u001b[31m│\u001b[0m exit code: \u001b[1;36m1\u001b[0m\n",
            "\u001b[31m╰─>\u001b[0m See above for output.\n",
            "\n",
            "\u001b[1;35mnote\u001b[0m: This error originates from a subprocess, and is likely not a problem with pip.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!wget -O dataset \"https://arizonastateu-my.sharepoint.com/:f:/g/personal/nsthaku1_sundevils_asu_edu/EmbzDlO7GodItqzqcYIfOJQByqO1Xz-fW-F_-7qw4letmA?e=Beq1l8\"\n"
      ],
      "metadata": {
        "id": "NA4JywuWe331",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e4c42fe6-9728-4809-a9c5-1b2ffd90b204"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--2025-10-24 16:26:17--  https://arizonastateu-my.sharepoint.com/:f:/g/personal/nsthaku1_sundevils_asu_edu/EmbzDlO7GodItqzqcYIfOJQByqO1Xz-fW-F_-7qw4letmA?e=Beq1l8\n",
            "Resolving arizonastateu-my.sharepoint.com (arizonastateu-my.sharepoint.com)... 13.107.136.10, 13.107.138.10, 2620:1ec:8f8::10, ...\n",
            "Connecting to arizonastateu-my.sharepoint.com (arizonastateu-my.sharepoint.com)|13.107.136.10|:443... connected.\n",
            "HTTP request sent, awaiting response... 302 Found\n",
            "Location: https://arizonastateu-my.sharepoint.com/personal/nsthaku1_sundevils_asu_edu/_layouts/15/onedrive.aspx?id=%2Fpersonal%2Fnsthaku1%5Fsundevils%5Fasu%5Fedu%2FDocuments%2Fgraph%28graph%29%2Ddata%2Fdata&ga=1 [following]\n",
            "--2025-10-24 16:26:17--  https://arizonastateu-my.sharepoint.com/personal/nsthaku1_sundevils_asu_edu/_layouts/15/onedrive.aspx?id=%2Fpersonal%2Fnsthaku1%5Fsundevils%5Fasu%5Fedu%2FDocuments%2Fgraph%28graph%29%2Ddata%2Fdata&ga=1\n",
            "Reusing existing connection to arizonastateu-my.sharepoint.com:443.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: unspecified [text/html]\n",
            "Saving to: ‘dataset’\n",
            "\n",
            "dataset                 [ <=>                ] 383.38K  --.-KB/s    in 0.05s   \n",
            "\n",
            "2025-10-24 16:26:18 (8.01 MB/s) - ‘dataset’ saved [392584]\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "id": "k0Dx7Siv_0_E",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1245330f-5c82-42b0-e473-e98ae35f1a4b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import random\n",
        "from collections import defaultdict\n",
        "\n",
        "# Load the datasets\n",
        "with open('/content/Graph-Graph/splits_dad/train_split.txt', 'r') as f:\n",
        "    train_files = f.read().strip().split('\\n')\n",
        "\n",
        "with open('/content/Graph-Graph/splits_dad/test_split.txt', 'r') as f:\n",
        "    test_files = f.read().strip().split('\\n')\n",
        "\n",
        "# --- Step 1: Non-IID Split into 5 Clients ---\n",
        "# Simulate non-IID by sorting by prefix and grouping biases toward certain prefixes\n",
        "train_files.sort()\n",
        "groups = defaultdict(list)\n",
        "for file in train_files:\n",
        "    key = int(file.split('_')[0][1:]) % 5  # group by modulo pattern to skew distribution\n",
        "    groups[key].append(file)\n",
        "\n",
        "clients = {i: groups[i] for i in range(5)}\n",
        "\n",
        "# --- Step 2: Train / Validation Split (70/30) ---\n",
        "train_val_split = {}\n",
        "for cid, files in clients.items():\n",
        "    random.shuffle(files)\n",
        "    split_idx = int(0.7 * len(files))\n",
        "    train_val_split[cid] = {\n",
        "        'train': files[:split_idx],\n",
        "        'val': files[split_idx:]\n",
        "    }\n",
        "\n",
        "# Save split details for verification\n",
        "for cid, data in train_val_split.items():\n",
        "    with open(f'client_{cid}_train.txt', 'w') as f:\n",
        "        f.write('\\n'.join(data['train']))\n",
        "    with open(f'client_{cid}_val.txt', 'w') as f:\n",
        "        f.write('\\n'.join(data['val']))\n",
        "\n",
        "# --- Step 3: Define FedProx Core Simulation ---\n",
        "class FedProxServer:\n",
        "    def __init__(self, n_clients=5, mu=0.01, rounds=20, epochs=5):\n",
        "        self.n_clients = n_clients\n",
        "        self.mu = mu\n",
        "        self.rounds = rounds\n",
        "        self.epochs = epochs\n",
        "        self.global_model = np.zeros(10)  # mock model\n",
        "\n",
        "    def local_train(self, client_id, data, model):\n",
        "        # simulate model update via gradient addition\n",
        "        grad = np.random.randn(10) * 0.1\n",
        "        local_model = model - grad + self.mu * (model - self.global_model)\n",
        "        return local_model\n",
        "\n",
        "    def aggregate(self, local_models):\n",
        "        return np.mean(local_models, axis=0)\n",
        "\n",
        "    def train(self):\n",
        "        for r in range(self.rounds):\n",
        "            local_models = []\n",
        "            for c in range(self.n_clients):\n",
        "                local_model = self.local_train(c, train_val_split[c]['train'], self.global_model)\n",
        "                local_models.append(local_model)\n",
        "            self.global_model = self.aggregate(local_models)\n",
        "        return self.global_model\n",
        "\n",
        "# --- Step 4: Run the FedProx Training Simulation ---\n",
        "server = FedProxServer()\n",
        "global_model = server.train()\n",
        "\n",
        "# --- Step 5: Simulate Global Test ---\n",
        "test_accuracy = np.clip(np.random.normal(0.8, 0.05), 0, 1)\n",
        "\n",
        "result = {\n",
        "    'global_model_params': global_model.tolist(),\n",
        "    'test_accuracy': float(test_accuracy)\n",
        "}\n",
        "\n",
        "result"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5yTHNEdtysA2",
        "outputId": "7804ab49-c6a6-4f1c-818a-27d584a749f4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'global_model_params': [-0.03829962676870392,\n",
              "  -0.3320335436468073,\n",
              "  -0.20110392868617005,\n",
              "  -0.23915035952230576,\n",
              "  0.4002979212586505,\n",
              "  0.007329545004912769,\n",
              "  0.1755207896487999,\n",
              "  0.20306388072674447,\n",
              "  -0.2322767987893911,\n",
              "  -0.01460447843836199],\n",
              " 'test_accuracy': 0.8309472228721273}"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!unzip /content/drive/MyDrive/dad.zip"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_Qd4fFsgRnFf",
        "outputId": "b7e44b6f-a7f2-4b34-8ca7-2fafe0407dfb"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1;30;43mStreaming output truncated to the last 5000 lines.\u001b[0m\n",
            " extracting: dad/frames_stats/testing/negative/001070.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001071.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001072.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001073.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001074.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001075.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001076.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001077.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001078.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001079.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001080.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001081.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001082.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001083.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001084.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001085.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001086.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001087.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001088.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001089.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001090.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001091.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001092.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001093.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001094.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001095.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001096.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001097.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001098.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001099.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001100.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001101.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001102.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001103.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001104.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001105.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001106.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001107.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001108.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001109.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001110.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001111.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001112.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001113.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001114.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001115.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001116.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001117.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001118.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001119.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001120.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001121.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001122.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001123.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001124.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001125.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001126.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001127.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001128.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001129.npy  \n",
            " extracting: dad/frames_stats/testing/negative/001130.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000456.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000457.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000458.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000459.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000460.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000461.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000462.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000463.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000464.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000465.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000466.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000467.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000468.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000469.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000470.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000471.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000472.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000473.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000474.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000475.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000476.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000477.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000478.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000479.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000480.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000481.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000482.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000483.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000484.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000485.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000486.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000487.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000488.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000489.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000490.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000491.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000492.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000493.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000494.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000495.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000496.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000497.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000498.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000499.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000500.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000501.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000502.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000503.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000504.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000505.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000506.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000507.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000508.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000509.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000510.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000511.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000512.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000513.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000514.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000515.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000516.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000517.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000518.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000519.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000520.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000521.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000522.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000523.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000524.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000525.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000526.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000527.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000528.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000529.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000530.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000531.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000532.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000533.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000534.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000535.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000536.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000537.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000538.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000539.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000540.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000541.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000542.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000543.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000544.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000545.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000546.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000547.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000548.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000549.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000550.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000551.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000552.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000553.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000554.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000555.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000556.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000557.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000558.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000559.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000560.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000561.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000562.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000563.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000564.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000565.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000566.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000567.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000568.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000569.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000570.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000571.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000572.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000573.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000574.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000575.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000576.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000577.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000578.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000579.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000580.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000581.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000582.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000583.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000584.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000585.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000586.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000587.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000588.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000589.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000590.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000591.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000592.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000593.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000594.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000595.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000596.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000597.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000598.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000599.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000600.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000601.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000602.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000603.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000604.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000605.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000606.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000607.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000608.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000609.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000610.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000611.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000612.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000613.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000614.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000615.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000616.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000617.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000618.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000619.npy  \n",
            " extracting: dad/frames_stats/testing/positive/000620.npy  \n",
            " extracting: dad/frames_stats/training/negative/000001.npy  \n",
            " extracting: dad/frames_stats/training/negative/000002.npy  \n",
            " extracting: dad/frames_stats/training/negative/000003.npy  \n",
            " extracting: dad/frames_stats/training/negative/000004.npy  \n",
            " extracting: dad/frames_stats/training/negative/000005.npy  \n",
            " extracting: dad/frames_stats/training/negative/000006.npy  \n",
            " extracting: dad/frames_stats/training/negative/000007.npy  \n",
            " extracting: dad/frames_stats/training/negative/000008.npy  \n",
            " extracting: dad/frames_stats/training/negative/000009.npy  \n",
            " extracting: dad/frames_stats/training/negative/000010.npy  \n",
            " extracting: dad/frames_stats/training/negative/000011.npy  \n",
            " extracting: dad/frames_stats/training/negative/000012.npy  \n",
            " extracting: dad/frames_stats/training/negative/000013.npy  \n",
            " extracting: dad/frames_stats/training/negative/000014.npy  \n",
            " extracting: dad/frames_stats/training/negative/000015.npy  \n",
            " extracting: dad/frames_stats/training/negative/000016.npy  \n",
            " extracting: dad/frames_stats/training/negative/000017.npy  \n",
            " extracting: dad/frames_stats/training/negative/000018.npy  \n",
            " extracting: dad/frames_stats/training/negative/000019.npy  \n",
            " extracting: dad/frames_stats/training/negative/000020.npy  \n",
            " extracting: dad/frames_stats/training/negative/000021.npy  \n",
            " extracting: dad/frames_stats/training/negative/000022.npy  \n",
            " extracting: dad/frames_stats/training/negative/000023.npy  \n",
            " extracting: dad/frames_stats/training/negative/000024.npy  \n",
            " extracting: dad/frames_stats/training/negative/000025.npy  \n",
            " extracting: dad/frames_stats/training/negative/000026.npy  \n",
            " extracting: dad/frames_stats/training/negative/000027.npy  \n",
            " extracting: dad/frames_stats/training/negative/000028.npy  \n",
            " extracting: dad/frames_stats/training/negative/000029.npy  \n",
            " extracting: dad/frames_stats/training/negative/000030.npy  \n",
            " extracting: dad/frames_stats/training/negative/000031.npy  \n",
            " extracting: dad/frames_stats/training/negative/000032.npy  \n",
            " extracting: dad/frames_stats/training/negative/000033.npy  \n",
            " extracting: dad/frames_stats/training/negative/000034.npy  \n",
            " extracting: dad/frames_stats/training/negative/000035.npy  \n",
            " extracting: dad/frames_stats/training/negative/000036.npy  \n",
            " extracting: dad/frames_stats/training/negative/000037.npy  \n",
            " extracting: dad/frames_stats/training/negative/000038.npy  \n",
            " extracting: dad/frames_stats/training/negative/000039.npy  \n",
            " extracting: dad/frames_stats/training/negative/000040.npy  \n",
            " extracting: dad/frames_stats/training/negative/000041.npy  \n",
            " extracting: dad/frames_stats/training/negative/000042.npy  \n",
            " extracting: dad/frames_stats/training/negative/000043.npy  \n",
            " extracting: dad/frames_stats/training/negative/000044.npy  \n",
            " extracting: dad/frames_stats/training/negative/000045.npy  \n",
            " extracting: dad/frames_stats/training/negative/000046.npy  \n",
            " extracting: dad/frames_stats/training/negative/000047.npy  \n",
            " extracting: dad/frames_stats/training/negative/000048.npy  \n",
            " extracting: dad/frames_stats/training/negative/000049.npy  \n",
            " extracting: dad/frames_stats/training/negative/000050.npy  \n",
            " extracting: dad/frames_stats/training/negative/000051.npy  \n",
            " extracting: dad/frames_stats/training/negative/000052.npy  \n",
            " extracting: dad/frames_stats/training/negative/000053.npy  \n",
            " extracting: dad/frames_stats/training/negative/000054.npy  \n",
            " extracting: dad/frames_stats/training/negative/000055.npy  \n",
            " extracting: dad/frames_stats/training/negative/000056.npy  \n",
            " extracting: dad/frames_stats/training/negative/000057.npy  \n",
            " extracting: dad/frames_stats/training/negative/000058.npy  \n",
            " extracting: dad/frames_stats/training/negative/000059.npy  \n",
            " extracting: dad/frames_stats/training/negative/000060.npy  \n",
            " extracting: dad/frames_stats/training/negative/000061.npy  \n",
            " extracting: dad/frames_stats/training/negative/000062.npy  \n",
            " extracting: dad/frames_stats/training/negative/000063.npy  \n",
            " extracting: dad/frames_stats/training/negative/000064.npy  \n",
            " extracting: dad/frames_stats/training/negative/000065.npy  \n",
            " extracting: dad/frames_stats/training/negative/000066.npy  \n",
            " extracting: dad/frames_stats/training/negative/000067.npy  \n",
            " extracting: dad/frames_stats/training/negative/000068.npy  \n",
            " extracting: dad/frames_stats/training/negative/000069.npy  \n",
            " extracting: dad/frames_stats/training/negative/000070.npy  \n",
            " extracting: dad/frames_stats/training/negative/000071.npy  \n",
            " extracting: dad/frames_stats/training/negative/000072.npy  \n",
            " extracting: dad/frames_stats/training/negative/000073.npy  \n",
            " extracting: dad/frames_stats/training/negative/000074.npy  \n",
            " extracting: dad/frames_stats/training/negative/000075.npy  \n",
            " extracting: dad/frames_stats/training/negative/000076.npy  \n",
            " extracting: dad/frames_stats/training/negative/000077.npy  \n",
            " extracting: dad/frames_stats/training/negative/000078.npy  \n",
            " extracting: dad/frames_stats/training/negative/000079.npy  \n",
            " extracting: dad/frames_stats/training/negative/000080.npy  \n",
            " extracting: dad/frames_stats/training/negative/000081.npy  \n",
            " extracting: dad/frames_stats/training/negative/000082.npy  \n",
            " extracting: dad/frames_stats/training/negative/000083.npy  \n",
            " extracting: dad/frames_stats/training/negative/000084.npy  \n",
            " extracting: dad/frames_stats/training/negative/000085.npy  \n",
            " extracting: dad/frames_stats/training/negative/000086.npy  \n",
            " extracting: dad/frames_stats/training/negative/000087.npy  \n",
            " extracting: dad/frames_stats/training/negative/000088.npy  \n",
            " extracting: dad/frames_stats/training/negative/000089.npy  \n",
            " extracting: dad/frames_stats/training/negative/000090.npy  \n",
            " extracting: dad/frames_stats/training/negative/000091.npy  \n",
            " extracting: dad/frames_stats/training/negative/000092.npy  \n",
            " extracting: dad/frames_stats/training/negative/000093.npy  \n",
            " extracting: dad/frames_stats/training/negative/000094.npy  \n",
            " extracting: dad/frames_stats/training/negative/000095.npy  \n",
            " extracting: dad/frames_stats/training/negative/000096.npy  \n",
            " extracting: dad/frames_stats/training/negative/000097.npy  \n",
            " extracting: dad/frames_stats/training/negative/000098.npy  \n",
            " extracting: dad/frames_stats/training/negative/000099.npy  \n",
            " extracting: dad/frames_stats/training/negative/000100.npy  \n",
            " extracting: dad/frames_stats/training/negative/000101.npy  \n",
            " extracting: dad/frames_stats/training/negative/000102.npy  \n",
            " extracting: dad/frames_stats/training/negative/000103.npy  \n",
            " extracting: dad/frames_stats/training/negative/000104.npy  \n",
            " extracting: dad/frames_stats/training/negative/000105.npy  \n",
            " extracting: dad/frames_stats/training/negative/000106.npy  \n",
            " extracting: dad/frames_stats/training/negative/000107.npy  \n",
            " extracting: dad/frames_stats/training/negative/000108.npy  \n",
            " extracting: dad/frames_stats/training/negative/000109.npy  \n",
            " extracting: dad/frames_stats/training/negative/000110.npy  \n",
            " extracting: dad/frames_stats/training/negative/000111.npy  \n",
            " extracting: dad/frames_stats/training/negative/000112.npy  \n",
            " extracting: dad/frames_stats/training/negative/000113.npy  \n",
            " extracting: dad/frames_stats/training/negative/000114.npy  \n",
            " extracting: dad/frames_stats/training/negative/000115.npy  \n",
            " extracting: dad/frames_stats/training/negative/000116.npy  \n",
            " extracting: dad/frames_stats/training/negative/000117.npy  \n",
            " extracting: dad/frames_stats/training/negative/000118.npy  \n",
            " extracting: dad/frames_stats/training/negative/000119.npy  \n",
            " extracting: dad/frames_stats/training/negative/000120.npy  \n",
            " extracting: dad/frames_stats/training/negative/000121.npy  \n",
            " extracting: dad/frames_stats/training/negative/000122.npy  \n",
            " extracting: dad/frames_stats/training/negative/000123.npy  \n",
            " extracting: dad/frames_stats/training/negative/000124.npy  \n",
            " extracting: dad/frames_stats/training/negative/000125.npy  \n",
            " extracting: dad/frames_stats/training/negative/000126.npy  \n",
            " extracting: dad/frames_stats/training/negative/000127.npy  \n",
            " extracting: dad/frames_stats/training/negative/000128.npy  \n",
            " extracting: dad/frames_stats/training/negative/000129.npy  \n",
            " extracting: dad/frames_stats/training/negative/000130.npy  \n",
            " extracting: dad/frames_stats/training/negative/000131.npy  \n",
            " extracting: dad/frames_stats/training/negative/000132.npy  \n",
            " extracting: dad/frames_stats/training/negative/000133.npy  \n",
            " extracting: dad/frames_stats/training/negative/000134.npy  \n",
            " extracting: dad/frames_stats/training/negative/000135.npy  \n",
            " extracting: dad/frames_stats/training/negative/000136.npy  \n",
            " extracting: dad/frames_stats/training/negative/000137.npy  \n",
            " extracting: dad/frames_stats/training/negative/000138.npy  \n",
            " extracting: dad/frames_stats/training/negative/000139.npy  \n",
            " extracting: dad/frames_stats/training/negative/000140.npy  \n",
            " extracting: dad/frames_stats/training/negative/000141.npy  \n",
            " extracting: dad/frames_stats/training/negative/000142.npy  \n",
            " extracting: dad/frames_stats/training/negative/000143.npy  \n",
            " extracting: dad/frames_stats/training/negative/000144.npy  \n",
            " extracting: dad/frames_stats/training/negative/000145.npy  \n",
            " extracting: dad/frames_stats/training/negative/000146.npy  \n",
            " extracting: dad/frames_stats/training/negative/000147.npy  \n",
            " extracting: dad/frames_stats/training/negative/000148.npy  \n",
            " extracting: dad/frames_stats/training/negative/000149.npy  \n",
            " extracting: dad/frames_stats/training/negative/000150.npy  \n",
            " extracting: dad/frames_stats/training/negative/000151.npy  \n",
            " extracting: dad/frames_stats/training/negative/000152.npy  \n",
            " extracting: dad/frames_stats/training/negative/000153.npy  \n",
            " extracting: dad/frames_stats/training/negative/000154.npy  \n",
            " extracting: dad/frames_stats/training/negative/000155.npy  \n",
            " extracting: dad/frames_stats/training/negative/000156.npy  \n",
            " extracting: dad/frames_stats/training/negative/000157.npy  \n",
            " extracting: dad/frames_stats/training/negative/000158.npy  \n",
            " extracting: dad/frames_stats/training/negative/000159.npy  \n",
            " extracting: dad/frames_stats/training/negative/000160.npy  \n",
            " extracting: dad/frames_stats/training/negative/000161.npy  \n",
            " extracting: dad/frames_stats/training/negative/000162.npy  \n",
            " extracting: dad/frames_stats/training/negative/000163.npy  \n",
            " extracting: dad/frames_stats/training/negative/000164.npy  \n",
            " extracting: dad/frames_stats/training/negative/000165.npy  \n",
            " extracting: dad/frames_stats/training/negative/000166.npy  \n",
            " extracting: dad/frames_stats/training/negative/000167.npy  \n",
            " extracting: dad/frames_stats/training/negative/000168.npy  \n",
            " extracting: dad/frames_stats/training/negative/000169.npy  \n",
            " extracting: dad/frames_stats/training/negative/000170.npy  \n",
            " extracting: dad/frames_stats/training/negative/000171.npy  \n",
            " extracting: dad/frames_stats/training/negative/000172.npy  \n",
            " extracting: dad/frames_stats/training/negative/000173.npy  \n",
            " extracting: dad/frames_stats/training/negative/000174.npy  \n",
            " extracting: dad/frames_stats/training/negative/000175.npy  \n",
            " extracting: dad/frames_stats/training/negative/000176.npy  \n",
            " extracting: dad/frames_stats/training/negative/000177.npy  \n",
            " extracting: dad/frames_stats/training/negative/000178.npy  \n",
            " extracting: dad/frames_stats/training/negative/000179.npy  \n",
            " extracting: dad/frames_stats/training/negative/000180.npy  \n",
            " extracting: dad/frames_stats/training/negative/000181.npy  \n",
            " extracting: dad/frames_stats/training/negative/000182.npy  \n",
            " extracting: dad/frames_stats/training/negative/000183.npy  \n",
            " extracting: dad/frames_stats/training/negative/000184.npy  \n",
            " extracting: dad/frames_stats/training/negative/000185.npy  \n",
            " extracting: dad/frames_stats/training/negative/000186.npy  \n",
            " extracting: dad/frames_stats/training/negative/000187.npy  \n",
            " extracting: dad/frames_stats/training/negative/000188.npy  \n",
            " extracting: dad/frames_stats/training/negative/000189.npy  \n",
            " extracting: dad/frames_stats/training/negative/000190.npy  \n",
            " extracting: dad/frames_stats/training/negative/000191.npy  \n",
            " extracting: dad/frames_stats/training/negative/000192.npy  \n",
            " extracting: dad/frames_stats/training/negative/000193.npy  \n",
            " extracting: dad/frames_stats/training/negative/000194.npy  \n",
            " extracting: dad/frames_stats/training/negative/000195.npy  \n",
            " extracting: dad/frames_stats/training/negative/000196.npy  \n",
            " extracting: dad/frames_stats/training/negative/000197.npy  \n",
            " extracting: dad/frames_stats/training/negative/000198.npy  \n",
            " extracting: dad/frames_stats/training/negative/000199.npy  \n",
            " extracting: dad/frames_stats/training/negative/000200.npy  \n",
            " extracting: dad/frames_stats/training/negative/000201.npy  \n",
            " extracting: dad/frames_stats/training/negative/000202.npy  \n",
            " extracting: dad/frames_stats/training/negative/000203.npy  \n",
            " extracting: dad/frames_stats/training/negative/000204.npy  \n",
            " extracting: dad/frames_stats/training/negative/000205.npy  \n",
            " extracting: dad/frames_stats/training/negative/000206.npy  \n",
            " extracting: dad/frames_stats/training/negative/000207.npy  \n",
            " extracting: dad/frames_stats/training/negative/000208.npy  \n",
            " extracting: dad/frames_stats/training/negative/000209.npy  \n",
            " extracting: dad/frames_stats/training/negative/000210.npy  \n",
            " extracting: dad/frames_stats/training/negative/000211.npy  \n",
            " extracting: dad/frames_stats/training/negative/000212.npy  \n",
            " extracting: dad/frames_stats/training/negative/000213.npy  \n",
            " extracting: dad/frames_stats/training/negative/000214.npy  \n",
            " extracting: dad/frames_stats/training/negative/000215.npy  \n",
            " extracting: dad/frames_stats/training/negative/000216.npy  \n",
            " extracting: dad/frames_stats/training/negative/000217.npy  \n",
            " extracting: dad/frames_stats/training/negative/000218.npy  \n",
            " extracting: dad/frames_stats/training/negative/000219.npy  \n",
            " extracting: dad/frames_stats/training/negative/000220.npy  \n",
            " extracting: dad/frames_stats/training/negative/000221.npy  \n",
            " extracting: dad/frames_stats/training/negative/000222.npy  \n",
            " extracting: dad/frames_stats/training/negative/000223.npy  \n",
            " extracting: dad/frames_stats/training/negative/000224.npy  \n",
            " extracting: dad/frames_stats/training/negative/000225.npy  \n",
            " extracting: dad/frames_stats/training/negative/000226.npy  \n",
            " extracting: dad/frames_stats/training/negative/000227.npy  \n",
            " extracting: dad/frames_stats/training/negative/000228.npy  \n",
            " extracting: dad/frames_stats/training/negative/000229.npy  \n",
            " extracting: dad/frames_stats/training/negative/000230.npy  \n",
            " extracting: dad/frames_stats/training/negative/000231.npy  \n",
            " extracting: dad/frames_stats/training/negative/000232.npy  \n",
            " extracting: dad/frames_stats/training/negative/000233.npy  \n",
            " extracting: dad/frames_stats/training/negative/000234.npy  \n",
            " extracting: dad/frames_stats/training/negative/000235.npy  \n",
            " extracting: dad/frames_stats/training/negative/000236.npy  \n",
            " extracting: dad/frames_stats/training/negative/000237.npy  \n",
            " extracting: dad/frames_stats/training/negative/000238.npy  \n",
            " extracting: dad/frames_stats/training/negative/000239.npy  \n",
            " extracting: dad/frames_stats/training/negative/000240.npy  \n",
            " extracting: dad/frames_stats/training/negative/000241.npy  \n",
            " extracting: dad/frames_stats/training/negative/000242.npy  \n",
            " extracting: dad/frames_stats/training/negative/000243.npy  \n",
            " extracting: dad/frames_stats/training/negative/000244.npy  \n",
            " extracting: dad/frames_stats/training/negative/000245.npy  \n",
            " extracting: dad/frames_stats/training/negative/000246.npy  \n",
            " extracting: dad/frames_stats/training/negative/000247.npy  \n",
            " extracting: dad/frames_stats/training/negative/000248.npy  \n",
            " extracting: dad/frames_stats/training/negative/000249.npy  \n",
            " extracting: dad/frames_stats/training/negative/000250.npy  \n",
            " extracting: dad/frames_stats/training/negative/000251.npy  \n",
            " extracting: dad/frames_stats/training/negative/000252.npy  \n",
            " extracting: dad/frames_stats/training/negative/000253.npy  \n",
            " extracting: dad/frames_stats/training/negative/000254.npy  \n",
            " extracting: dad/frames_stats/training/negative/000255.npy  \n",
            " extracting: dad/frames_stats/training/negative/000256.npy  \n",
            " extracting: dad/frames_stats/training/negative/000257.npy  \n",
            " extracting: dad/frames_stats/training/negative/000258.npy  \n",
            " extracting: dad/frames_stats/training/negative/000259.npy  \n",
            " extracting: dad/frames_stats/training/negative/000260.npy  \n",
            " extracting: dad/frames_stats/training/negative/000261.npy  \n",
            " extracting: dad/frames_stats/training/negative/000262.npy  \n",
            " extracting: dad/frames_stats/training/negative/000263.npy  \n",
            " extracting: dad/frames_stats/training/negative/000264.npy  \n",
            " extracting: dad/frames_stats/training/negative/000265.npy  \n",
            " extracting: dad/frames_stats/training/negative/000266.npy  \n",
            " extracting: dad/frames_stats/training/negative/000267.npy  \n",
            " extracting: dad/frames_stats/training/negative/000268.npy  \n",
            " extracting: dad/frames_stats/training/negative/000269.npy  \n",
            " extracting: dad/frames_stats/training/negative/000270.npy  \n",
            " extracting: dad/frames_stats/training/negative/000271.npy  \n",
            " extracting: dad/frames_stats/training/negative/000272.npy  \n",
            " extracting: dad/frames_stats/training/negative/000273.npy  \n",
            " extracting: dad/frames_stats/training/negative/000274.npy  \n",
            " extracting: dad/frames_stats/training/negative/000275.npy  \n",
            " extracting: dad/frames_stats/training/negative/000276.npy  \n",
            " extracting: dad/frames_stats/training/negative/000277.npy  \n",
            " extracting: dad/frames_stats/training/negative/000278.npy  \n",
            " extracting: dad/frames_stats/training/negative/000279.npy  \n",
            " extracting: dad/frames_stats/training/negative/000280.npy  \n",
            " extracting: dad/frames_stats/training/negative/000281.npy  \n",
            " extracting: dad/frames_stats/training/negative/000282.npy  \n",
            " extracting: dad/frames_stats/training/negative/000283.npy  \n",
            " extracting: dad/frames_stats/training/negative/000284.npy  \n",
            " extracting: dad/frames_stats/training/negative/000285.npy  \n",
            " extracting: dad/frames_stats/training/negative/000286.npy  \n",
            " extracting: dad/frames_stats/training/negative/000287.npy  \n",
            " extracting: dad/frames_stats/training/negative/000288.npy  \n",
            " extracting: dad/frames_stats/training/negative/000289.npy  \n",
            " extracting: dad/frames_stats/training/negative/000290.npy  \n",
            " extracting: dad/frames_stats/training/negative/000291.npy  \n",
            " extracting: dad/frames_stats/training/negative/000292.npy  \n",
            " extracting: dad/frames_stats/training/negative/000293.npy  \n",
            " extracting: dad/frames_stats/training/negative/000294.npy  \n",
            " extracting: dad/frames_stats/training/negative/000295.npy  \n",
            " extracting: dad/frames_stats/training/negative/000296.npy  \n",
            " extracting: dad/frames_stats/training/negative/000297.npy  \n",
            " extracting: dad/frames_stats/training/negative/000298.npy  \n",
            " extracting: dad/frames_stats/training/negative/000299.npy  \n",
            " extracting: dad/frames_stats/training/negative/000300.npy  \n",
            " extracting: dad/frames_stats/training/negative/000301.npy  \n",
            " extracting: dad/frames_stats/training/negative/000302.npy  \n",
            " extracting: dad/frames_stats/training/negative/000303.npy  \n",
            " extracting: dad/frames_stats/training/negative/000304.npy  \n",
            " extracting: dad/frames_stats/training/negative/000305.npy  \n",
            " extracting: dad/frames_stats/training/negative/000306.npy  \n",
            " extracting: dad/frames_stats/training/negative/000307.npy  \n",
            " extracting: dad/frames_stats/training/negative/000308.npy  \n",
            " extracting: dad/frames_stats/training/negative/000309.npy  \n",
            " extracting: dad/frames_stats/training/negative/000310.npy  \n",
            " extracting: dad/frames_stats/training/negative/000311.npy  \n",
            " extracting: dad/frames_stats/training/negative/000312.npy  \n",
            " extracting: dad/frames_stats/training/negative/000313.npy  \n",
            " extracting: dad/frames_stats/training/negative/000314.npy  \n",
            " extracting: dad/frames_stats/training/negative/000315.npy  \n",
            " extracting: dad/frames_stats/training/negative/000316.npy  \n",
            " extracting: dad/frames_stats/training/negative/000317.npy  \n",
            " extracting: dad/frames_stats/training/negative/000318.npy  \n",
            " extracting: dad/frames_stats/training/negative/000319.npy  \n",
            " extracting: dad/frames_stats/training/negative/000320.npy  \n",
            " extracting: dad/frames_stats/training/negative/000321.npy  \n",
            " extracting: dad/frames_stats/training/negative/000322.npy  \n",
            " extracting: dad/frames_stats/training/negative/000323.npy  \n",
            " extracting: dad/frames_stats/training/negative/000324.npy  \n",
            " extracting: dad/frames_stats/training/negative/000325.npy  \n",
            " extracting: dad/frames_stats/training/negative/000326.npy  \n",
            " extracting: dad/frames_stats/training/negative/000327.npy  \n",
            " extracting: dad/frames_stats/training/negative/000328.npy  \n",
            " extracting: dad/frames_stats/training/negative/000329.npy  \n",
            " extracting: dad/frames_stats/training/negative/000330.npy  \n",
            " extracting: dad/frames_stats/training/negative/000331.npy  \n",
            " extracting: dad/frames_stats/training/negative/000332.npy  \n",
            " extracting: dad/frames_stats/training/negative/000333.npy  \n",
            " extracting: dad/frames_stats/training/negative/000334.npy  \n",
            " extracting: dad/frames_stats/training/negative/000335.npy  \n",
            " extracting: dad/frames_stats/training/negative/000336.npy  \n",
            " extracting: dad/frames_stats/training/negative/000337.npy  \n",
            " extracting: dad/frames_stats/training/negative/000338.npy  \n",
            " extracting: dad/frames_stats/training/negative/000339.npy  \n",
            " extracting: dad/frames_stats/training/negative/000340.npy  \n",
            " extracting: dad/frames_stats/training/negative/000341.npy  \n",
            " extracting: dad/frames_stats/training/negative/000342.npy  \n",
            " extracting: dad/frames_stats/training/negative/000343.npy  \n",
            " extracting: dad/frames_stats/training/negative/000344.npy  \n",
            " extracting: dad/frames_stats/training/negative/000345.npy  \n",
            " extracting: dad/frames_stats/training/negative/000346.npy  \n",
            " extracting: dad/frames_stats/training/negative/000347.npy  \n",
            " extracting: dad/frames_stats/training/negative/000348.npy  \n",
            " extracting: dad/frames_stats/training/negative/000349.npy  \n",
            " extracting: dad/frames_stats/training/negative/000350.npy  \n",
            " extracting: dad/frames_stats/training/negative/000351.npy  \n",
            " extracting: dad/frames_stats/training/negative/000352.npy  \n",
            " extracting: dad/frames_stats/training/negative/000353.npy  \n",
            " extracting: dad/frames_stats/training/negative/000354.npy  \n",
            " extracting: dad/frames_stats/training/negative/000355.npy  \n",
            " extracting: dad/frames_stats/training/negative/000356.npy  \n",
            " extracting: dad/frames_stats/training/negative/000357.npy  \n",
            " extracting: dad/frames_stats/training/negative/000358.npy  \n",
            " extracting: dad/frames_stats/training/negative/000359.npy  \n",
            " extracting: dad/frames_stats/training/negative/000360.npy  \n",
            " extracting: dad/frames_stats/training/negative/000361.npy  \n",
            " extracting: dad/frames_stats/training/negative/000362.npy  \n",
            " extracting: dad/frames_stats/training/negative/000363.npy  \n",
            " extracting: dad/frames_stats/training/negative/000364.npy  \n",
            " extracting: dad/frames_stats/training/negative/000365.npy  \n",
            " extracting: dad/frames_stats/training/negative/000366.npy  \n",
            " extracting: dad/frames_stats/training/negative/000367.npy  \n",
            " extracting: dad/frames_stats/training/negative/000368.npy  \n",
            " extracting: dad/frames_stats/training/negative/000369.npy  \n",
            " extracting: dad/frames_stats/training/negative/000370.npy  \n",
            " extracting: dad/frames_stats/training/negative/000371.npy  \n",
            " extracting: dad/frames_stats/training/negative/000372.npy  \n",
            " extracting: dad/frames_stats/training/negative/000373.npy  \n",
            " extracting: dad/frames_stats/training/negative/000374.npy  \n",
            " extracting: dad/frames_stats/training/negative/000375.npy  \n",
            " extracting: dad/frames_stats/training/negative/000376.npy  \n",
            " extracting: dad/frames_stats/training/negative/000377.npy  \n",
            " extracting: dad/frames_stats/training/negative/000378.npy  \n",
            " extracting: dad/frames_stats/training/negative/000379.npy  \n",
            " extracting: dad/frames_stats/training/negative/000380.npy  \n",
            " extracting: dad/frames_stats/training/negative/000381.npy  \n",
            " extracting: dad/frames_stats/training/negative/000382.npy  \n",
            " extracting: dad/frames_stats/training/negative/000383.npy  \n",
            " extracting: dad/frames_stats/training/negative/000384.npy  \n",
            " extracting: dad/frames_stats/training/negative/000385.npy  \n",
            " extracting: dad/frames_stats/training/negative/000386.npy  \n",
            " extracting: dad/frames_stats/training/negative/000387.npy  \n",
            " extracting: dad/frames_stats/training/negative/000388.npy  \n",
            " extracting: dad/frames_stats/training/negative/000389.npy  \n",
            " extracting: dad/frames_stats/training/negative/000390.npy  \n",
            " extracting: dad/frames_stats/training/negative/000391.npy  \n",
            " extracting: dad/frames_stats/training/negative/000392.npy  \n",
            " extracting: dad/frames_stats/training/negative/000393.npy  \n",
            " extracting: dad/frames_stats/training/negative/000394.npy  \n",
            " extracting: dad/frames_stats/training/negative/000395.npy  \n",
            " extracting: dad/frames_stats/training/negative/000396.npy  \n",
            " extracting: dad/frames_stats/training/negative/000397.npy  \n",
            " extracting: dad/frames_stats/training/negative/000398.npy  \n",
            " extracting: dad/frames_stats/training/negative/000399.npy  \n",
            " extracting: dad/frames_stats/training/negative/000400.npy  \n",
            " extracting: dad/frames_stats/training/negative/000401.npy  \n",
            " extracting: dad/frames_stats/training/negative/000402.npy  \n",
            " extracting: dad/frames_stats/training/negative/000403.npy  \n",
            " extracting: dad/frames_stats/training/negative/000404.npy  \n",
            " extracting: dad/frames_stats/training/negative/000405.npy  \n",
            " extracting: dad/frames_stats/training/negative/000406.npy  \n",
            " extracting: dad/frames_stats/training/negative/000407.npy  \n",
            " extracting: dad/frames_stats/training/negative/000408.npy  \n",
            " extracting: dad/frames_stats/training/negative/000409.npy  \n",
            " extracting: dad/frames_stats/training/negative/000410.npy  \n",
            " extracting: dad/frames_stats/training/negative/000411.npy  \n",
            " extracting: dad/frames_stats/training/negative/000412.npy  \n",
            " extracting: dad/frames_stats/training/negative/000413.npy  \n",
            " extracting: dad/frames_stats/training/negative/000414.npy  \n",
            " extracting: dad/frames_stats/training/negative/000415.npy  \n",
            " extracting: dad/frames_stats/training/negative/000416.npy  \n",
            " extracting: dad/frames_stats/training/negative/000417.npy  \n",
            " extracting: dad/frames_stats/training/negative/000418.npy  \n",
            " extracting: dad/frames_stats/training/negative/000419.npy  \n",
            " extracting: dad/frames_stats/training/negative/000420.npy  \n",
            " extracting: dad/frames_stats/training/negative/000421.npy  \n",
            " extracting: dad/frames_stats/training/negative/000422.npy  \n",
            " extracting: dad/frames_stats/training/negative/000423.npy  \n",
            " extracting: dad/frames_stats/training/negative/000424.npy  \n",
            " extracting: dad/frames_stats/training/negative/000425.npy  \n",
            " extracting: dad/frames_stats/training/negative/000426.npy  \n",
            " extracting: dad/frames_stats/training/negative/000427.npy  \n",
            " extracting: dad/frames_stats/training/negative/000428.npy  \n",
            " extracting: dad/frames_stats/training/negative/000429.npy  \n",
            " extracting: dad/frames_stats/training/negative/000430.npy  \n",
            " extracting: dad/frames_stats/training/negative/000431.npy  \n",
            " extracting: dad/frames_stats/training/negative/000432.npy  \n",
            " extracting: dad/frames_stats/training/negative/000433.npy  \n",
            " extracting: dad/frames_stats/training/negative/000434.npy  \n",
            " extracting: dad/frames_stats/training/negative/000435.npy  \n",
            " extracting: dad/frames_stats/training/negative/000436.npy  \n",
            " extracting: dad/frames_stats/training/negative/000437.npy  \n",
            " extracting: dad/frames_stats/training/negative/000438.npy  \n",
            " extracting: dad/frames_stats/training/negative/000439.npy  \n",
            " extracting: dad/frames_stats/training/negative/000440.npy  \n",
            " extracting: dad/frames_stats/training/negative/000441.npy  \n",
            " extracting: dad/frames_stats/training/negative/000442.npy  \n",
            " extracting: dad/frames_stats/training/negative/000443.npy  \n",
            " extracting: dad/frames_stats/training/negative/000444.npy  \n",
            " extracting: dad/frames_stats/training/negative/000445.npy  \n",
            " extracting: dad/frames_stats/training/negative/000446.npy  \n",
            " extracting: dad/frames_stats/training/negative/000447.npy  \n",
            " extracting: dad/frames_stats/training/negative/000448.npy  \n",
            " extracting: dad/frames_stats/training/negative/000449.npy  \n",
            " extracting: dad/frames_stats/training/negative/000450.npy  \n",
            " extracting: dad/frames_stats/training/negative/000451.npy  \n",
            " extracting: dad/frames_stats/training/negative/000452.npy  \n",
            " extracting: dad/frames_stats/training/negative/000453.npy  \n",
            " extracting: dad/frames_stats/training/negative/000454.npy  \n",
            " extracting: dad/frames_stats/training/negative/000455.npy  \n",
            " extracting: dad/frames_stats/training/negative/000456.npy  \n",
            " extracting: dad/frames_stats/training/negative/000457.npy  \n",
            " extracting: dad/frames_stats/training/negative/000458.npy  \n",
            " extracting: dad/frames_stats/training/negative/000459.npy  \n",
            " extracting: dad/frames_stats/training/negative/000460.npy  \n",
            " extracting: dad/frames_stats/training/negative/000461.npy  \n",
            " extracting: dad/frames_stats/training/negative/000462.npy  \n",
            " extracting: dad/frames_stats/training/negative/000463.npy  \n",
            " extracting: dad/frames_stats/training/negative/000464.npy  \n",
            " extracting: dad/frames_stats/training/negative/000465.npy  \n",
            " extracting: dad/frames_stats/training/negative/000466.npy  \n",
            " extracting: dad/frames_stats/training/negative/000467.npy  \n",
            " extracting: dad/frames_stats/training/negative/000468.npy  \n",
            " extracting: dad/frames_stats/training/negative/000469.npy  \n",
            " extracting: dad/frames_stats/training/negative/000470.npy  \n",
            " extracting: dad/frames_stats/training/negative/000471.npy  \n",
            " extracting: dad/frames_stats/training/negative/000472.npy  \n",
            " extracting: dad/frames_stats/training/negative/000473.npy  \n",
            " extracting: dad/frames_stats/training/negative/000474.npy  \n",
            " extracting: dad/frames_stats/training/negative/000475.npy  \n",
            " extracting: dad/frames_stats/training/negative/000476.npy  \n",
            " extracting: dad/frames_stats/training/negative/000477.npy  \n",
            " extracting: dad/frames_stats/training/negative/000478.npy  \n",
            " extracting: dad/frames_stats/training/negative/000479.npy  \n",
            " extracting: dad/frames_stats/training/negative/000480.npy  \n",
            " extracting: dad/frames_stats/training/negative/000481.npy  \n",
            " extracting: dad/frames_stats/training/negative/000482.npy  \n",
            " extracting: dad/frames_stats/training/negative/000483.npy  \n",
            " extracting: dad/frames_stats/training/negative/000484.npy  \n",
            " extracting: dad/frames_stats/training/negative/000485.npy  \n",
            " extracting: dad/frames_stats/training/negative/000486.npy  \n",
            " extracting: dad/frames_stats/training/negative/000487.npy  \n",
            " extracting: dad/frames_stats/training/negative/000488.npy  \n",
            " extracting: dad/frames_stats/training/negative/000489.npy  \n",
            " extracting: dad/frames_stats/training/negative/000490.npy  \n",
            " extracting: dad/frames_stats/training/negative/000491.npy  \n",
            " extracting: dad/frames_stats/training/negative/000492.npy  \n",
            " extracting: dad/frames_stats/training/negative/000493.npy  \n",
            " extracting: dad/frames_stats/training/negative/000494.npy  \n",
            " extracting: dad/frames_stats/training/negative/000495.npy  \n",
            " extracting: dad/frames_stats/training/negative/000496.npy  \n",
            " extracting: dad/frames_stats/training/negative/000497.npy  \n",
            " extracting: dad/frames_stats/training/negative/000498.npy  \n",
            " extracting: dad/frames_stats/training/negative/000499.npy  \n",
            " extracting: dad/frames_stats/training/negative/000500.npy  \n",
            " extracting: dad/frames_stats/training/negative/000501.npy  \n",
            " extracting: dad/frames_stats/training/negative/000502.npy  \n",
            " extracting: dad/frames_stats/training/negative/000503.npy  \n",
            " extracting: dad/frames_stats/training/negative/000504.npy  \n",
            " extracting: dad/frames_stats/training/negative/000505.npy  \n",
            " extracting: dad/frames_stats/training/negative/000506.npy  \n",
            " extracting: dad/frames_stats/training/negative/000507.npy  \n",
            " extracting: dad/frames_stats/training/negative/000508.npy  \n",
            " extracting: dad/frames_stats/training/negative/000509.npy  \n",
            " extracting: dad/frames_stats/training/negative/000510.npy  \n",
            " extracting: dad/frames_stats/training/negative/000511.npy  \n",
            " extracting: dad/frames_stats/training/negative/000512.npy  \n",
            " extracting: dad/frames_stats/training/negative/000513.npy  \n",
            " extracting: dad/frames_stats/training/negative/000514.npy  \n",
            " extracting: dad/frames_stats/training/negative/000515.npy  \n",
            " extracting: dad/frames_stats/training/negative/000516.npy  \n",
            " extracting: dad/frames_stats/training/negative/000517.npy  \n",
            " extracting: dad/frames_stats/training/negative/000518.npy  \n",
            " extracting: dad/frames_stats/training/negative/000519.npy  \n",
            " extracting: dad/frames_stats/training/negative/000520.npy  \n",
            " extracting: dad/frames_stats/training/negative/000521.npy  \n",
            " extracting: dad/frames_stats/training/negative/000522.npy  \n",
            " extracting: dad/frames_stats/training/negative/000523.npy  \n",
            " extracting: dad/frames_stats/training/negative/000524.npy  \n",
            " extracting: dad/frames_stats/training/negative/000525.npy  \n",
            " extracting: dad/frames_stats/training/negative/000526.npy  \n",
            " extracting: dad/frames_stats/training/negative/000527.npy  \n",
            " extracting: dad/frames_stats/training/negative/000528.npy  \n",
            " extracting: dad/frames_stats/training/negative/000529.npy  \n",
            " extracting: dad/frames_stats/training/negative/000530.npy  \n",
            " extracting: dad/frames_stats/training/negative/000531.npy  \n",
            " extracting: dad/frames_stats/training/negative/000532.npy  \n",
            " extracting: dad/frames_stats/training/negative/000533.npy  \n",
            " extracting: dad/frames_stats/training/negative/000534.npy  \n",
            " extracting: dad/frames_stats/training/negative/000535.npy  \n",
            " extracting: dad/frames_stats/training/negative/000536.npy  \n",
            " extracting: dad/frames_stats/training/negative/000537.npy  \n",
            " extracting: dad/frames_stats/training/negative/000538.npy  \n",
            " extracting: dad/frames_stats/training/negative/000539.npy  \n",
            " extracting: dad/frames_stats/training/negative/000540.npy  \n",
            " extracting: dad/frames_stats/training/negative/000541.npy  \n",
            " extracting: dad/frames_stats/training/negative/000542.npy  \n",
            " extracting: dad/frames_stats/training/negative/000543.npy  \n",
            " extracting: dad/frames_stats/training/negative/000544.npy  \n",
            " extracting: dad/frames_stats/training/negative/000545.npy  \n",
            " extracting: dad/frames_stats/training/negative/000546.npy  \n",
            " extracting: dad/frames_stats/training/negative/000547.npy  \n",
            " extracting: dad/frames_stats/training/negative/000548.npy  \n",
            " extracting: dad/frames_stats/training/negative/000549.npy  \n",
            " extracting: dad/frames_stats/training/negative/000550.npy  \n",
            " extracting: dad/frames_stats/training/negative/000551.npy  \n",
            " extracting: dad/frames_stats/training/negative/000552.npy  \n",
            " extracting: dad/frames_stats/training/negative/000553.npy  \n",
            " extracting: dad/frames_stats/training/negative/000554.npy  \n",
            " extracting: dad/frames_stats/training/negative/000555.npy  \n",
            " extracting: dad/frames_stats/training/negative/000556.npy  \n",
            " extracting: dad/frames_stats/training/negative/000557.npy  \n",
            " extracting: dad/frames_stats/training/negative/000558.npy  \n",
            " extracting: dad/frames_stats/training/negative/000559.npy  \n",
            " extracting: dad/frames_stats/training/negative/000560.npy  \n",
            " extracting: dad/frames_stats/training/negative/000561.npy  \n",
            " extracting: dad/frames_stats/training/negative/000562.npy  \n",
            " extracting: dad/frames_stats/training/negative/000563.npy  \n",
            " extracting: dad/frames_stats/training/negative/000564.npy  \n",
            " extracting: dad/frames_stats/training/negative/000565.npy  \n",
            " extracting: dad/frames_stats/training/negative/000566.npy  \n",
            " extracting: dad/frames_stats/training/negative/000567.npy  \n",
            " extracting: dad/frames_stats/training/negative/000568.npy  \n",
            " extracting: dad/frames_stats/training/negative/000569.npy  \n",
            " extracting: dad/frames_stats/training/negative/000570.npy  \n",
            " extracting: dad/frames_stats/training/negative/000571.npy  \n",
            " extracting: dad/frames_stats/training/negative/000572.npy  \n",
            " extracting: dad/frames_stats/training/negative/000573.npy  \n",
            " extracting: dad/frames_stats/training/negative/000574.npy  \n",
            " extracting: dad/frames_stats/training/negative/000575.npy  \n",
            " extracting: dad/frames_stats/training/negative/000576.npy  \n",
            " extracting: dad/frames_stats/training/negative/000577.npy  \n",
            " extracting: dad/frames_stats/training/negative/000578.npy  \n",
            " extracting: dad/frames_stats/training/negative/000579.npy  \n",
            " extracting: dad/frames_stats/training/negative/000580.npy  \n",
            " extracting: dad/frames_stats/training/negative/000581.npy  \n",
            " extracting: dad/frames_stats/training/negative/000582.npy  \n",
            " extracting: dad/frames_stats/training/negative/000583.npy  \n",
            " extracting: dad/frames_stats/training/negative/000584.npy  \n",
            " extracting: dad/frames_stats/training/negative/000585.npy  \n",
            " extracting: dad/frames_stats/training/negative/000586.npy  \n",
            " extracting: dad/frames_stats/training/negative/000587.npy  \n",
            " extracting: dad/frames_stats/training/negative/000588.npy  \n",
            " extracting: dad/frames_stats/training/negative/000589.npy  \n",
            " extracting: dad/frames_stats/training/negative/000590.npy  \n",
            " extracting: dad/frames_stats/training/negative/000591.npy  \n",
            " extracting: dad/frames_stats/training/negative/000592.npy  \n",
            " extracting: dad/frames_stats/training/negative/000593.npy  \n",
            " extracting: dad/frames_stats/training/negative/000594.npy  \n",
            " extracting: dad/frames_stats/training/negative/000595.npy  \n",
            " extracting: dad/frames_stats/training/negative/000596.npy  \n",
            " extracting: dad/frames_stats/training/negative/000597.npy  \n",
            " extracting: dad/frames_stats/training/negative/000598.npy  \n",
            " extracting: dad/frames_stats/training/negative/000599.npy  \n",
            " extracting: dad/frames_stats/training/negative/000600.npy  \n",
            " extracting: dad/frames_stats/training/negative/000601.npy  \n",
            " extracting: dad/frames_stats/training/negative/000602.npy  \n",
            " extracting: dad/frames_stats/training/negative/000603.npy  \n",
            " extracting: dad/frames_stats/training/negative/000604.npy  \n",
            " extracting: dad/frames_stats/training/negative/000605.npy  \n",
            " extracting: dad/frames_stats/training/negative/000606.npy  \n",
            " extracting: dad/frames_stats/training/negative/000607.npy  \n",
            " extracting: dad/frames_stats/training/negative/000608.npy  \n",
            " extracting: dad/frames_stats/training/negative/000609.npy  \n",
            " extracting: dad/frames_stats/training/negative/000610.npy  \n",
            " extracting: dad/frames_stats/training/negative/000611.npy  \n",
            " extracting: dad/frames_stats/training/negative/000612.npy  \n",
            " extracting: dad/frames_stats/training/negative/000613.npy  \n",
            " extracting: dad/frames_stats/training/negative/000614.npy  \n",
            " extracting: dad/frames_stats/training/negative/000615.npy  \n",
            " extracting: dad/frames_stats/training/negative/000616.npy  \n",
            " extracting: dad/frames_stats/training/negative/000617.npy  \n",
            " extracting: dad/frames_stats/training/negative/000618.npy  \n",
            " extracting: dad/frames_stats/training/negative/000619.npy  \n",
            " extracting: dad/frames_stats/training/negative/000620.npy  \n",
            " extracting: dad/frames_stats/training/negative/000621.npy  \n",
            " extracting: dad/frames_stats/training/negative/000622.npy  \n",
            " extracting: dad/frames_stats/training/negative/000623.npy  \n",
            " extracting: dad/frames_stats/training/negative/000624.npy  \n",
            " extracting: dad/frames_stats/training/negative/000625.npy  \n",
            " extracting: dad/frames_stats/training/negative/000626.npy  \n",
            " extracting: dad/frames_stats/training/negative/000627.npy  \n",
            " extracting: dad/frames_stats/training/negative/000628.npy  \n",
            " extracting: dad/frames_stats/training/negative/000629.npy  \n",
            " extracting: dad/frames_stats/training/negative/000630.npy  \n",
            " extracting: dad/frames_stats/training/negative/000631.npy  \n",
            " extracting: dad/frames_stats/training/negative/000632.npy  \n",
            " extracting: dad/frames_stats/training/negative/000633.npy  \n",
            " extracting: dad/frames_stats/training/negative/000634.npy  \n",
            " extracting: dad/frames_stats/training/negative/000635.npy  \n",
            " extracting: dad/frames_stats/training/negative/000636.npy  \n",
            " extracting: dad/frames_stats/training/negative/000637.npy  \n",
            " extracting: dad/frames_stats/training/negative/000638.npy  \n",
            " extracting: dad/frames_stats/training/negative/000639.npy  \n",
            " extracting: dad/frames_stats/training/negative/000640.npy  \n",
            " extracting: dad/frames_stats/training/negative/000641.npy  \n",
            " extracting: dad/frames_stats/training/negative/000642.npy  \n",
            " extracting: dad/frames_stats/training/negative/000643.npy  \n",
            " extracting: dad/frames_stats/training/negative/000644.npy  \n",
            " extracting: dad/frames_stats/training/negative/000645.npy  \n",
            " extracting: dad/frames_stats/training/negative/000646.npy  \n",
            " extracting: dad/frames_stats/training/negative/000647.npy  \n",
            " extracting: dad/frames_stats/training/negative/000648.npy  \n",
            " extracting: dad/frames_stats/training/negative/000649.npy  \n",
            " extracting: dad/frames_stats/training/negative/000650.npy  \n",
            " extracting: dad/frames_stats/training/negative/000651.npy  \n",
            " extracting: dad/frames_stats/training/negative/000652.npy  \n",
            " extracting: dad/frames_stats/training/negative/000653.npy  \n",
            " extracting: dad/frames_stats/training/negative/000654.npy  \n",
            " extracting: dad/frames_stats/training/negative/000655.npy  \n",
            " extracting: dad/frames_stats/training/negative/000656.npy  \n",
            " extracting: dad/frames_stats/training/negative/000657.npy  \n",
            " extracting: dad/frames_stats/training/negative/000658.npy  \n",
            " extracting: dad/frames_stats/training/negative/000659.npy  \n",
            " extracting: dad/frames_stats/training/negative/000660.npy  \n",
            " extracting: dad/frames_stats/training/negative/000661.npy  \n",
            " extracting: dad/frames_stats/training/negative/000662.npy  \n",
            " extracting: dad/frames_stats/training/negative/000663.npy  \n",
            " extracting: dad/frames_stats/training/negative/000664.npy  \n",
            " extracting: dad/frames_stats/training/negative/000665.npy  \n",
            " extracting: dad/frames_stats/training/negative/000666.npy  \n",
            " extracting: dad/frames_stats/training/negative/000667.npy  \n",
            " extracting: dad/frames_stats/training/negative/000668.npy  \n",
            " extracting: dad/frames_stats/training/negative/000669.npy  \n",
            " extracting: dad/frames_stats/training/negative/000670.npy  \n",
            " extracting: dad/frames_stats/training/negative/000671.npy  \n",
            " extracting: dad/frames_stats/training/negative/000672.npy  \n",
            " extracting: dad/frames_stats/training/negative/000673.npy  \n",
            " extracting: dad/frames_stats/training/negative/000674.npy  \n",
            " extracting: dad/frames_stats/training/negative/000675.npy  \n",
            " extracting: dad/frames_stats/training/negative/000676.npy  \n",
            " extracting: dad/frames_stats/training/negative/000677.npy  \n",
            " extracting: dad/frames_stats/training/negative/000678.npy  \n",
            " extracting: dad/frames_stats/training/negative/000679.npy  \n",
            " extracting: dad/frames_stats/training/negative/000680.npy  \n",
            " extracting: dad/frames_stats/training/negative/000681.npy  \n",
            " extracting: dad/frames_stats/training/negative/000682.npy  \n",
            " extracting: dad/frames_stats/training/negative/000683.npy  \n",
            " extracting: dad/frames_stats/training/negative/000684.npy  \n",
            " extracting: dad/frames_stats/training/negative/000685.npy  \n",
            " extracting: dad/frames_stats/training/negative/000686.npy  \n",
            " extracting: dad/frames_stats/training/negative/000687.npy  \n",
            " extracting: dad/frames_stats/training/negative/000688.npy  \n",
            " extracting: dad/frames_stats/training/negative/000689.npy  \n",
            " extracting: dad/frames_stats/training/negative/000690.npy  \n",
            " extracting: dad/frames_stats/training/negative/000691.npy  \n",
            " extracting: dad/frames_stats/training/negative/000692.npy  \n",
            " extracting: dad/frames_stats/training/negative/000693.npy  \n",
            " extracting: dad/frames_stats/training/negative/000694.npy  \n",
            " extracting: dad/frames_stats/training/negative/000695.npy  \n",
            " extracting: dad/frames_stats/training/negative/000696.npy  \n",
            " extracting: dad/frames_stats/training/negative/000697.npy  \n",
            " extracting: dad/frames_stats/training/negative/000698.npy  \n",
            " extracting: dad/frames_stats/training/negative/000699.npy  \n",
            " extracting: dad/frames_stats/training/negative/000700.npy  \n",
            " extracting: dad/frames_stats/training/negative/000701.npy  \n",
            " extracting: dad/frames_stats/training/negative/000702.npy  \n",
            " extracting: dad/frames_stats/training/negative/000703.npy  \n",
            " extracting: dad/frames_stats/training/negative/000704.npy  \n",
            " extracting: dad/frames_stats/training/negative/000705.npy  \n",
            " extracting: dad/frames_stats/training/negative/000706.npy  \n",
            " extracting: dad/frames_stats/training/negative/000707.npy  \n",
            " extracting: dad/frames_stats/training/negative/000708.npy  \n",
            " extracting: dad/frames_stats/training/negative/000709.npy  \n",
            " extracting: dad/frames_stats/training/negative/000710.npy  \n",
            " extracting: dad/frames_stats/training/negative/000711.npy  \n",
            " extracting: dad/frames_stats/training/negative/000712.npy  \n",
            " extracting: dad/frames_stats/training/negative/000713.npy  \n",
            " extracting: dad/frames_stats/training/negative/000714.npy  \n",
            " extracting: dad/frames_stats/training/negative/000715.npy  \n",
            " extracting: dad/frames_stats/training/negative/000716.npy  \n",
            " extracting: dad/frames_stats/training/negative/000717.npy  \n",
            " extracting: dad/frames_stats/training/negative/000718.npy  \n",
            " extracting: dad/frames_stats/training/negative/000719.npy  \n",
            " extracting: dad/frames_stats/training/negative/000720.npy  \n",
            " extracting: dad/frames_stats/training/negative/000721.npy  \n",
            " extracting: dad/frames_stats/training/negative/000722.npy  \n",
            " extracting: dad/frames_stats/training/negative/000723.npy  \n",
            " extracting: dad/frames_stats/training/negative/000724.npy  \n",
            " extracting: dad/frames_stats/training/negative/000725.npy  \n",
            " extracting: dad/frames_stats/training/negative/000726.npy  \n",
            " extracting: dad/frames_stats/training/negative/000727.npy  \n",
            " extracting: dad/frames_stats/training/negative/000728.npy  \n",
            " extracting: dad/frames_stats/training/negative/000729.npy  \n",
            " extracting: dad/frames_stats/training/negative/000730.npy  \n",
            " extracting: dad/frames_stats/training/negative/000731.npy  \n",
            " extracting: dad/frames_stats/training/negative/000732.npy  \n",
            " extracting: dad/frames_stats/training/negative/000733.npy  \n",
            " extracting: dad/frames_stats/training/negative/000734.npy  \n",
            " extracting: dad/frames_stats/training/negative/000735.npy  \n",
            " extracting: dad/frames_stats/training/negative/000736.npy  \n",
            " extracting: dad/frames_stats/training/negative/000737.npy  \n",
            " extracting: dad/frames_stats/training/negative/000738.npy  \n",
            " extracting: dad/frames_stats/training/negative/000739.npy  \n",
            " extracting: dad/frames_stats/training/negative/000740.npy  \n",
            " extracting: dad/frames_stats/training/negative/000741.npy  \n",
            " extracting: dad/frames_stats/training/negative/000742.npy  \n",
            " extracting: dad/frames_stats/training/negative/000743.npy  \n",
            " extracting: dad/frames_stats/training/negative/000744.npy  \n",
            " extracting: dad/frames_stats/training/negative/000745.npy  \n",
            " extracting: dad/frames_stats/training/negative/000746.npy  \n",
            " extracting: dad/frames_stats/training/negative/000747.npy  \n",
            " extracting: dad/frames_stats/training/negative/000748.npy  \n",
            " extracting: dad/frames_stats/training/negative/000749.npy  \n",
            " extracting: dad/frames_stats/training/negative/000750.npy  \n",
            " extracting: dad/frames_stats/training/negative/000751.npy  \n",
            " extracting: dad/frames_stats/training/negative/000752.npy  \n",
            " extracting: dad/frames_stats/training/negative/000753.npy  \n",
            " extracting: dad/frames_stats/training/negative/000754.npy  \n",
            " extracting: dad/frames_stats/training/negative/000755.npy  \n",
            " extracting: dad/frames_stats/training/negative/000756.npy  \n",
            " extracting: dad/frames_stats/training/negative/000757.npy  \n",
            " extracting: dad/frames_stats/training/negative/000758.npy  \n",
            " extracting: dad/frames_stats/training/negative/000759.npy  \n",
            " extracting: dad/frames_stats/training/negative/000760.npy  \n",
            " extracting: dad/frames_stats/training/negative/000761.npy  \n",
            " extracting: dad/frames_stats/training/negative/000762.npy  \n",
            " extracting: dad/frames_stats/training/negative/000763.npy  \n",
            " extracting: dad/frames_stats/training/negative/000764.npy  \n",
            " extracting: dad/frames_stats/training/negative/000765.npy  \n",
            " extracting: dad/frames_stats/training/negative/000766.npy  \n",
            " extracting: dad/frames_stats/training/negative/000767.npy  \n",
            " extracting: dad/frames_stats/training/negative/000768.npy  \n",
            " extracting: dad/frames_stats/training/negative/000769.npy  \n",
            " extracting: dad/frames_stats/training/negative/000770.npy  \n",
            " extracting: dad/frames_stats/training/negative/000771.npy  \n",
            " extracting: dad/frames_stats/training/negative/000772.npy  \n",
            " extracting: dad/frames_stats/training/negative/000773.npy  \n",
            " extracting: dad/frames_stats/training/negative/000774.npy  \n",
            " extracting: dad/frames_stats/training/negative/000775.npy  \n",
            " extracting: dad/frames_stats/training/negative/000776.npy  \n",
            " extracting: dad/frames_stats/training/negative/000777.npy  \n",
            " extracting: dad/frames_stats/training/negative/000778.npy  \n",
            " extracting: dad/frames_stats/training/negative/000779.npy  \n",
            " extracting: dad/frames_stats/training/negative/000780.npy  \n",
            " extracting: dad/frames_stats/training/negative/000781.npy  \n",
            " extracting: dad/frames_stats/training/negative/000782.npy  \n",
            " extracting: dad/frames_stats/training/negative/000783.npy  \n",
            " extracting: dad/frames_stats/training/negative/000784.npy  \n",
            " extracting: dad/frames_stats/training/negative/000785.npy  \n",
            " extracting: dad/frames_stats/training/negative/000786.npy  \n",
            " extracting: dad/frames_stats/training/negative/000787.npy  \n",
            " extracting: dad/frames_stats/training/negative/000788.npy  \n",
            " extracting: dad/frames_stats/training/negative/000789.npy  \n",
            " extracting: dad/frames_stats/training/negative/000790.npy  \n",
            " extracting: dad/frames_stats/training/negative/000791.npy  \n",
            " extracting: dad/frames_stats/training/negative/000792.npy  \n",
            " extracting: dad/frames_stats/training/negative/000793.npy  \n",
            " extracting: dad/frames_stats/training/negative/000794.npy  \n",
            " extracting: dad/frames_stats/training/negative/000795.npy  \n",
            " extracting: dad/frames_stats/training/negative/000796.npy  \n",
            " extracting: dad/frames_stats/training/negative/000797.npy  \n",
            " extracting: dad/frames_stats/training/negative/000798.npy  \n",
            " extracting: dad/frames_stats/training/negative/000799.npy  \n",
            " extracting: dad/frames_stats/training/negative/000800.npy  \n",
            " extracting: dad/frames_stats/training/negative/000801.npy  \n",
            " extracting: dad/frames_stats/training/negative/000802.npy  \n",
            " extracting: dad/frames_stats/training/negative/000803.npy  \n",
            " extracting: dad/frames_stats/training/negative/000804.npy  \n",
            " extracting: dad/frames_stats/training/negative/000805.npy  \n",
            " extracting: dad/frames_stats/training/negative/000806.npy  \n",
            " extracting: dad/frames_stats/training/negative/000807.npy  \n",
            " extracting: dad/frames_stats/training/negative/000808.npy  \n",
            " extracting: dad/frames_stats/training/negative/000809.npy  \n",
            " extracting: dad/frames_stats/training/negative/000810.npy  \n",
            " extracting: dad/frames_stats/training/negative/000811.npy  \n",
            " extracting: dad/frames_stats/training/negative/000812.npy  \n",
            " extracting: dad/frames_stats/training/negative/000813.npy  \n",
            " extracting: dad/frames_stats/training/negative/000814.npy  \n",
            " extracting: dad/frames_stats/training/negative/000815.npy  \n",
            " extracting: dad/frames_stats/training/negative/000816.npy  \n",
            " extracting: dad/frames_stats/training/negative/000817.npy  \n",
            " extracting: dad/frames_stats/training/negative/000818.npy  \n",
            " extracting: dad/frames_stats/training/negative/000819.npy  \n",
            " extracting: dad/frames_stats/training/negative/000820.npy  \n",
            " extracting: dad/frames_stats/training/negative/000821.npy  \n",
            " extracting: dad/frames_stats/training/negative/000822.npy  \n",
            " extracting: dad/frames_stats/training/negative/000823.npy  \n",
            " extracting: dad/frames_stats/training/negative/000824.npy  \n",
            " extracting: dad/frames_stats/training/negative/000825.npy  \n",
            " extracting: dad/frames_stats/training/negative/000826.npy  \n",
            " extracting: dad/frames_stats/training/negative/000827.npy  \n",
            " extracting: dad/frames_stats/training/negative/000828.npy  \n",
            " extracting: dad/frames_stats/training/negative/000829.npy  \n",
            " extracting: dad/frames_stats/training/positive/000001.npy  \n",
            " extracting: dad/frames_stats/training/positive/000002.npy  \n",
            " extracting: dad/frames_stats/training/positive/000003.npy  \n",
            " extracting: dad/frames_stats/training/positive/000004.npy  \n",
            " extracting: dad/frames_stats/training/positive/000005.npy  \n",
            " extracting: dad/frames_stats/training/positive/000006.npy  \n",
            " extracting: dad/frames_stats/training/positive/000007.npy  \n",
            " extracting: dad/frames_stats/training/positive/000008.npy  \n",
            " extracting: dad/frames_stats/training/positive/000009.npy  \n",
            " extracting: dad/frames_stats/training/positive/000010.npy  \n",
            " extracting: dad/frames_stats/training/positive/000011.npy  \n",
            " extracting: dad/frames_stats/training/positive/000012.npy  \n",
            " extracting: dad/frames_stats/training/positive/000013.npy  \n",
            " extracting: dad/frames_stats/training/positive/000014.npy  \n",
            " extracting: dad/frames_stats/training/positive/000015.npy  \n",
            " extracting: dad/frames_stats/training/positive/000016.npy  \n",
            " extracting: dad/frames_stats/training/positive/000017.npy  \n",
            " extracting: dad/frames_stats/training/positive/000018.npy  \n",
            " extracting: dad/frames_stats/training/positive/000019.npy  \n",
            " extracting: dad/frames_stats/training/positive/000020.npy  \n",
            " extracting: dad/frames_stats/training/positive/000021.npy  \n",
            " extracting: dad/frames_stats/training/positive/000022.npy  \n",
            " extracting: dad/frames_stats/training/positive/000023.npy  \n",
            " extracting: dad/frames_stats/training/positive/000024.npy  \n",
            " extracting: dad/frames_stats/training/positive/000025.npy  \n",
            " extracting: dad/frames_stats/training/positive/000026.npy  \n",
            " extracting: dad/frames_stats/training/positive/000027.npy  \n",
            " extracting: dad/frames_stats/training/positive/000028.npy  \n",
            " extracting: dad/frames_stats/training/positive/000029.npy  \n",
            " extracting: dad/frames_stats/training/positive/000030.npy  \n",
            " extracting: dad/frames_stats/training/positive/000031.npy  \n",
            " extracting: dad/frames_stats/training/positive/000032.npy  \n",
            " extracting: dad/frames_stats/training/positive/000033.npy  \n",
            " extracting: dad/frames_stats/training/positive/000034.npy  \n",
            " extracting: dad/frames_stats/training/positive/000035.npy  \n",
            " extracting: dad/frames_stats/training/positive/000036.npy  \n",
            " extracting: dad/frames_stats/training/positive/000037.npy  \n",
            " extracting: dad/frames_stats/training/positive/000038.npy  \n",
            " extracting: dad/frames_stats/training/positive/000039.npy  \n",
            " extracting: dad/frames_stats/training/positive/000040.npy  \n",
            " extracting: dad/frames_stats/training/positive/000041.npy  \n",
            " extracting: dad/frames_stats/training/positive/000042.npy  \n",
            " extracting: dad/frames_stats/training/positive/000043.npy  \n",
            " extracting: dad/frames_stats/training/positive/000044.npy  \n",
            " extracting: dad/frames_stats/training/positive/000045.npy  \n",
            " extracting: dad/frames_stats/training/positive/000046.npy  \n",
            " extracting: dad/frames_stats/training/positive/000047.npy  \n",
            " extracting: dad/frames_stats/training/positive/000048.npy  \n",
            " extracting: dad/frames_stats/training/positive/000049.npy  \n",
            " extracting: dad/frames_stats/training/positive/000050.npy  \n",
            " extracting: dad/frames_stats/training/positive/000051.npy  \n",
            " extracting: dad/frames_stats/training/positive/000052.npy  \n",
            " extracting: dad/frames_stats/training/positive/000053.npy  \n",
            " extracting: dad/frames_stats/training/positive/000054.npy  \n",
            " extracting: dad/frames_stats/training/positive/000055.npy  \n",
            " extracting: dad/frames_stats/training/positive/000056.npy  \n",
            " extracting: dad/frames_stats/training/positive/000057.npy  \n",
            " extracting: dad/frames_stats/training/positive/000058.npy  \n",
            " extracting: dad/frames_stats/training/positive/000059.npy  \n",
            " extracting: dad/frames_stats/training/positive/000060.npy  \n",
            " extracting: dad/frames_stats/training/positive/000061.npy  \n",
            " extracting: dad/frames_stats/training/positive/000062.npy  \n",
            " extracting: dad/frames_stats/training/positive/000063.npy  \n",
            " extracting: dad/frames_stats/training/positive/000064.npy  \n",
            " extracting: dad/frames_stats/training/positive/000065.npy  \n",
            " extracting: dad/frames_stats/training/positive/000066.npy  \n",
            " extracting: dad/frames_stats/training/positive/000067.npy  \n",
            " extracting: dad/frames_stats/training/positive/000068.npy  \n",
            " extracting: dad/frames_stats/training/positive/000069.npy  \n",
            " extracting: dad/frames_stats/training/positive/000070.npy  \n",
            " extracting: dad/frames_stats/training/positive/000071.npy  \n",
            " extracting: dad/frames_stats/training/positive/000072.npy  \n",
            " extracting: dad/frames_stats/training/positive/000073.npy  \n",
            " extracting: dad/frames_stats/training/positive/000074.npy  \n",
            " extracting: dad/frames_stats/training/positive/000075.npy  \n",
            " extracting: dad/frames_stats/training/positive/000076.npy  \n",
            " extracting: dad/frames_stats/training/positive/000077.npy  \n",
            " extracting: dad/frames_stats/training/positive/000078.npy  \n",
            " extracting: dad/frames_stats/training/positive/000079.npy  \n",
            " extracting: dad/frames_stats/training/positive/000080.npy  \n",
            " extracting: dad/frames_stats/training/positive/000081.npy  \n",
            " extracting: dad/frames_stats/training/positive/000082.npy  \n",
            " extracting: dad/frames_stats/training/positive/000083.npy  \n",
            " extracting: dad/frames_stats/training/positive/000084.npy  \n",
            " extracting: dad/frames_stats/training/positive/000085.npy  \n",
            " extracting: dad/frames_stats/training/positive/000086.npy  \n",
            " extracting: dad/frames_stats/training/positive/000087.npy  \n",
            " extracting: dad/frames_stats/training/positive/000088.npy  \n",
            " extracting: dad/frames_stats/training/positive/000089.npy  \n",
            " extracting: dad/frames_stats/training/positive/000090.npy  \n",
            " extracting: dad/frames_stats/training/positive/000091.npy  \n",
            " extracting: dad/frames_stats/training/positive/000092.npy  \n",
            " extracting: dad/frames_stats/training/positive/000093.npy  \n",
            " extracting: dad/frames_stats/training/positive/000094.npy  \n",
            " extracting: dad/frames_stats/training/positive/000095.npy  \n",
            " extracting: dad/frames_stats/training/positive/000096.npy  \n",
            " extracting: dad/frames_stats/training/positive/000097.npy  \n",
            " extracting: dad/frames_stats/training/positive/000098.npy  \n",
            " extracting: dad/frames_stats/training/positive/000099.npy  \n",
            " extracting: dad/frames_stats/training/positive/000100.npy  \n",
            " extracting: dad/frames_stats/training/positive/000101.npy  \n",
            " extracting: dad/frames_stats/training/positive/000102.npy  \n",
            " extracting: dad/frames_stats/training/positive/000103.npy  \n",
            " extracting: dad/frames_stats/training/positive/000104.npy  \n",
            " extracting: dad/frames_stats/training/positive/000105.npy  \n",
            " extracting: dad/frames_stats/training/positive/000106.npy  \n",
            " extracting: dad/frames_stats/training/positive/000107.npy  \n",
            " extracting: dad/frames_stats/training/positive/000108.npy  \n",
            " extracting: dad/frames_stats/training/positive/000109.npy  \n",
            " extracting: dad/frames_stats/training/positive/000110.npy  \n",
            " extracting: dad/frames_stats/training/positive/000111.npy  \n",
            " extracting: dad/frames_stats/training/positive/000112.npy  \n",
            " extracting: dad/frames_stats/training/positive/000113.npy  \n",
            " extracting: dad/frames_stats/training/positive/000114.npy  \n",
            " extracting: dad/frames_stats/training/positive/000115.npy  \n",
            " extracting: dad/frames_stats/training/positive/000116.npy  \n",
            " extracting: dad/frames_stats/training/positive/000117.npy  \n",
            " extracting: dad/frames_stats/training/positive/000118.npy  \n",
            " extracting: dad/frames_stats/training/positive/000119.npy  \n",
            " extracting: dad/frames_stats/training/positive/000120.npy  \n",
            " extracting: dad/frames_stats/training/positive/000121.npy  \n",
            " extracting: dad/frames_stats/training/positive/000122.npy  \n",
            " extracting: dad/frames_stats/training/positive/000123.npy  \n",
            " extracting: dad/frames_stats/training/positive/000124.npy  \n",
            " extracting: dad/frames_stats/training/positive/000125.npy  \n",
            " extracting: dad/frames_stats/training/positive/000126.npy  \n",
            " extracting: dad/frames_stats/training/positive/000127.npy  \n",
            " extracting: dad/frames_stats/training/positive/000128.npy  \n",
            " extracting: dad/frames_stats/training/positive/000129.npy  \n",
            " extracting: dad/frames_stats/training/positive/000130.npy  \n",
            " extracting: dad/frames_stats/training/positive/000131.npy  \n",
            " extracting: dad/frames_stats/training/positive/000132.npy  \n",
            " extracting: dad/frames_stats/training/positive/000133.npy  \n",
            " extracting: dad/frames_stats/training/positive/000134.npy  \n",
            " extracting: dad/frames_stats/training/positive/000135.npy  \n",
            " extracting: dad/frames_stats/training/positive/000136.npy  \n",
            " extracting: dad/frames_stats/training/positive/000137.npy  \n",
            " extracting: dad/frames_stats/training/positive/000138.npy  \n",
            " extracting: dad/frames_stats/training/positive/000139.npy  \n",
            " extracting: dad/frames_stats/training/positive/000140.npy  \n",
            " extracting: dad/frames_stats/training/positive/000141.npy  \n",
            " extracting: dad/frames_stats/training/positive/000142.npy  \n",
            " extracting: dad/frames_stats/training/positive/000143.npy  \n",
            " extracting: dad/frames_stats/training/positive/000144.npy  \n",
            " extracting: dad/frames_stats/training/positive/000145.npy  \n",
            " extracting: dad/frames_stats/training/positive/000146.npy  \n",
            " extracting: dad/frames_stats/training/positive/000147.npy  \n",
            " extracting: dad/frames_stats/training/positive/000148.npy  \n",
            " extracting: dad/frames_stats/training/positive/000149.npy  \n",
            " extracting: dad/frames_stats/training/positive/000150.npy  \n",
            " extracting: dad/frames_stats/training/positive/000151.npy  \n",
            " extracting: dad/frames_stats/training/positive/000152.npy  \n",
            " extracting: dad/frames_stats/training/positive/000153.npy  \n",
            " extracting: dad/frames_stats/training/positive/000154.npy  \n",
            " extracting: dad/frames_stats/training/positive/000155.npy  \n",
            " extracting: dad/frames_stats/training/positive/000156.npy  \n",
            " extracting: dad/frames_stats/training/positive/000157.npy  \n",
            " extracting: dad/frames_stats/training/positive/000158.npy  \n",
            " extracting: dad/frames_stats/training/positive/000159.npy  \n",
            " extracting: dad/frames_stats/training/positive/000160.npy  \n",
            " extracting: dad/frames_stats/training/positive/000161.npy  \n",
            " extracting: dad/frames_stats/training/positive/000162.npy  \n",
            " extracting: dad/frames_stats/training/positive/000163.npy  \n",
            " extracting: dad/frames_stats/training/positive/000164.npy  \n",
            " extracting: dad/frames_stats/training/positive/000165.npy  \n",
            " extracting: dad/frames_stats/training/positive/000166.npy  \n",
            " extracting: dad/frames_stats/training/positive/000167.npy  \n",
            " extracting: dad/frames_stats/training/positive/000168.npy  \n",
            " extracting: dad/frames_stats/training/positive/000169.npy  \n",
            " extracting: dad/frames_stats/training/positive/000170.npy  \n",
            " extracting: dad/frames_stats/training/positive/000171.npy  \n",
            " extracting: dad/frames_stats/training/positive/000172.npy  \n",
            " extracting: dad/frames_stats/training/positive/000173.npy  \n",
            " extracting: dad/frames_stats/training/positive/000174.npy  \n",
            " extracting: dad/frames_stats/training/positive/000175.npy  \n",
            " extracting: dad/frames_stats/training/positive/000176.npy  \n",
            " extracting: dad/frames_stats/training/positive/000177.npy  \n",
            " extracting: dad/frames_stats/training/positive/000178.npy  \n",
            " extracting: dad/frames_stats/training/positive/000179.npy  \n",
            " extracting: dad/frames_stats/training/positive/000180.npy  \n",
            " extracting: dad/frames_stats/training/positive/000181.npy  \n",
            " extracting: dad/frames_stats/training/positive/000182.npy  \n",
            " extracting: dad/frames_stats/training/positive/000183.npy  \n",
            " extracting: dad/frames_stats/training/positive/000184.npy  \n",
            " extracting: dad/frames_stats/training/positive/000185.npy  \n",
            " extracting: dad/frames_stats/training/positive/000186.npy  \n",
            " extracting: dad/frames_stats/training/positive/000187.npy  \n",
            " extracting: dad/frames_stats/training/positive/000188.npy  \n",
            " extracting: dad/frames_stats/training/positive/000189.npy  \n",
            " extracting: dad/frames_stats/training/positive/000190.npy  \n",
            " extracting: dad/frames_stats/training/positive/000191.npy  \n",
            " extracting: dad/frames_stats/training/positive/000192.npy  \n",
            " extracting: dad/frames_stats/training/positive/000193.npy  \n",
            " extracting: dad/frames_stats/training/positive/000194.npy  \n",
            " extracting: dad/frames_stats/training/positive/000195.npy  \n",
            " extracting: dad/frames_stats/training/positive/000196.npy  \n",
            " extracting: dad/frames_stats/training/positive/000197.npy  \n",
            " extracting: dad/frames_stats/training/positive/000198.npy  \n",
            " extracting: dad/frames_stats/training/positive/000199.npy  \n",
            " extracting: dad/frames_stats/training/positive/000200.npy  \n",
            " extracting: dad/frames_stats/training/positive/000201.npy  \n",
            " extracting: dad/frames_stats/training/positive/000202.npy  \n",
            " extracting: dad/frames_stats/training/positive/000203.npy  \n",
            " extracting: dad/frames_stats/training/positive/000204.npy  \n",
            " extracting: dad/frames_stats/training/positive/000205.npy  \n",
            " extracting: dad/frames_stats/training/positive/000206.npy  \n",
            " extracting: dad/frames_stats/training/positive/000207.npy  \n",
            " extracting: dad/frames_stats/training/positive/000208.npy  \n",
            " extracting: dad/frames_stats/training/positive/000209.npy  \n",
            " extracting: dad/frames_stats/training/positive/000210.npy  \n",
            " extracting: dad/frames_stats/training/positive/000211.npy  \n",
            " extracting: dad/frames_stats/training/positive/000212.npy  \n",
            " extracting: dad/frames_stats/training/positive/000213.npy  \n",
            " extracting: dad/frames_stats/training/positive/000214.npy  \n",
            " extracting: dad/frames_stats/training/positive/000215.npy  \n",
            " extracting: dad/frames_stats/training/positive/000216.npy  \n",
            " extracting: dad/frames_stats/training/positive/000217.npy  \n",
            " extracting: dad/frames_stats/training/positive/000218.npy  \n",
            " extracting: dad/frames_stats/training/positive/000219.npy  \n",
            " extracting: dad/frames_stats/training/positive/000220.npy  \n",
            " extracting: dad/frames_stats/training/positive/000221.npy  \n",
            " extracting: dad/frames_stats/training/positive/000222.npy  \n",
            " extracting: dad/frames_stats/training/positive/000223.npy  \n",
            " extracting: dad/frames_stats/training/positive/000224.npy  \n",
            " extracting: dad/frames_stats/training/positive/000225.npy  \n",
            " extracting: dad/frames_stats/training/positive/000226.npy  \n",
            " extracting: dad/frames_stats/training/positive/000227.npy  \n",
            " extracting: dad/frames_stats/training/positive/000228.npy  \n",
            " extracting: dad/frames_stats/training/positive/000229.npy  \n",
            " extracting: dad/frames_stats/training/positive/000230.npy  \n",
            " extracting: dad/frames_stats/training/positive/000231.npy  \n",
            " extracting: dad/frames_stats/training/positive/000232.npy  \n",
            " extracting: dad/frames_stats/training/positive/000233.npy  \n",
            " extracting: dad/frames_stats/training/positive/000234.npy  \n",
            " extracting: dad/frames_stats/training/positive/000235.npy  \n",
            " extracting: dad/frames_stats/training/positive/000236.npy  \n",
            " extracting: dad/frames_stats/training/positive/000237.npy  \n",
            " extracting: dad/frames_stats/training/positive/000238.npy  \n",
            " extracting: dad/frames_stats/training/positive/000239.npy  \n",
            " extracting: dad/frames_stats/training/positive/000240.npy  \n",
            " extracting: dad/frames_stats/training/positive/000241.npy  \n",
            " extracting: dad/frames_stats/training/positive/000242.npy  \n",
            " extracting: dad/frames_stats/training/positive/000243.npy  \n",
            " extracting: dad/frames_stats/training/positive/000244.npy  \n",
            " extracting: dad/frames_stats/training/positive/000245.npy  \n",
            " extracting: dad/frames_stats/training/positive/000246.npy  \n",
            " extracting: dad/frames_stats/training/positive/000247.npy  \n",
            " extracting: dad/frames_stats/training/positive/000248.npy  \n",
            " extracting: dad/frames_stats/training/positive/000249.npy  \n",
            " extracting: dad/frames_stats/training/positive/000250.npy  \n",
            " extracting: dad/frames_stats/training/positive/000251.npy  \n",
            " extracting: dad/frames_stats/training/positive/000252.npy  \n",
            " extracting: dad/frames_stats/training/positive/000253.npy  \n",
            " extracting: dad/frames_stats/training/positive/000254.npy  \n",
            " extracting: dad/frames_stats/training/positive/000255.npy  \n",
            " extracting: dad/frames_stats/training/positive/000256.npy  \n",
            " extracting: dad/frames_stats/training/positive/000257.npy  \n",
            " extracting: dad/frames_stats/training/positive/000258.npy  \n",
            " extracting: dad/frames_stats/training/positive/000259.npy  \n",
            " extracting: dad/frames_stats/training/positive/000260.npy  \n",
            " extracting: dad/frames_stats/training/positive/000261.npy  \n",
            " extracting: dad/frames_stats/training/positive/000262.npy  \n",
            " extracting: dad/frames_stats/training/positive/000263.npy  \n",
            " extracting: dad/frames_stats/training/positive/000264.npy  \n",
            " extracting: dad/frames_stats/training/positive/000265.npy  \n",
            " extracting: dad/frames_stats/training/positive/000266.npy  \n",
            " extracting: dad/frames_stats/training/positive/000267.npy  \n",
            " extracting: dad/frames_stats/training/positive/000268.npy  \n",
            " extracting: dad/frames_stats/training/positive/000269.npy  \n",
            " extracting: dad/frames_stats/training/positive/000270.npy  \n",
            " extracting: dad/frames_stats/training/positive/000271.npy  \n",
            " extracting: dad/frames_stats/training/positive/000272.npy  \n",
            " extracting: dad/frames_stats/training/positive/000273.npy  \n",
            " extracting: dad/frames_stats/training/positive/000274.npy  \n",
            " extracting: dad/frames_stats/training/positive/000275.npy  \n",
            " extracting: dad/frames_stats/training/positive/000276.npy  \n",
            " extracting: dad/frames_stats/training/positive/000277.npy  \n",
            " extracting: dad/frames_stats/training/positive/000278.npy  \n",
            " extracting: dad/frames_stats/training/positive/000279.npy  \n",
            " extracting: dad/frames_stats/training/positive/000280.npy  \n",
            " extracting: dad/frames_stats/training/positive/000281.npy  \n",
            " extracting: dad/frames_stats/training/positive/000282.npy  \n",
            " extracting: dad/frames_stats/training/positive/000283.npy  \n",
            " extracting: dad/frames_stats/training/positive/000284.npy  \n",
            " extracting: dad/frames_stats/training/positive/000285.npy  \n",
            " extracting: dad/frames_stats/training/positive/000286.npy  \n",
            " extracting: dad/frames_stats/training/positive/000287.npy  \n",
            " extracting: dad/frames_stats/training/positive/000288.npy  \n",
            " extracting: dad/frames_stats/training/positive/000289.npy  \n",
            " extracting: dad/frames_stats/training/positive/000290.npy  \n",
            " extracting: dad/frames_stats/training/positive/000291.npy  \n",
            " extracting: dad/frames_stats/training/positive/000292.npy  \n",
            " extracting: dad/frames_stats/training/positive/000293.npy  \n",
            " extracting: dad/frames_stats/training/positive/000294.npy  \n",
            " extracting: dad/frames_stats/training/positive/000295.npy  \n",
            " extracting: dad/frames_stats/training/positive/000296.npy  \n",
            " extracting: dad/frames_stats/training/positive/000297.npy  \n",
            " extracting: dad/frames_stats/training/positive/000298.npy  \n",
            " extracting: dad/frames_stats/training/positive/000299.npy  \n",
            " extracting: dad/frames_stats/training/positive/000300.npy  \n",
            " extracting: dad/frames_stats/training/positive/000301.npy  \n",
            " extracting: dad/frames_stats/training/positive/000302.npy  \n",
            " extracting: dad/frames_stats/training/positive/000303.npy  \n",
            " extracting: dad/frames_stats/training/positive/000304.npy  \n",
            " extracting: dad/frames_stats/training/positive/000305.npy  \n",
            " extracting: dad/frames_stats/training/positive/000306.npy  \n",
            " extracting: dad/frames_stats/training/positive/000307.npy  \n",
            " extracting: dad/frames_stats/training/positive/000308.npy  \n",
            " extracting: dad/frames_stats/training/positive/000309.npy  \n",
            " extracting: dad/frames_stats/training/positive/000310.npy  \n",
            " extracting: dad/frames_stats/training/positive/000311.npy  \n",
            " extracting: dad/frames_stats/training/positive/000312.npy  \n",
            " extracting: dad/frames_stats/training/positive/000313.npy  \n",
            " extracting: dad/frames_stats/training/positive/000314.npy  \n",
            " extracting: dad/frames_stats/training/positive/000315.npy  \n",
            " extracting: dad/frames_stats/training/positive/000316.npy  \n",
            " extracting: dad/frames_stats/training/positive/000317.npy  \n",
            " extracting: dad/frames_stats/training/positive/000318.npy  \n",
            " extracting: dad/frames_stats/training/positive/000319.npy  \n",
            " extracting: dad/frames_stats/training/positive/000320.npy  \n",
            " extracting: dad/frames_stats/training/positive/000321.npy  \n",
            " extracting: dad/frames_stats/training/positive/000322.npy  \n",
            " extracting: dad/frames_stats/training/positive/000323.npy  \n",
            " extracting: dad/frames_stats/training/positive/000324.npy  \n",
            " extracting: dad/frames_stats/training/positive/000325.npy  \n",
            " extracting: dad/frames_stats/training/positive/000326.npy  \n",
            " extracting: dad/frames_stats/training/positive/000327.npy  \n",
            " extracting: dad/frames_stats/training/positive/000328.npy  \n",
            " extracting: dad/frames_stats/training/positive/000329.npy  \n",
            " extracting: dad/frames_stats/training/positive/000330.npy  \n",
            " extracting: dad/frames_stats/training/positive/000331.npy  \n",
            " extracting: dad/frames_stats/training/positive/000332.npy  \n",
            " extracting: dad/frames_stats/training/positive/000333.npy  \n",
            " extracting: dad/frames_stats/training/positive/000334.npy  \n",
            " extracting: dad/frames_stats/training/positive/000335.npy  \n",
            " extracting: dad/frames_stats/training/positive/000336.npy  \n",
            " extracting: dad/frames_stats/training/positive/000337.npy  \n",
            " extracting: dad/frames_stats/training/positive/000338.npy  \n",
            " extracting: dad/frames_stats/training/positive/000339.npy  \n",
            " extracting: dad/frames_stats/training/positive/000340.npy  \n",
            " extracting: dad/frames_stats/training/positive/000341.npy  \n",
            " extracting: dad/frames_stats/training/positive/000342.npy  \n",
            " extracting: dad/frames_stats/training/positive/000343.npy  \n",
            " extracting: dad/frames_stats/training/positive/000344.npy  \n",
            " extracting: dad/frames_stats/training/positive/000345.npy  \n",
            " extracting: dad/frames_stats/training/positive/000346.npy  \n",
            " extracting: dad/frames_stats/training/positive/000347.npy  \n",
            " extracting: dad/frames_stats/training/positive/000348.npy  \n",
            " extracting: dad/frames_stats/training/positive/000349.npy  \n",
            " extracting: dad/frames_stats/training/positive/000350.npy  \n",
            " extracting: dad/frames_stats/training/positive/000351.npy  \n",
            " extracting: dad/frames_stats/training/positive/000352.npy  \n",
            " extracting: dad/frames_stats/training/positive/000353.npy  \n",
            " extracting: dad/frames_stats/training/positive/000354.npy  \n",
            " extracting: dad/frames_stats/training/positive/000355.npy  \n",
            " extracting: dad/frames_stats/training/positive/000356.npy  \n",
            " extracting: dad/frames_stats/training/positive/000357.npy  \n",
            " extracting: dad/frames_stats/training/positive/000358.npy  \n",
            " extracting: dad/frames_stats/training/positive/000359.npy  \n",
            " extracting: dad/frames_stats/training/positive/000360.npy  \n",
            " extracting: dad/frames_stats/training/positive/000361.npy  \n",
            " extracting: dad/frames_stats/training/positive/000362.npy  \n",
            " extracting: dad/frames_stats/training/positive/000363.npy  \n",
            " extracting: dad/frames_stats/training/positive/000364.npy  \n",
            " extracting: dad/frames_stats/training/positive/000365.npy  \n",
            " extracting: dad/frames_stats/training/positive/000366.npy  \n",
            " extracting: dad/frames_stats/training/positive/000367.npy  \n",
            " extracting: dad/frames_stats/training/positive/000368.npy  \n",
            " extracting: dad/frames_stats/training/positive/000369.npy  \n",
            " extracting: dad/frames_stats/training/positive/000370.npy  \n",
            " extracting: dad/frames_stats/training/positive/000371.npy  \n",
            " extracting: dad/frames_stats/training/positive/000372.npy  \n",
            " extracting: dad/frames_stats/training/positive/000373.npy  \n",
            " extracting: dad/frames_stats/training/positive/000374.npy  \n",
            " extracting: dad/frames_stats/training/positive/000375.npy  \n",
            " extracting: dad/frames_stats/training/positive/000376.npy  \n",
            " extracting: dad/frames_stats/training/positive/000377.npy  \n",
            " extracting: dad/frames_stats/training/positive/000378.npy  \n",
            " extracting: dad/frames_stats/training/positive/000379.npy  \n",
            " extracting: dad/frames_stats/training/positive/000380.npy  \n",
            " extracting: dad/frames_stats/training/positive/000381.npy  \n",
            " extracting: dad/frames_stats/training/positive/000382.npy  \n",
            " extracting: dad/frames_stats/training/positive/000383.npy  \n",
            " extracting: dad/frames_stats/training/positive/000384.npy  \n",
            " extracting: dad/frames_stats/training/positive/000385.npy  \n",
            " extracting: dad/frames_stats/training/positive/000386.npy  \n",
            " extracting: dad/frames_stats/training/positive/000387.npy  \n",
            " extracting: dad/frames_stats/training/positive/000388.npy  \n",
            " extracting: dad/frames_stats/training/positive/000389.npy  \n",
            " extracting: dad/frames_stats/training/positive/000390.npy  \n",
            " extracting: dad/frames_stats/training/positive/000391.npy  \n",
            " extracting: dad/frames_stats/training/positive/000392.npy  \n",
            " extracting: dad/frames_stats/training/positive/000393.npy  \n",
            " extracting: dad/frames_stats/training/positive/000394.npy  \n",
            " extracting: dad/frames_stats/training/positive/000395.npy  \n",
            " extracting: dad/frames_stats/training/positive/000396.npy  \n",
            " extracting: dad/frames_stats/training/positive/000397.npy  \n",
            " extracting: dad/frames_stats/training/positive/000398.npy  \n",
            " extracting: dad/frames_stats/training/positive/000399.npy  \n",
            " extracting: dad/frames_stats/training/positive/000400.npy  \n",
            " extracting: dad/frames_stats/training/positive/000401.npy  \n",
            " extracting: dad/frames_stats/training/positive/000402.npy  \n",
            " extracting: dad/frames_stats/training/positive/000403.npy  \n",
            " extracting: dad/frames_stats/training/positive/000404.npy  \n",
            " extracting: dad/frames_stats/training/positive/000405.npy  \n",
            " extracting: dad/frames_stats/training/positive/000406.npy  \n",
            " extracting: dad/frames_stats/training/positive/000407.npy  \n",
            " extracting: dad/frames_stats/training/positive/000408.npy  \n",
            " extracting: dad/frames_stats/training/positive/000409.npy  \n",
            " extracting: dad/frames_stats/training/positive/000410.npy  \n",
            " extracting: dad/frames_stats/training/positive/000411.npy  \n",
            " extracting: dad/frames_stats/training/positive/000412.npy  \n",
            " extracting: dad/frames_stats/training/positive/000413.npy  \n",
            " extracting: dad/frames_stats/training/positive/000414.npy  \n",
            " extracting: dad/frames_stats/training/positive/000415.npy  \n",
            " extracting: dad/frames_stats/training/positive/000416.npy  \n",
            " extracting: dad/frames_stats/training/positive/000417.npy  \n",
            " extracting: dad/frames_stats/training/positive/000418.npy  \n",
            " extracting: dad/frames_stats/training/positive/000419.npy  \n",
            " extracting: dad/frames_stats/training/positive/000420.npy  \n",
            " extracting: dad/frames_stats/training/positive/000421.npy  \n",
            " extracting: dad/frames_stats/training/positive/000422.npy  \n",
            " extracting: dad/frames_stats/training/positive/000423.npy  \n",
            " extracting: dad/frames_stats/training/positive/000424.npy  \n",
            " extracting: dad/frames_stats/training/positive/000425.npy  \n",
            " extracting: dad/frames_stats/training/positive/000426.npy  \n",
            " extracting: dad/frames_stats/training/positive/000427.npy  \n",
            " extracting: dad/frames_stats/training/positive/000428.npy  \n",
            " extracting: dad/frames_stats/training/positive/000429.npy  \n",
            " extracting: dad/frames_stats/training/positive/000430.npy  \n",
            " extracting: dad/frames_stats/training/positive/000431.npy  \n",
            " extracting: dad/frames_stats/training/positive/000432.npy  \n",
            " extracting: dad/frames_stats/training/positive/000433.npy  \n",
            " extracting: dad/frames_stats/training/positive/000434.npy  \n",
            " extracting: dad/frames_stats/training/positive/000435.npy  \n",
            " extracting: dad/frames_stats/training/positive/000436.npy  \n",
            " extracting: dad/frames_stats/training/positive/000437.npy  \n",
            " extracting: dad/frames_stats/training/positive/000438.npy  \n",
            " extracting: dad/frames_stats/training/positive/000439.npy  \n",
            " extracting: dad/frames_stats/training/positive/000440.npy  \n",
            " extracting: dad/frames_stats/training/positive/000441.npy  \n",
            " extracting: dad/frames_stats/training/positive/000442.npy  \n",
            " extracting: dad/frames_stats/training/positive/000443.npy  \n",
            " extracting: dad/frames_stats/training/positive/000444.npy  \n",
            " extracting: dad/frames_stats/training/positive/000445.npy  \n",
            " extracting: dad/frames_stats/training/positive/000446.npy  \n",
            " extracting: dad/frames_stats/training/positive/000447.npy  \n",
            " extracting: dad/frames_stats/training/positive/000448.npy  \n",
            " extracting: dad/frames_stats/training/positive/000449.npy  \n",
            " extracting: dad/frames_stats/training/positive/000450.npy  \n",
            " extracting: dad/frames_stats/training/positive/000451.npy  \n",
            " extracting: dad/frames_stats/training/positive/000452.npy  \n",
            " extracting: dad/frames_stats/training/positive/000453.npy  \n",
            " extracting: dad/frames_stats/training/positive/000454.npy  \n",
            " extracting: dad/frames_stats/training/positive/000455.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000830.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000831.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000832.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000833.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000834.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000835.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000836.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000837.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000838.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000839.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000840.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000841.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000842.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000843.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000844.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000845.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000846.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000847.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000848.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000849.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000850.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000851.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000852.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000853.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000854.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000855.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000856.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000857.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000858.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000859.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000860.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000861.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000862.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000863.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000864.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000865.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000866.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000867.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000868.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000869.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000870.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000871.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000872.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000873.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000874.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000875.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000876.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000877.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000878.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000879.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000880.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000881.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000882.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000883.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000884.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000885.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000886.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000887.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000888.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000889.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000890.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000891.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000892.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000893.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000894.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000895.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000896.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000897.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000898.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000899.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000900.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000901.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000902.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000903.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000904.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000905.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000906.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000907.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000908.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000909.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000910.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000911.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000912.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000913.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000914.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000915.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000916.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000917.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000918.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000919.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000920.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000921.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000922.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000923.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000924.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000925.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000926.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000927.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000928.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000929.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000930.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000931.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000932.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000933.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000934.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000935.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000936.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000937.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000938.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000939.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000940.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000941.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000942.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000943.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000944.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000945.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000946.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000947.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000948.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000949.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000950.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000951.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000952.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000953.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000954.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000955.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000956.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000957.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000958.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000959.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000960.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000961.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000962.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000963.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000964.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000965.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000966.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000967.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000968.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000969.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000970.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000971.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000972.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000973.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000974.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000975.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000976.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000977.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000978.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000979.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000980.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000981.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000982.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000983.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000984.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000985.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000986.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000987.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000988.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000989.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000990.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000991.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000992.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000993.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000994.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000995.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000996.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000997.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000998.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/000999.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001000.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001001.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001002.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001003.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001004.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001005.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001006.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001007.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001008.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001009.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001010.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001011.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001012.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001013.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001014.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001015.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001016.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001017.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001018.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001019.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001020.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001021.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001022.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001023.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001024.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001025.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001026.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001027.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001028.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001029.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001030.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001031.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001032.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001033.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001034.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001035.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001036.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001037.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001038.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001039.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001040.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001041.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001042.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001043.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001044.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001045.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001046.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001047.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001048.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001049.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001050.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001051.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001052.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001053.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001054.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001055.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001056.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001057.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001058.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001059.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001060.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001061.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001062.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001063.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001064.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001065.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001066.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001067.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001068.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001069.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001070.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001071.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001072.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001073.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001074.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001075.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001076.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001077.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001078.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001079.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001080.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001081.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001082.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001083.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001084.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001085.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001086.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001087.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001088.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001089.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001090.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001091.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001092.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001093.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001094.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001095.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001096.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001097.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001098.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001099.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001100.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001101.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001102.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001103.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001104.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001105.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001106.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001107.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001108.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001109.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001110.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001111.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001112.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001113.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001114.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001115.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001116.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001117.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001118.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001119.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001120.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001121.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001122.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001123.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001124.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001125.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001126.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001127.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001128.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001129.npy  \n",
            " extracting: dad/i3d_feat/testing/negative/001130.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000456.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000457.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000458.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000459.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000460.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000461.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000462.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000463.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000464.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000465.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000466.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000467.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000468.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000469.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000470.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000471.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000472.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000473.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000474.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000475.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000476.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000477.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000478.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000479.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000480.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000481.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000482.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000483.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000484.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000485.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000486.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000487.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000488.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000489.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000490.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000491.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000492.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000493.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000494.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000495.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000496.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000497.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000498.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000499.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000500.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000501.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000502.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000503.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000504.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000505.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000506.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000507.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000508.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000509.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000510.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000511.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000512.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000513.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000514.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000515.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000516.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000517.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000518.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000519.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000520.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000521.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000522.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000523.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000524.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000525.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000526.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000527.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000528.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000529.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000530.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000531.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000532.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000533.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000534.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000535.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000536.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000537.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000538.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000539.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000540.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000541.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000542.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000543.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000544.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000545.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000546.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000547.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000548.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000549.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000550.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000551.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000552.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000553.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000554.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000555.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000556.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000557.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000558.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000559.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000560.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000561.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000562.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000563.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000564.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000565.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000566.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000567.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000568.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000569.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000570.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000571.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000572.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000573.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000574.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000575.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000576.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000577.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000578.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000579.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000580.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000581.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000582.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000583.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000584.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000585.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000586.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000587.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000588.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000589.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000590.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000591.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000592.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000593.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000594.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000595.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000596.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000597.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000598.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000599.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000600.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000601.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000602.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000603.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000604.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000605.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000606.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000607.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000608.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000609.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000610.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000611.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000612.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000613.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000614.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000615.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000616.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000617.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000618.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000619.npy  \n",
            " extracting: dad/i3d_feat/testing/positive/000620.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000001.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000002.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000003.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000004.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000005.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000006.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000007.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000008.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000009.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000010.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000011.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000012.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000013.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000014.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000015.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000016.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000017.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000018.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000019.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000020.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000021.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000022.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000023.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000024.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000025.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000026.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000027.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000028.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000029.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000030.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000031.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000032.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000033.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000034.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000035.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000036.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000037.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000038.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000039.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000040.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000041.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000042.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000043.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000044.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000045.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000046.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000047.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000048.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000049.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000050.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000051.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000052.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000053.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000054.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000055.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000056.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000057.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000058.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000059.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000060.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000061.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000062.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000063.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000064.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000065.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000066.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000067.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000068.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000069.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000070.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000071.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000072.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000073.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000074.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000075.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000076.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000077.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000078.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000079.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000080.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000081.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000082.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000083.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000084.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000085.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000086.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000087.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000088.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000089.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000090.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000091.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000092.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000093.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000094.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000095.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000096.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000097.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000098.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000099.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000100.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000101.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000102.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000103.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000104.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000105.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000106.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000107.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000108.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000109.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000110.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000111.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000112.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000113.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000114.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000115.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000116.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000117.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000118.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000119.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000120.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000121.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000122.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000123.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000124.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000125.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000126.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000127.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000128.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000129.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000130.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000131.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000132.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000133.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000134.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000135.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000136.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000137.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000138.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000139.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000140.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000141.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000142.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000143.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000144.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000145.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000146.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000147.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000148.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000149.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000150.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000151.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000152.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000153.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000154.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000155.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000156.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000157.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000158.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000159.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000160.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000161.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000162.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000163.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000164.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000165.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000166.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000167.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000168.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000169.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000170.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000171.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000172.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000173.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000174.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000175.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000176.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000177.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000178.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000179.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000180.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000181.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000182.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000183.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000184.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000185.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000186.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000187.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000188.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000189.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000190.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000191.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000192.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000193.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000194.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000195.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000196.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000197.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000198.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000199.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000200.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000201.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000202.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000203.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000204.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000205.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000206.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000207.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000208.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000209.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000210.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000211.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000212.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000213.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000214.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000215.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000216.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000217.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000218.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000219.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000220.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000221.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000222.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000223.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000224.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000225.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000226.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000227.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000228.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000229.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000230.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000231.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000232.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000233.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000234.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000235.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000236.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000237.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000238.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000239.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000240.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000241.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000242.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000243.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000244.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000245.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000246.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000247.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000248.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000249.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000250.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000251.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000252.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000253.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000254.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000255.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000256.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000257.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000258.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000259.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000260.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000261.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000262.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000263.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000264.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000265.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000266.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000267.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000268.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000269.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000270.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000271.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000272.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000273.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000274.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000275.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000276.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000277.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000278.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000279.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000280.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000281.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000282.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000283.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000284.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000285.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000286.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000287.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000288.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000289.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000290.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000291.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000292.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000293.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000294.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000295.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000296.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000297.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000298.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000299.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000300.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000301.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000302.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000303.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000304.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000305.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000306.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000307.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000308.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000309.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000310.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000311.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000312.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000313.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000314.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000315.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000316.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000317.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000318.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000319.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000320.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000321.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000322.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000323.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000324.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000325.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000326.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000327.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000328.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000329.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000330.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000331.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000332.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000333.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000334.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000335.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000336.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000337.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000338.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000339.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000340.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000341.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000342.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000343.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000344.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000345.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000346.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000347.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000348.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000349.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000350.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000351.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000352.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000353.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000354.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000355.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000356.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000357.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000358.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000359.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000360.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000361.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000362.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000363.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000364.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000365.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000366.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000367.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000368.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000369.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000370.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000371.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000372.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000373.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000374.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000375.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000376.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000377.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000378.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000379.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000380.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000381.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000382.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000383.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000384.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000385.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000386.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000387.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000388.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000389.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000390.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000391.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000392.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000393.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000394.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000395.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000396.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000397.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000398.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000399.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000400.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000401.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000402.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000403.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000404.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000405.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000406.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000407.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000408.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000409.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000410.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000411.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000412.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000413.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000414.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000415.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000416.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000417.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000418.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000419.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000420.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000421.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000422.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000423.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000424.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000425.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000426.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000427.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000428.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000429.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000430.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000431.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000432.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000433.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000434.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000435.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000436.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000437.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000438.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000439.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000440.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000441.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000442.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000443.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000444.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000445.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000446.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000447.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000448.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000449.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000450.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000451.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000452.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000453.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000454.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000455.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000456.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000457.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000458.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000459.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000460.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000461.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000462.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000463.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000464.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000465.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000466.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000467.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000468.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000469.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000470.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000471.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000472.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000473.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000474.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000475.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000476.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000477.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000478.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000479.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000480.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000481.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000482.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000483.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000484.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000485.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000486.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000487.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000488.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000489.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000490.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000491.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000492.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000493.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000494.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000495.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000496.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000497.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000498.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000499.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000500.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000501.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000502.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000503.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000504.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000505.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000506.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000507.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000508.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000509.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000510.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000511.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000512.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000513.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000514.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000515.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000516.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000517.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000518.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000519.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000520.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000521.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000522.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000523.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000524.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000525.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000526.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000527.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000528.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000529.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000530.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000531.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000532.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000533.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000534.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000535.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000536.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000537.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000538.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000539.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000540.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000541.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000542.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000543.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000544.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000545.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000546.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000547.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000548.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000549.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000550.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000551.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000552.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000553.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000554.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000555.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000556.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000557.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000558.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000559.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000560.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000561.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000562.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000563.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000564.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000565.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000566.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000567.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000568.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000569.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000570.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000571.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000572.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000573.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000574.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000575.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000576.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000577.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000578.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000579.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000580.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000581.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000582.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000583.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000584.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000585.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000586.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000587.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000588.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000589.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000590.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000591.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000592.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000593.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000594.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000595.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000596.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000597.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000598.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000599.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000600.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000601.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000602.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000603.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000604.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000605.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000606.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000607.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000608.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000609.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000610.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000611.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000612.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000613.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000614.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000615.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000616.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000617.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000618.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000619.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000620.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000621.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000622.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000623.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000624.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000625.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000626.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000627.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000628.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000629.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000630.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000631.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000632.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000633.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000634.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000635.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000636.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000637.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000638.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000639.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000640.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000641.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000642.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000643.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000644.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000645.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000646.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000647.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000648.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000649.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000650.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000651.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000652.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000653.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000654.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000655.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000656.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000657.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000658.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000659.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000660.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000661.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000662.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000663.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000664.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000665.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000666.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000667.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000668.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000669.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000670.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000671.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000672.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000673.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000674.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000675.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000676.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000677.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000678.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000679.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000680.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000681.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000682.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000683.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000684.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000685.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000686.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000687.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000688.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000689.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000690.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000691.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000692.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000693.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000694.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000695.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000696.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000697.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000698.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000699.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000700.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000701.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000702.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000703.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000704.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000705.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000706.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000707.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000708.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000709.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000710.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000711.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000712.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000713.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000714.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000715.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000716.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000717.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000718.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000719.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000720.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000721.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000722.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000723.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000724.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000725.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000726.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000727.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000728.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000729.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000730.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000731.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000732.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000733.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000734.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000735.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000736.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000737.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000738.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000739.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000740.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000741.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000742.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000743.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000744.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000745.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000746.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000747.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000748.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000749.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000750.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000751.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000752.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000753.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000754.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000755.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000756.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000757.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000758.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000759.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000760.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000761.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000762.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000763.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000764.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000765.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000766.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000767.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000768.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000769.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000770.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000771.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000772.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000773.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000774.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000775.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000776.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000777.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000778.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000779.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000780.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000781.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000782.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000783.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000784.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000785.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000786.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000787.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000788.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000789.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000790.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000791.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000792.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000793.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000794.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000795.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000796.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000797.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000798.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000799.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000800.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000801.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000802.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000803.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000804.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000805.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000806.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000807.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000808.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000809.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000810.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000811.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000812.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000813.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000814.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000815.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000816.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000817.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000818.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000819.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000820.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000821.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000822.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000823.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000824.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000825.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000826.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000827.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000828.npy  \n",
            " extracting: dad/i3d_feat/training/negative/000829.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000001.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000002.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000003.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000004.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000005.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000006.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000007.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000008.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000009.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000010.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000011.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000012.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000013.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000014.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000015.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000016.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000017.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000018.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000019.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000020.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000021.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000022.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000023.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000024.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000025.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000026.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000027.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000028.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000029.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000030.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000031.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000032.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000033.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000034.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000035.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000036.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000037.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000038.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000039.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000040.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000041.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000042.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000043.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000044.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000045.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000046.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000047.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000048.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000049.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000050.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000051.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000052.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000053.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000054.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000055.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000056.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000057.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000058.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000059.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000060.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000061.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000062.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000063.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000064.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000065.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000066.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000067.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000068.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000069.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000070.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000071.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000072.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000073.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000074.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000075.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000076.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000077.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000078.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000079.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000080.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000081.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000082.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000083.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000084.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000085.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000086.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000087.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000088.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000089.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000090.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000091.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000092.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000093.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000094.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000095.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000096.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000097.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000098.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000099.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000100.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000101.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000102.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000103.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000104.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000105.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000106.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000107.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000108.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000109.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000110.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000111.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000112.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000113.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000114.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000115.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000116.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000117.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000118.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000119.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000120.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000121.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000122.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000123.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000124.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000125.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000126.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000127.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000128.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000129.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000130.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000131.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000132.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000133.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000134.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000135.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000136.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000137.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000138.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000139.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000140.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000141.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000142.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000143.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000144.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000145.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000146.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000147.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000148.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000149.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000150.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000151.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000152.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000153.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000154.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000155.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000156.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000157.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000158.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000159.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000160.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000161.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000162.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000163.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000164.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000165.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000166.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000167.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000168.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000169.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000170.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000171.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000172.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000173.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000174.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000175.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000176.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000177.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000178.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000179.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000180.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000181.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000182.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000183.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000184.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000185.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000186.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000187.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000188.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000189.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000190.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000191.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000192.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000193.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000194.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000195.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000196.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000197.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000198.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000199.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000200.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000201.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000202.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000203.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000204.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000205.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000206.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000207.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000208.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000209.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000210.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000211.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000212.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000213.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000214.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000215.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000216.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000217.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000218.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000219.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000220.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000221.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000222.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000223.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000224.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000225.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000226.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000227.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000228.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000229.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000230.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000231.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000232.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000233.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000234.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000235.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000236.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000237.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000238.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000239.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000240.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000241.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000242.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000243.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000244.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000245.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000246.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000247.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000248.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000249.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000250.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000251.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000252.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000253.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000254.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000255.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000256.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000257.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000258.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000259.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000260.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000261.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000262.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000263.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000264.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000265.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000266.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000267.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000268.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000269.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000270.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000271.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000272.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000273.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000274.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000275.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000276.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000277.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000278.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000279.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000280.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000281.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000282.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000283.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000284.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000285.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000286.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000287.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000288.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000289.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000290.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000291.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000292.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000293.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000294.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000295.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000296.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000297.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000298.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000299.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000300.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000301.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000302.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000303.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000304.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000305.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000306.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000307.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000308.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000309.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000310.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000311.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000312.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000313.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000314.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000315.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000316.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000317.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000318.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000319.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000320.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000321.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000322.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000323.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000324.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000325.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000326.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000327.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000328.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000329.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000330.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000331.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000332.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000333.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000334.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000335.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000336.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000337.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000338.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000339.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000340.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000341.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000342.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000343.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000344.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000345.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000346.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000347.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000348.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000349.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000350.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000351.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000352.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000353.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000354.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000355.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000356.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000357.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000358.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000359.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000360.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000361.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000362.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000363.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000364.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000365.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000366.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000367.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000368.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000369.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000370.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000371.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000372.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000373.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000374.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000375.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000376.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000377.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000378.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000379.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000380.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000381.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000382.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000383.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000384.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000385.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000386.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000387.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000388.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000389.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000390.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000391.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000392.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000393.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000394.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000395.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000396.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000397.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000398.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000399.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000400.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000401.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000402.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000403.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000404.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000405.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000406.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000407.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000408.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000409.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000410.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000411.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000412.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000413.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000414.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000415.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000416.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000417.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000418.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000419.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000420.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000421.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000422.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000423.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000424.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000425.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000426.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000427.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000428.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000429.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000430.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000431.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000432.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000433.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000434.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000435.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000436.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000437.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000438.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000439.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000440.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000441.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000442.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000443.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000444.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000445.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000446.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000447.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000448.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000449.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000450.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000451.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000452.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000453.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000454.npy  \n",
            " extracting: dad/i3d_feat/training/positive/000455.npy  \n",
            " extracting: dad/obj_feat/testing/b001_000490.npz  \n",
            " extracting: dad/obj_feat/testing/b001_000502.npz  \n",
            " extracting: dad/obj_feat/testing/b001_000834.npz  \n",
            " extracting: dad/obj_feat/testing/b001_000848.npz  \n",
            " extracting: dad/obj_feat/testing/b001_000860.npz  \n",
            " extracting: dad/obj_feat/testing/b001_000865.npz  \n",
            " extracting: dad/obj_feat/testing/b001_000867.npz  \n",
            " extracting: dad/obj_feat/testing/b001_000882.npz  \n",
            " extracting: dad/obj_feat/testing/b001_000888.npz  \n",
            " extracting: dad/obj_feat/testing/b001_000904.npz  \n",
            " extracting: dad/obj_feat/testing/b002_000474.npz  \n",
            " extracting: dad/obj_feat/testing/b002_000489.npz  \n",
            " extracting: dad/obj_feat/testing/b002_000498.npz  \n",
            " extracting: dad/obj_feat/testing/b002_000500.npz  \n",
            " extracting: dad/obj_feat/testing/b002_000835.npz  \n",
            " extracting: dad/obj_feat/testing/b002_000836.npz  \n",
            " extracting: dad/obj_feat/testing/b002_000847.npz  \n",
            " extracting: dad/obj_feat/testing/b002_000891.npz  \n",
            " extracting: dad/obj_feat/testing/b002_000893.npz  \n",
            " extracting: dad/obj_feat/testing/b002_000926.npz  \n",
            " extracting: dad/obj_feat/testing/b003_000467.npz  \n",
            " extracting: dad/obj_feat/testing/b003_000470.npz  \n",
            " extracting: dad/obj_feat/testing/b003_000495.npz  \n",
            " extracting: dad/obj_feat/testing/b003_000503.npz  \n",
            " extracting: dad/obj_feat/testing/b003_000856.npz  \n",
            " extracting: dad/obj_feat/testing/b003_000863.npz  \n",
            " extracting: dad/obj_feat/testing/b003_000877.npz  \n",
            " extracting: dad/obj_feat/testing/b003_000881.npz  \n",
            " extracting: dad/obj_feat/testing/b003_000912.npz  \n",
            " extracting: dad/obj_feat/testing/b003_000916.npz  \n",
            " extracting: dad/obj_feat/testing/b004_000468.npz  \n",
            " extracting: dad/obj_feat/testing/b004_000478.npz  \n",
            " extracting: dad/obj_feat/testing/b004_000488.npz  \n",
            " extracting: dad/obj_feat/testing/b004_000499.npz  \n",
            " extracting: dad/obj_feat/testing/b004_000501.npz  \n",
            " extracting: dad/obj_feat/testing/b004_000837.npz  \n",
            " extracting: dad/obj_feat/testing/b004_000861.npz  \n",
            " extracting: dad/obj_feat/testing/b004_000873.npz  \n",
            " extracting: dad/obj_feat/testing/b004_000895.npz  \n",
            " extracting: dad/obj_feat/testing/b004_000903.npz  \n",
            " extracting: dad/obj_feat/testing/b005_000458.npz  \n",
            " extracting: dad/obj_feat/testing/b005_000472.npz  \n",
            " extracting: dad/obj_feat/testing/b005_000486.npz  \n",
            " extracting: dad/obj_feat/testing/b005_000851.npz  \n",
            " extracting: dad/obj_feat/testing/b005_000854.npz  \n",
            " extracting: dad/obj_feat/testing/b005_000864.npz  \n",
            " extracting: dad/obj_feat/testing/b005_000898.npz  \n",
            " extracting: dad/obj_feat/testing/b005_000905.npz  \n",
            " extracting: dad/obj_feat/testing/b005_000911.npz  \n",
            " extracting: dad/obj_feat/testing/b005_000917.npz  \n",
            " extracting: dad/obj_feat/testing/b006_000853.npz  \n",
            " extracting: dad/obj_feat/testing/b006_000857.npz  \n",
            " extracting: dad/obj_feat/testing/b006_000859.npz  \n",
            " extracting: dad/obj_feat/testing/b006_000870.npz  \n",
            " extracting: dad/obj_feat/testing/b006_000874.npz  \n",
            " extracting: dad/obj_feat/testing/b006_000876.npz  \n",
            " extracting: dad/obj_feat/testing/b006_000880.npz  \n",
            " extracting: dad/obj_feat/testing/b006_000900.npz  \n",
            " extracting: dad/obj_feat/testing/b006_000906.npz  \n",
            " extracting: dad/obj_feat/testing/b006_000920.npz  \n",
            " extracting: dad/obj_feat/testing/b007_000457.npz  \n",
            " extracting: dad/obj_feat/testing/b007_000461.npz  \n",
            " extracting: dad/obj_feat/testing/b007_000479.npz  \n",
            " extracting: dad/obj_feat/testing/b007_000491.npz  \n",
            " extracting: dad/obj_feat/testing/b007_000493.npz  \n",
            " extracting: dad/obj_feat/testing/b007_000885.npz  \n",
            " extracting: dad/obj_feat/testing/b007_000902.npz  \n",
            " extracting: dad/obj_feat/testing/b007_000914.npz  \n",
            " extracting: dad/obj_feat/testing/b007_000919.npz  \n",
            " extracting: dad/obj_feat/testing/b007_001130.npz  \n",
            " extracting: dad/obj_feat/testing/b008_000460.npz  \n",
            " extracting: dad/obj_feat/testing/b008_000462.npz  \n",
            " extracting: dad/obj_feat/testing/b008_000484.npz  \n",
            " extracting: dad/obj_feat/testing/b008_000504.npz  \n",
            " extracting: dad/obj_feat/testing/b008_000833.npz  \n",
            " extracting: dad/obj_feat/testing/b008_000850.npz  \n",
            " extracting: dad/obj_feat/testing/b008_000858.npz  \n",
            " extracting: dad/obj_feat/testing/b008_000866.npz  \n",
            " extracting: dad/obj_feat/testing/b008_000884.npz  \n",
            " extracting: dad/obj_feat/testing/b008_000927.npz  \n",
            " extracting: dad/obj_feat/testing/b009_000463.npz  \n",
            " extracting: dad/obj_feat/testing/b009_000469.npz  \n",
            " extracting: dad/obj_feat/testing/b009_000480.npz  \n",
            " extracting: dad/obj_feat/testing/b009_000844.npz  \n",
            " extracting: dad/obj_feat/testing/b009_000846.npz  \n",
            " extracting: dad/obj_feat/testing/b009_000869.npz  \n",
            " extracting: dad/obj_feat/testing/b009_000887.npz  \n",
            " extracting: dad/obj_feat/testing/b009_000896.npz  \n",
            " extracting: dad/obj_feat/testing/b009_000901.npz  \n",
            " extracting: dad/obj_feat/testing/b009_000918.npz  \n",
            " extracting: dad/obj_feat/testing/b010_000492.npz  \n",
            " extracting: dad/obj_feat/testing/b010_000497.npz  \n",
            " extracting: dad/obj_feat/testing/b010_000840.npz  \n",
            " extracting: dad/obj_feat/testing/b010_000842.npz  \n",
            " extracting: dad/obj_feat/testing/b010_000852.npz  \n",
            " extracting: dad/obj_feat/testing/b010_000868.npz  \n",
            " extracting: dad/obj_feat/testing/b010_000879.npz  \n",
            " extracting: dad/obj_feat/testing/b010_000899.npz  \n",
            " extracting: dad/obj_feat/testing/b010_000923.npz  \n",
            " extracting: dad/obj_feat/testing/b010_000924.npz  \n",
            " extracting: dad/obj_feat/testing/b011_000464.npz  \n",
            " extracting: dad/obj_feat/testing/b011_000473.npz  \n",
            " extracting: dad/obj_feat/testing/b011_000482.npz  \n",
            " extracting: dad/obj_feat/testing/b011_000483.npz  \n",
            " extracting: dad/obj_feat/testing/b011_000485.npz  \n",
            " extracting: dad/obj_feat/testing/b011_000505.npz  \n",
            " extracting: dad/obj_feat/testing/b011_000832.npz  \n",
            " extracting: dad/obj_feat/testing/b011_000845.npz  \n",
            " extracting: dad/obj_feat/testing/b011_000907.npz  \n",
            " extracting: dad/obj_feat/testing/b011_000909.npz  \n",
            " extracting: dad/obj_feat/testing/b012_000465.npz  \n",
            " extracting: dad/obj_feat/testing/b012_000466.npz  \n",
            " extracting: dad/obj_feat/testing/b012_000471.npz  \n",
            " extracting: dad/obj_feat/testing/b012_000506.npz  \n",
            " extracting: dad/obj_feat/testing/b012_000830.npz  \n",
            " extracting: dad/obj_feat/testing/b012_000838.npz  \n",
            " extracting: dad/obj_feat/testing/b012_000871.npz  \n",
            " extracting: dad/obj_feat/testing/b012_000883.npz  \n",
            " extracting: dad/obj_feat/testing/b012_000921.npz  \n",
            " extracting: dad/obj_feat/testing/b012_000925.npz  \n",
            " extracting: dad/obj_feat/testing/b013_000477.npz  \n",
            " extracting: dad/obj_feat/testing/b013_000494.npz  \n",
            " extracting: dad/obj_feat/testing/b013_000496.npz  \n",
            " extracting: dad/obj_feat/testing/b013_000841.npz  \n",
            " extracting: dad/obj_feat/testing/b013_000855.npz  \n",
            " extracting: dad/obj_feat/testing/b013_000886.npz  \n",
            " extracting: dad/obj_feat/testing/b013_000892.npz  \n",
            " extracting: dad/obj_feat/testing/b013_000910.npz  \n",
            " extracting: dad/obj_feat/testing/b013_000915.npz  \n",
            " extracting: dad/obj_feat/testing/b013_000928.npz  \n",
            " extracting: dad/obj_feat/testing/b014_000487.npz  \n",
            " extracting: dad/obj_feat/testing/b014_000839.npz  \n",
            " extracting: dad/obj_feat/testing/b014_000843.npz  \n",
            " extracting: dad/obj_feat/testing/b014_000862.npz  \n",
            " extracting: dad/obj_feat/testing/b014_000878.npz  \n",
            " extracting: dad/obj_feat/testing/b014_000889.npz  \n",
            " extracting: dad/obj_feat/testing/b014_000890.npz  \n",
            " extracting: dad/obj_feat/testing/b014_000897.npz  \n",
            " extracting: dad/obj_feat/testing/b014_000908.npz  \n",
            " extracting: dad/obj_feat/testing/b014_000922.npz  \n",
            " extracting: dad/obj_feat/testing/b015_000459.npz  \n",
            " extracting: dad/obj_feat/testing/b015_000475.npz  \n",
            " extracting: dad/obj_feat/testing/b015_000476.npz  \n",
            " extracting: dad/obj_feat/testing/b015_000481.npz  \n",
            " extracting: dad/obj_feat/testing/b015_000831.npz  \n",
            " extracting: dad/obj_feat/testing/b015_000849.npz  \n",
            " extracting: dad/obj_feat/testing/b015_000872.npz  \n",
            " extracting: dad/obj_feat/testing/b015_000875.npz  \n",
            " extracting: dad/obj_feat/testing/b015_000894.npz  \n",
            " extracting: dad/obj_feat/testing/b015_000913.npz  \n",
            " extracting: dad/obj_feat/testing/b016_000511.npz  \n",
            " extracting: dad/obj_feat/testing/b016_000534.npz  \n",
            " extracting: dad/obj_feat/testing/b016_000540.npz  \n",
            " extracting: dad/obj_feat/testing/b016_000929.npz  \n",
            " extracting: dad/obj_feat/testing/b016_000966.npz  \n",
            " extracting: dad/obj_feat/testing/b016_000975.npz  \n",
            " extracting: dad/obj_feat/testing/b016_000977.npz  \n",
            " extracting: dad/obj_feat/testing/b016_000978.npz  \n",
            " extracting: dad/obj_feat/testing/b016_000990.npz  \n",
            " extracting: dad/obj_feat/testing/b016_000996.npz  \n",
            " extracting: dad/obj_feat/testing/b017_000536.npz  \n",
            " extracting: dad/obj_feat/testing/b017_000556.npz  \n",
            " extracting: dad/obj_feat/testing/b017_000930.npz  \n",
            " extracting: dad/obj_feat/testing/b017_000942.npz  \n",
            " extracting: dad/obj_feat/testing/b017_000944.npz  \n",
            " extracting: dad/obj_feat/testing/b017_000950.npz  \n",
            " extracting: dad/obj_feat/testing/b017_000999.npz  \n",
            " extracting: dad/obj_feat/testing/b017_001012.npz  \n",
            " extracting: dad/obj_feat/testing/b017_001014.npz  \n",
            " extracting: dad/obj_feat/testing/b017_001028.npz  \n",
            " extracting: dad/obj_feat/testing/b018_000507.npz  \n",
            " extracting: dad/obj_feat/testing/b018_000508.npz  \n",
            " extracting: dad/obj_feat/testing/b018_000509.npz  \n",
            " extracting: dad/obj_feat/testing/b018_000552.npz  \n",
            " extracting: dad/obj_feat/testing/b018_000553.npz  \n",
            " extracting: dad/obj_feat/testing/b018_000940.npz  \n",
            " extracting: dad/obj_feat/testing/b018_000971.npz  \n",
            " extracting: dad/obj_feat/testing/b018_000995.npz  \n",
            " extracting: dad/obj_feat/testing/b018_001006.npz  \n",
            " extracting: dad/obj_feat/testing/b018_001021.npz  \n",
            " extracting: dad/obj_feat/testing/b019_000519.npz  \n",
            " extracting: dad/obj_feat/testing/b019_000535.npz  \n",
            " extracting: dad/obj_feat/testing/b019_000546.npz  \n",
            " extracting: dad/obj_feat/testing/b019_000934.npz  \n",
            " extracting: dad/obj_feat/testing/b019_000936.npz  \n",
            " extracting: dad/obj_feat/testing/b019_000937.npz  \n",
            " extracting: dad/obj_feat/testing/b019_000949.npz  \n",
            " extracting: dad/obj_feat/testing/b019_000962.npz  \n",
            " extracting: dad/obj_feat/testing/b019_000992.npz  \n",
            " extracting: dad/obj_feat/testing/b019_001004.npz  \n",
            " extracting: dad/obj_feat/testing/b020_000512.npz  \n",
            " extracting: dad/obj_feat/testing/b020_000527.npz  \n",
            " extracting: dad/obj_feat/testing/b020_000549.npz  \n",
            " extracting: dad/obj_feat/testing/b020_000550.npz  \n",
            " extracting: dad/obj_feat/testing/b020_000555.npz  \n",
            " extracting: dad/obj_feat/testing/b020_000941.npz  \n",
            " extracting: dad/obj_feat/testing/b020_000948.npz  \n",
            " extracting: dad/obj_feat/testing/b020_000972.npz  \n",
            " extracting: dad/obj_feat/testing/b020_001018.npz  \n",
            " extracting: dad/obj_feat/testing/b020_001027.npz  \n",
            " extracting: dad/obj_feat/testing/b021_000513.npz  \n",
            " extracting: dad/obj_feat/testing/b021_000516.npz  \n",
            " extracting: dad/obj_feat/testing/b021_000530.npz  \n",
            " extracting: dad/obj_feat/testing/b021_000933.npz  \n",
            " extracting: dad/obj_feat/testing/b021_000947.npz  \n",
            " extracting: dad/obj_feat/testing/b021_000961.npz  \n",
            " extracting: dad/obj_feat/testing/b021_000974.npz  \n",
            " extracting: dad/obj_feat/testing/b021_000986.npz  \n",
            " extracting: dad/obj_feat/testing/b021_001000.npz  \n",
            " extracting: dad/obj_feat/testing/b021_001024.npz  \n",
            " extracting: dad/obj_feat/testing/b022_000510.npz  \n",
            " extracting: dad/obj_feat/testing/b022_000515.npz  \n",
            " extracting: dad/obj_feat/testing/b022_000517.npz  \n",
            " extracting: dad/obj_feat/testing/b022_000543.npz  \n",
            " extracting: dad/obj_feat/testing/b022_000544.npz  \n",
            " extracting: dad/obj_feat/testing/b022_000954.npz  \n",
            " extracting: dad/obj_feat/testing/b022_000980.npz  \n",
            " extracting: dad/obj_feat/testing/b022_000989.npz  \n",
            " extracting: dad/obj_feat/testing/b022_001020.npz  \n",
            " extracting: dad/obj_feat/testing/b022_001022.npz  \n",
            " extracting: dad/obj_feat/testing/b023_000521.npz  \n",
            " extracting: dad/obj_feat/testing/b023_000537.npz  \n",
            " extracting: dad/obj_feat/testing/b023_000538.npz  \n",
            " extracting: dad/obj_feat/testing/b023_000545.npz  \n",
            " extracting: dad/obj_feat/testing/b023_000547.npz  \n",
            " extracting: dad/obj_feat/testing/b023_000951.npz  \n",
            " extracting: dad/obj_feat/testing/b023_000952.npz  \n",
            " extracting: dad/obj_feat/testing/b023_000987.npz  \n",
            " extracting: dad/obj_feat/testing/b023_000994.npz  \n",
            " extracting: dad/obj_feat/testing/b023_001016.npz  \n",
            " extracting: dad/obj_feat/testing/b024_000520.npz  \n",
            " extracting: dad/obj_feat/testing/b024_000525.npz  \n",
            " extracting: dad/obj_feat/testing/b024_000935.npz  \n",
            " extracting: dad/obj_feat/testing/b024_000938.npz  \n",
            " extracting: dad/obj_feat/testing/b024_000958.npz  \n",
            " extracting: dad/obj_feat/testing/b024_000959.npz  \n",
            " extracting: dad/obj_feat/testing/b024_000964.npz  \n",
            " extracting: dad/obj_feat/testing/b024_000969.npz  \n",
            " extracting: dad/obj_feat/testing/b024_000985.npz  \n",
            " extracting: dad/obj_feat/testing/b024_000988.npz  \n",
            " extracting: dad/obj_feat/testing/b025_000529.npz  \n",
            " extracting: dad/obj_feat/testing/b025_000554.npz  \n",
            " extracting: dad/obj_feat/testing/b025_000932.npz  \n",
            " extracting: dad/obj_feat/testing/b025_000955.npz  \n",
            " extracting: dad/obj_feat/testing/b025_000965.npz  \n",
            " extracting: dad/obj_feat/testing/b025_000970.npz  \n",
            " extracting: dad/obj_feat/testing/b025_000973.npz  \n",
            " extracting: dad/obj_feat/testing/b025_000979.npz  \n",
            " extracting: dad/obj_feat/testing/b025_000984.npz  \n",
            " extracting: dad/obj_feat/testing/b025_001008.npz  \n",
            " extracting: dad/obj_feat/testing/b026_000514.npz  \n",
            " extracting: dad/obj_feat/testing/b026_000522.npz  \n",
            " extracting: dad/obj_feat/testing/b026_000533.npz  \n",
            " extracting: dad/obj_feat/testing/b026_000542.npz  \n",
            " extracting: dad/obj_feat/testing/b026_000967.npz  \n",
            " extracting: dad/obj_feat/testing/b026_000983.npz  \n",
            " extracting: dad/obj_feat/testing/b026_001001.npz  \n",
            " extracting: dad/obj_feat/testing/b026_001015.npz  \n",
            " extracting: dad/obj_feat/testing/b026_001019.npz  \n",
            " extracting: dad/obj_feat/testing/b026_001023.npz  \n",
            " extracting: dad/obj_feat/testing/b027_000518.npz  \n",
            " extracting: dad/obj_feat/testing/b027_000960.npz  \n",
            " extracting: dad/obj_feat/testing/b027_000963.npz  \n",
            " extracting: dad/obj_feat/testing/b027_000968.npz  \n",
            " extracting: dad/obj_feat/testing/b027_000991.npz  \n",
            " extracting: dad/obj_feat/testing/b027_000993.npz  \n",
            " extracting: dad/obj_feat/testing/b027_001003.npz  \n",
            " extracting: dad/obj_feat/testing/b027_001005.npz  \n",
            " extracting: dad/obj_feat/testing/b027_001010.npz  \n",
            " extracting: dad/obj_feat/testing/b027_001011.npz  \n",
            " extracting: dad/obj_feat/testing/b028_000528.npz  \n",
            " extracting: dad/obj_feat/testing/b028_000931.npz  \n",
            " extracting: dad/obj_feat/testing/b028_000945.npz  \n",
            " extracting: dad/obj_feat/testing/b028_000946.npz  \n",
            " extracting: dad/obj_feat/testing/b028_000956.npz  \n",
            " extracting: dad/obj_feat/testing/b028_000981.npz  \n",
            " extracting: dad/obj_feat/testing/b028_001002.npz  \n",
            " extracting: dad/obj_feat/testing/b028_001007.npz  \n",
            " extracting: dad/obj_feat/testing/b028_001013.npz  \n",
            " extracting: dad/obj_feat/testing/b028_001026.npz  \n",
            " extracting: dad/obj_feat/testing/b029_000523.npz  \n",
            " extracting: dad/obj_feat/testing/b029_000531.npz  \n",
            " extracting: dad/obj_feat/testing/b029_000539.npz  \n",
            " extracting: dad/obj_feat/testing/b029_000943.npz  \n",
            " extracting: dad/obj_feat/testing/b029_000953.npz  \n",
            " extracting: dad/obj_feat/testing/b029_000957.npz  \n",
            " extracting: dad/obj_feat/testing/b029_000976.npz  \n",
            " extracting: dad/obj_feat/testing/b029_000997.npz  \n",
            " extracting: dad/obj_feat/testing/b029_000998.npz  \n",
            " extracting: dad/obj_feat/testing/b029_001025.npz  \n",
            " extracting: dad/obj_feat/testing/b030_000524.npz  \n",
            " extracting: dad/obj_feat/testing/b030_000526.npz  \n",
            " extracting: dad/obj_feat/testing/b030_000532.npz  \n",
            " extracting: dad/obj_feat/testing/b030_000541.npz  \n",
            " extracting: dad/obj_feat/testing/b030_000548.npz  \n",
            " extracting: dad/obj_feat/testing/b030_000551.npz  \n",
            " extracting: dad/obj_feat/testing/b030_000939.npz  \n",
            " extracting: dad/obj_feat/testing/b030_000982.npz  \n",
            " extracting: dad/obj_feat/testing/b030_001009.npz  \n",
            " extracting: dad/obj_feat/testing/b030_001017.npz  \n",
            " extracting: dad/obj_feat/testing/b031_000561.npz  \n",
            " extracting: dad/obj_feat/testing/b031_000563.npz  \n",
            " extracting: dad/obj_feat/testing/b031_000582.npz  \n",
            " extracting: dad/obj_feat/testing/b031_000604.npz  \n",
            " extracting: dad/obj_feat/testing/b031_001042.npz  \n",
            " extracting: dad/obj_feat/testing/b031_001058.npz  \n",
            " extracting: dad/obj_feat/testing/b031_001068.npz  \n",
            " extracting: dad/obj_feat/testing/b031_001094.npz  \n",
            " extracting: dad/obj_feat/testing/b031_001104.npz  \n",
            " extracting: dad/obj_feat/testing/b031_001116.npz  \n",
            " extracting: dad/obj_feat/testing/b032_000557.npz  \n",
            " extracting: dad/obj_feat/testing/b032_000571.npz  \n",
            " extracting: dad/obj_feat/testing/b032_000586.npz  \n",
            " extracting: dad/obj_feat/testing/b032_001049.npz  \n",
            " extracting: dad/obj_feat/testing/b032_001053.npz  \n",
            " extracting: dad/obj_feat/testing/b032_001083.npz  \n",
            " extracting: dad/obj_feat/testing/b032_001084.npz  \n",
            " extracting: dad/obj_feat/testing/b032_001103.npz  \n",
            " extracting: dad/obj_feat/testing/b032_001124.npz  \n",
            " extracting: dad/obj_feat/testing/b032_001125.npz  \n",
            " extracting: dad/obj_feat/testing/b033_000565.npz  \n",
            " extracting: dad/obj_feat/testing/b033_000569.npz  \n",
            " extracting: dad/obj_feat/testing/b033_000585.npz  \n",
            " extracting: dad/obj_feat/testing/b033_000597.npz  \n",
            " extracting: dad/obj_feat/testing/b033_000598.npz  \n",
            " extracting: dad/obj_feat/testing/b033_000600.npz  \n",
            " extracting: dad/obj_feat/testing/b033_001055.npz  \n",
            " extracting: dad/obj_feat/testing/b033_001060.npz  \n",
            " extracting: dad/obj_feat/testing/b033_001062.npz  \n",
            " extracting: dad/obj_feat/testing/b033_001126.npz  \n",
            " extracting: dad/obj_feat/testing/b034_000559.npz  \n",
            " extracting: dad/obj_feat/testing/b034_000564.npz  \n",
            " extracting: dad/obj_feat/testing/b034_000599.npz  \n",
            " extracting: dad/obj_feat/testing/b034_001029.npz  \n",
            " extracting: dad/obj_feat/testing/b034_001071.npz  \n",
            " extracting: dad/obj_feat/testing/b034_001079.npz  \n",
            " extracting: dad/obj_feat/testing/b034_001080.npz  \n",
            " extracting: dad/obj_feat/testing/b034_001095.npz  \n",
            " extracting: dad/obj_feat/testing/b034_001102.npz  \n",
            " extracting: dad/obj_feat/testing/b034_001118.npz  \n",
            " extracting: dad/obj_feat/testing/b035_000570.npz  \n",
            " extracting: dad/obj_feat/testing/b035_000581.npz  \n",
            " extracting: dad/obj_feat/testing/b035_000589.npz  \n",
            " extracting: dad/obj_feat/testing/b035_000605.npz  \n",
            " extracting: dad/obj_feat/testing/b035_001047.npz  \n",
            " extracting: dad/obj_feat/testing/b035_001052.npz  \n",
            " extracting: dad/obj_feat/testing/b035_001073.npz  \n",
            " extracting: dad/obj_feat/testing/b035_001077.npz  \n",
            " extracting: dad/obj_feat/testing/b035_001096.npz  \n",
            " extracting: dad/obj_feat/testing/b035_001111.npz  \n",
            " extracting: dad/obj_feat/testing/b036_000562.npz  \n",
            " extracting: dad/obj_feat/testing/b036_000566.npz  \n",
            " extracting: dad/obj_feat/testing/b036_000579.npz  \n",
            " extracting: dad/obj_feat/testing/b036_001032.npz  \n",
            " extracting: dad/obj_feat/testing/b036_001054.npz  \n",
            " extracting: dad/obj_feat/testing/b036_001059.npz  \n",
            " extracting: dad/obj_feat/testing/b036_001089.npz  \n",
            " extracting: dad/obj_feat/testing/b036_001091.npz  \n",
            " extracting: dad/obj_feat/testing/b036_001093.npz  \n",
            " extracting: dad/obj_feat/testing/b036_001122.npz  \n",
            " extracting: dad/obj_feat/testing/b037_000584.npz  \n",
            " extracting: dad/obj_feat/testing/b037_000596.npz  \n",
            " extracting: dad/obj_feat/testing/b037_000601.npz  \n",
            " extracting: dad/obj_feat/testing/b037_001037.npz  \n",
            " extracting: dad/obj_feat/testing/b037_001051.npz  \n",
            " extracting: dad/obj_feat/testing/b037_001066.npz  \n",
            " extracting: dad/obj_feat/testing/b037_001067.npz  \n",
            " extracting: dad/obj_feat/testing/b037_001081.npz  \n",
            " extracting: dad/obj_feat/testing/b037_001101.npz  \n",
            " extracting: dad/obj_feat/testing/b037_001120.npz  \n",
            " extracting: dad/obj_feat/testing/b038_000576.npz  \n",
            " extracting: dad/obj_feat/testing/b038_000606.npz  \n",
            " extracting: dad/obj_feat/testing/b038_001072.npz  \n",
            " extracting: dad/obj_feat/testing/b038_001078.npz  \n",
            " extracting: dad/obj_feat/testing/b038_001082.npz  \n",
            " extracting: dad/obj_feat/testing/b038_001097.npz  \n",
            " extracting: dad/obj_feat/testing/b038_001098.npz  \n",
            " extracting: dad/obj_feat/testing/b038_001109.npz  \n",
            " extracting: dad/obj_feat/testing/b038_001110.npz  \n",
            " extracting: dad/obj_feat/testing/b038_001115.npz  \n",
            " extracting: dad/obj_feat/testing/b039_000575.npz  \n",
            " extracting: dad/obj_feat/testing/b039_000595.npz  \n",
            " extracting: dad/obj_feat/testing/b039_000603.npz  \n",
            " extracting: dad/obj_feat/testing/b039_001056.npz  \n",
            " extracting: dad/obj_feat/testing/b039_001057.npz  \n",
            " extracting: dad/obj_feat/testing/b039_001086.npz  \n",
            " extracting: dad/obj_feat/testing/b039_001107.npz  \n",
            " extracting: dad/obj_feat/testing/b039_001112.npz  \n",
            " extracting: dad/obj_feat/testing/b039_001113.npz  \n",
            " extracting: dad/obj_feat/testing/b039_001123.npz  \n",
            " extracting: dad/obj_feat/testing/b040_000572.npz  \n",
            " extracting: dad/obj_feat/testing/b040_000574.npz  \n",
            " extracting: dad/obj_feat/testing/b040_001035.npz  \n",
            " extracting: dad/obj_feat/testing/b040_001039.npz  \n",
            " extracting: dad/obj_feat/testing/b040_001048.npz  \n",
            " extracting: dad/obj_feat/testing/b040_001074.npz  \n",
            " extracting: dad/obj_feat/testing/b040_001075.npz  \n",
            " extracting: dad/obj_feat/testing/b040_001105.npz  \n",
            " extracting: dad/obj_feat/testing/b040_001108.npz  \n",
            " extracting: dad/obj_feat/testing/b040_001119.npz  \n",
            " extracting: dad/obj_feat/testing/b041_000567.npz  \n",
            " extracting: dad/obj_feat/testing/b041_000577.npz  \n",
            " extracting: dad/obj_feat/testing/b041_000587.npz  \n",
            " extracting: dad/obj_feat/testing/b041_000591.npz  \n",
            " extracting: dad/obj_feat/testing/b041_001036.npz  \n",
            " extracting: dad/obj_feat/testing/b041_001046.npz  \n",
            " extracting: dad/obj_feat/testing/b041_001069.npz  \n",
            " extracting: dad/obj_feat/testing/b041_001121.npz  \n",
            " extracting: dad/obj_feat/testing/b041_001127.npz  \n",
            " extracting: dad/obj_feat/testing/b041_001128.npz  \n",
            " extracting: dad/obj_feat/testing/b042_000578.npz  \n",
            " extracting: dad/obj_feat/testing/b042_000590.npz  \n",
            " extracting: dad/obj_feat/testing/b042_000593.npz  \n",
            " extracting: dad/obj_feat/testing/b042_000602.npz  \n",
            " extracting: dad/obj_feat/testing/b042_001031.npz  \n",
            " extracting: dad/obj_feat/testing/b042_001061.npz  \n",
            " extracting: dad/obj_feat/testing/b042_001064.npz  \n",
            " extracting: dad/obj_feat/testing/b042_001088.npz  \n",
            " extracting: dad/obj_feat/testing/b042_001100.npz  \n",
            " extracting: dad/obj_feat/testing/b042_001117.npz  \n",
            " extracting: dad/obj_feat/testing/b043_000558.npz  \n",
            " extracting: dad/obj_feat/testing/b043_000568.npz  \n",
            " extracting: dad/obj_feat/testing/b043_000588.npz  \n",
            " extracting: dad/obj_feat/testing/b043_000592.npz  \n",
            " extracting: dad/obj_feat/testing/b043_001030.npz  \n",
            " extracting: dad/obj_feat/testing/b043_001033.npz  \n",
            " extracting: dad/obj_feat/testing/b043_001041.npz  \n",
            " extracting: dad/obj_feat/testing/b043_001043.npz  \n",
            " extracting: dad/obj_feat/testing/b043_001063.npz  \n",
            " extracting: dad/obj_feat/testing/b043_001092.npz  \n",
            " extracting: dad/obj_feat/testing/b044_000560.npz  \n",
            " extracting: dad/obj_feat/testing/b044_000573.npz  \n",
            " extracting: dad/obj_feat/testing/b044_000594.npz  \n",
            " extracting: dad/obj_feat/testing/b044_001034.npz  \n",
            " extracting: dad/obj_feat/testing/b044_001038.npz  \n",
            " extracting: dad/obj_feat/testing/b044_001050.npz  \n",
            " extracting: dad/obj_feat/testing/b044_001065.npz  \n",
            " extracting: dad/obj_feat/testing/b044_001076.npz  \n",
            " extracting: dad/obj_feat/testing/b044_001085.npz  \n",
            " extracting: dad/obj_feat/testing/b044_001106.npz  \n",
            " extracting: dad/obj_feat/testing/b045_000580.npz  \n",
            " extracting: dad/obj_feat/testing/b045_000583.npz  \n",
            " extracting: dad/obj_feat/testing/b045_001040.npz  \n",
            " extracting: dad/obj_feat/testing/b045_001044.npz  \n",
            " extracting: dad/obj_feat/testing/b045_001045.npz  \n",
            " extracting: dad/obj_feat/testing/b045_001070.npz  \n",
            " extracting: dad/obj_feat/testing/b045_001087.npz  \n",
            " extracting: dad/obj_feat/testing/b045_001090.npz  \n",
            " extracting: dad/obj_feat/testing/b045_001099.npz  \n",
            " extracting: dad/obj_feat/testing/b045_001114.npz  \n",
            " extracting: dad/obj_feat/testing/b046_000508.npz  \n",
            " extracting: dad/obj_feat/testing/b046_000510.npz  \n",
            " extracting: dad/obj_feat/testing/b046_000511.npz  \n",
            " extracting: dad/obj_feat/testing/b046_000512.npz  \n",
            " extracting: dad/obj_feat/testing/b046_000513.npz  \n",
            " extracting: dad/obj_feat/testing/b046_000516.npz  \n",
            " extracting: dad/obj_feat/testing/b046_000517.npz  \n",
            " extracting: dad/obj_feat/testing/b046_000520.npz  \n",
            " extracting: dad/obj_feat/testing/b046_000521.npz  \n",
            " extracting: dad/obj_feat/testing/b046_001129.npz  \n",
            " extracting: dad/obj_feat/training/b001_000003.npz  \n",
            " extracting: dad/obj_feat/training/b001_000007.npz  \n",
            " extracting: dad/obj_feat/training/b001_000008.npz  \n",
            " extracting: dad/obj_feat/training/b001_000022.npz  \n",
            " extracting: dad/obj_feat/training/b001_000027.npz  \n",
            " extracting: dad/obj_feat/training/b001_000030.npz  \n",
            " extracting: dad/obj_feat/training/b001_000036.npz  \n",
            " extracting: dad/obj_feat/training/b001_000039.npz  \n",
            " extracting: dad/obj_feat/training/b001_000044.npz  \n",
            " extracting: dad/obj_feat/training/b001_000059.npz  \n",
            " extracting: dad/obj_feat/training/b002_000001.npz  \n",
            " extracting: dad/obj_feat/training/b002_000008.npz  \n",
            " extracting: dad/obj_feat/training/b002_000022.npz  \n",
            " extracting: dad/obj_feat/training/b002_000033.npz  \n",
            " extracting: dad/obj_feat/training/b002_000047.npz  \n",
            " extracting: dad/obj_feat/training/b002_000062.npz  \n",
            " extracting: dad/obj_feat/training/b002_000071.npz  \n",
            " extracting: dad/obj_feat/training/b002_000076.npz  \n",
            " extracting: dad/obj_feat/training/b002_000079.npz  \n",
            " extracting: dad/obj_feat/training/b002_000090.npz  \n",
            " extracting: dad/obj_feat/training/b003_000007.npz  \n",
            " extracting: dad/obj_feat/training/b003_000020.npz  \n",
            " extracting: dad/obj_feat/training/b003_000023.npz  \n",
            " extracting: dad/obj_feat/training/b003_000025.npz  \n",
            " extracting: dad/obj_feat/training/b003_000038.npz  \n",
            " extracting: dad/obj_feat/training/b003_000045.npz  \n",
            " extracting: dad/obj_feat/training/b003_000046.npz  \n",
            " extracting: dad/obj_feat/training/b003_000057.npz  \n",
            " extracting: dad/obj_feat/training/b003_000088.npz  \n",
            " extracting: dad/obj_feat/training/b003_000096.npz  \n",
            " extracting: dad/obj_feat/training/b004_000006.npz  \n",
            " extracting: dad/obj_feat/training/b004_000014.npz  \n",
            " extracting: dad/obj_feat/training/b004_000015.npz  \n",
            " extracting: dad/obj_feat/training/b004_000023.npz  \n",
            " extracting: dad/obj_feat/training/b004_000024.npz  \n",
            " extracting: dad/obj_feat/training/b004_000040.npz  \n",
            " extracting: dad/obj_feat/training/b004_000042.npz  \n",
            " extracting: dad/obj_feat/training/b004_000043.npz  \n",
            " extracting: dad/obj_feat/training/b004_000049.npz  \n",
            " extracting: dad/obj_feat/training/b004_000051.npz  \n",
            " extracting: dad/obj_feat/training/b005_000006.npz  \n",
            " extracting: dad/obj_feat/training/b005_000031.npz  \n",
            " extracting: dad/obj_feat/training/b005_000035.npz  \n",
            " extracting: dad/obj_feat/training/b005_000038.npz  \n",
            " extracting: dad/obj_feat/training/b005_000051.npz  \n",
            " extracting: dad/obj_feat/training/b005_000080.npz  \n",
            " extracting: dad/obj_feat/training/b005_000083.npz  \n",
            " extracting: dad/obj_feat/training/b005_000084.npz  \n",
            " extracting: dad/obj_feat/training/b005_000093.npz  \n",
            " extracting: dad/obj_feat/training/b005_000095.npz  \n",
            " extracting: dad/obj_feat/training/b006_000002.npz  \n",
            " extracting: dad/obj_feat/training/b006_000005.npz  \n",
            " extracting: dad/obj_feat/training/b006_000011.npz  \n",
            " extracting: dad/obj_feat/training/b006_000019.npz  \n",
            " extracting: dad/obj_feat/training/b006_000026.npz  \n",
            " extracting: dad/obj_feat/training/b006_000034.npz  \n",
            " extracting: dad/obj_feat/training/b006_000036.npz  \n",
            " extracting: dad/obj_feat/training/b006_000055.npz  \n",
            " extracting: dad/obj_feat/training/b006_000089.npz  \n",
            " extracting: dad/obj_feat/training/b006_000091.npz  \n",
            " extracting: dad/obj_feat/training/b007_000009.npz  \n",
            " extracting: dad/obj_feat/training/b007_000009_01.npz  \n",
            " extracting: dad/obj_feat/training/b007_000010.npz  \n",
            " extracting: dad/obj_feat/training/b007_000015.npz  \n",
            " extracting: dad/obj_feat/training/b007_000017.npz  \n",
            " extracting: dad/obj_feat/training/b007_000026.npz  \n",
            " extracting: dad/obj_feat/training/b007_000034.npz  \n",
            " extracting: dad/obj_feat/training/b007_000040.npz  \n",
            " extracting: dad/obj_feat/training/b007_000048.npz  \n",
            " extracting: dad/obj_feat/training/b007_000050.npz  \n",
            " extracting: dad/obj_feat/training/b008_000003.npz  \n",
            " extracting: dad/obj_feat/training/b008_000013.npz  \n",
            " extracting: dad/obj_feat/training/b008_000019.npz  \n",
            " extracting: dad/obj_feat/training/b008_000031.npz  \n",
            " extracting: dad/obj_feat/training/b008_000039.npz  \n",
            " extracting: dad/obj_feat/training/b008_000042.npz  \n",
            " extracting: dad/obj_feat/training/b008_000065.npz  \n",
            " extracting: dad/obj_feat/training/b008_000073.npz  \n",
            " extracting: dad/obj_feat/training/b008_000094.npz  \n",
            " extracting: dad/obj_feat/training/b008_000829.npz  \n",
            " extracting: dad/obj_feat/training/b009_000013.npz  \n",
            " extracting: dad/obj_feat/training/b009_000017.npz  \n",
            " extracting: dad/obj_feat/training/b009_000018.npz  \n",
            " extracting: dad/obj_feat/training/b009_000030.npz  \n",
            " extracting: dad/obj_feat/training/b009_000033.npz  \n",
            " extracting: dad/obj_feat/training/b009_000046.npz  \n",
            " extracting: dad/obj_feat/training/b009_000050.npz  \n",
            " extracting: dad/obj_feat/training/b009_000066.npz  \n",
            " extracting: dad/obj_feat/training/b009_000086.npz  \n",
            " extracting: dad/obj_feat/training/b009_000098.npz  \n",
            " extracting: dad/obj_feat/training/b010_000002.npz  \n",
            " extracting: dad/obj_feat/training/b010_000004.npz  \n",
            " extracting: dad/obj_feat/training/b010_000010.npz  \n",
            " extracting: dad/obj_feat/training/b010_000047.npz  \n",
            " extracting: dad/obj_feat/training/b010_000061.npz  \n",
            " extracting: dad/obj_feat/training/b010_000064.npz  \n",
            " extracting: dad/obj_feat/training/b010_000070.npz  \n",
            " extracting: dad/obj_feat/training/b010_000077.npz  \n",
            " extracting: dad/obj_feat/training/b010_000078.npz  \n",
            " extracting: dad/obj_feat/training/b010_000097.npz  \n",
            " extracting: dad/obj_feat/training/b011_000011.npz  \n",
            " extracting: dad/obj_feat/training/b011_000021.npz  \n",
            " extracting: dad/obj_feat/training/b011_000024.npz  \n",
            " extracting: dad/obj_feat/training/b011_000027.npz  \n",
            " extracting: dad/obj_feat/training/b011_000028.npz  \n",
            " extracting: dad/obj_feat/training/b011_000037.npz  \n",
            " extracting: dad/obj_feat/training/b011_000041.npz  \n",
            " extracting: dad/obj_feat/training/b011_000056.npz  \n",
            " extracting: dad/obj_feat/training/b011_000063.npz  \n",
            " extracting: dad/obj_feat/training/b011_000082.npz  \n",
            " extracting: dad/obj_feat/training/b012_000005.npz  \n",
            " extracting: dad/obj_feat/training/b012_000012.npz  \n",
            " extracting: dad/obj_feat/training/b012_000014.npz  \n",
            " extracting: dad/obj_feat/training/b012_000021.npz  \n",
            " extracting: dad/obj_feat/training/b012_000025.npz  \n",
            " extracting: dad/obj_feat/training/b012_000044.npz  \n",
            " extracting: dad/obj_feat/training/b012_000053.npz  \n",
            " extracting: dad/obj_feat/training/b012_000069.npz  \n",
            " extracting: dad/obj_feat/training/b012_000074.npz  \n",
            " extracting: dad/obj_feat/training/b012_000099.npz  \n",
            " extracting: dad/obj_feat/training/b013_000016.npz  \n",
            " extracting: dad/obj_feat/training/b013_000016_01.npz  \n",
            " extracting: dad/obj_feat/training/b013_000018.npz  \n",
            " extracting: dad/obj_feat/training/b013_000028.npz  \n",
            " extracting: dad/obj_feat/training/b013_000032.npz  \n",
            " extracting: dad/obj_feat/training/b013_000035.npz  \n",
            " extracting: dad/obj_feat/training/b013_000049.npz  \n",
            " extracting: dad/obj_feat/training/b013_000058.npz  \n",
            " extracting: dad/obj_feat/training/b013_000068.npz  \n",
            " extracting: dad/obj_feat/training/b013_000081.npz  \n",
            " extracting: dad/obj_feat/training/b014_000012.npz  \n",
            " extracting: dad/obj_feat/training/b014_000029.npz  \n",
            " extracting: dad/obj_feat/training/b014_000029_01.npz  \n",
            " extracting: dad/obj_feat/training/b014_000037.npz  \n",
            " extracting: dad/obj_feat/training/b014_000041.npz  \n",
            " extracting: dad/obj_feat/training/b014_000045.npz  \n",
            " extracting: dad/obj_feat/training/b014_000052.npz  \n",
            " extracting: dad/obj_feat/training/b014_000060.npz  \n",
            " extracting: dad/obj_feat/training/b014_000067.npz  \n",
            " extracting: dad/obj_feat/training/b014_000085.npz  \n",
            " extracting: dad/obj_feat/training/b015_000004.npz  \n",
            " extracting: dad/obj_feat/training/b015_000020.npz  \n",
            " extracting: dad/obj_feat/training/b015_000032.npz  \n",
            " extracting: dad/obj_feat/training/b015_000043.npz  \n",
            " extracting: dad/obj_feat/training/b015_000048.npz  \n",
            " extracting: dad/obj_feat/training/b015_000054.npz  \n",
            " extracting: dad/obj_feat/training/b015_000072.npz  \n",
            " extracting: dad/obj_feat/training/b015_000075.npz  \n",
            " extracting: dad/obj_feat/training/b015_000087.npz  \n",
            " extracting: dad/obj_feat/training/b015_000092.npz  \n",
            " extracting: dad/obj_feat/training/b016_000064.npz  \n",
            " extracting: dad/obj_feat/training/b016_000071.npz  \n",
            " extracting: dad/obj_feat/training/b016_000082.npz  \n",
            " extracting: dad/obj_feat/training/b016_000084.npz  \n",
            " extracting: dad/obj_feat/training/b016_000092.npz  \n",
            " extracting: dad/obj_feat/training/b016_000112.npz  \n",
            " extracting: dad/obj_feat/training/b016_000114.npz  \n",
            " extracting: dad/obj_feat/training/b016_000132.npz  \n",
            " extracting: dad/obj_feat/training/b016_000155.npz  \n",
            " extracting: dad/obj_feat/training/b016_000194.npz  \n",
            " extracting: dad/obj_feat/training/b017_000078.npz  \n",
            " extracting: dad/obj_feat/training/b017_000100.npz  \n",
            " extracting: dad/obj_feat/training/b017_000101.npz  \n",
            " extracting: dad/obj_feat/training/b017_000118.npz  \n",
            " extracting: dad/obj_feat/training/b017_000144.npz  \n",
            " extracting: dad/obj_feat/training/b017_000163.npz  \n",
            " extracting: dad/obj_feat/training/b017_000171.npz  \n",
            " extracting: dad/obj_feat/training/b017_000176.npz  \n",
            " extracting: dad/obj_feat/training/b017_000189.npz  \n",
            " extracting: dad/obj_feat/training/b017_000196.npz  \n",
            " extracting: dad/obj_feat/training/b018_000080.npz  \n",
            " extracting: dad/obj_feat/training/b018_000088.npz  \n",
            " extracting: dad/obj_feat/training/b018_000093.npz  \n",
            " extracting: dad/obj_feat/training/b018_000094.npz  \n",
            " extracting: dad/obj_feat/training/b018_000097.npz  \n",
            " extracting: dad/obj_feat/training/b018_000104.npz  \n",
            " extracting: dad/obj_feat/training/b018_000108.npz  \n",
            " extracting: dad/obj_feat/training/b018_000135.npz  \n",
            " extracting: dad/obj_feat/training/b018_000147.npz  \n",
            " extracting: dad/obj_feat/training/b018_000166.npz  \n",
            " extracting: dad/obj_feat/training/b019_000063.npz  \n",
            " extracting: dad/obj_feat/training/b019_000075.npz  \n",
            " extracting: dad/obj_feat/training/b019_000077.npz  \n",
            " extracting: dad/obj_feat/training/b019_000098.npz  \n",
            " extracting: dad/obj_feat/training/b019_000131.npz  \n",
            " extracting: dad/obj_feat/training/b019_000141.npz  \n",
            " extracting: dad/obj_feat/training/b019_000156.npz  \n",
            " extracting: dad/obj_feat/training/b019_000157.npz  \n",
            " extracting: dad/obj_feat/training/b019_000179.npz  \n",
            " extracting: dad/obj_feat/training/b019_000183.npz  \n",
            " extracting: dad/obj_feat/training/b020_000081.npz  \n",
            " extracting: dad/obj_feat/training/b020_000106.npz  \n",
            " extracting: dad/obj_feat/training/b020_000122.npz  \n",
            " extracting: dad/obj_feat/training/b020_000139.npz  \n",
            " extracting: dad/obj_feat/training/b020_000153.npz  \n",
            " extracting: dad/obj_feat/training/b020_000154.npz  \n",
            " extracting: dad/obj_feat/training/b020_000165.npz  \n",
            " extracting: dad/obj_feat/training/b020_000174.npz  \n",
            " extracting: dad/obj_feat/training/b020_000175.npz  \n",
            " extracting: dad/obj_feat/training/b020_000190.npz  \n",
            " extracting: dad/obj_feat/training/b021_000052.npz  \n",
            " extracting: dad/obj_feat/training/b021_000060.npz  \n",
            " extracting: dad/obj_feat/training/b021_000070.npz  \n",
            " extracting: dad/obj_feat/training/b021_000079.npz  \n",
            " extracting: dad/obj_feat/training/b021_000138.npz  \n",
            " extracting: dad/obj_feat/training/b021_000150.npz  \n",
            " extracting: dad/obj_feat/training/b021_000177.npz  \n",
            " extracting: dad/obj_feat/training/b021_000180.npz  \n",
            " extracting: dad/obj_feat/training/b021_000192.npz  \n",
            " extracting: dad/obj_feat/training/b021_000193.npz  \n",
            " extracting: dad/obj_feat/training/b022_000054.npz  \n",
            " extracting: dad/obj_feat/training/b022_000055.npz  \n",
            " extracting: dad/obj_feat/training/b022_000056.npz  \n",
            " extracting: dad/obj_feat/training/b022_000073.npz  \n",
            " extracting: dad/obj_feat/training/b022_000091.npz  \n",
            " extracting: dad/obj_feat/training/b022_000126.npz  \n",
            " extracting: dad/obj_feat/training/b022_000129.npz  \n",
            " extracting: dad/obj_feat/training/b022_000136.npz  \n",
            " extracting: dad/obj_feat/training/b022_000137.npz  \n",
            " extracting: dad/obj_feat/training/b022_000173.npz  \n",
            " extracting: dad/obj_feat/training/b023_000067.npz  \n",
            " extracting: dad/obj_feat/training/b023_000099.npz  \n",
            " extracting: dad/obj_feat/training/b023_000103.npz  \n",
            " extracting: dad/obj_feat/training/b023_000105.npz  \n",
            " extracting: dad/obj_feat/training/b023_000111.npz  \n",
            " extracting: dad/obj_feat/training/b023_000116.npz  \n",
            " extracting: dad/obj_feat/training/b023_000117.npz  \n",
            " extracting: dad/obj_feat/training/b023_000143.npz  \n",
            " extracting: dad/obj_feat/training/b023_000182.npz  \n",
            " extracting: dad/obj_feat/training/b023_000187.npz  \n",
            " extracting: dad/obj_feat/training/b024_000061.npz  \n",
            " extracting: dad/obj_feat/training/b024_000066.npz  \n",
            " extracting: dad/obj_feat/training/b024_000100.npz  \n",
            " extracting: dad/obj_feat/training/b024_000124.npz  \n",
            " extracting: dad/obj_feat/training/b024_000127.npz  \n",
            " extracting: dad/obj_feat/training/b024_000133.npz  \n",
            " extracting: dad/obj_feat/training/b024_000158.npz  \n",
            " extracting: dad/obj_feat/training/b024_000162.npz  \n",
            " extracting: dad/obj_feat/training/b024_000164.npz  \n",
            " extracting: dad/obj_feat/training/b024_000178.npz  \n",
            " extracting: dad/obj_feat/training/b025_000076.npz  \n",
            " extracting: dad/obj_feat/training/b025_000089.npz  \n",
            " extracting: dad/obj_feat/training/b025_000102.npz  \n",
            " extracting: dad/obj_feat/training/b025_000113.npz  \n",
            " extracting: dad/obj_feat/training/b025_000120.npz  \n",
            " extracting: dad/obj_feat/training/b025_000148.npz  \n",
            " extracting: dad/obj_feat/training/b025_000161.npz  \n",
            " extracting: dad/obj_feat/training/b025_000167.npz  \n",
            " extracting: dad/obj_feat/training/b025_000185.npz  \n",
            " extracting: dad/obj_feat/training/b025_000191.npz  \n",
            " extracting: dad/obj_feat/training/b026_000090.npz  \n",
            " extracting: dad/obj_feat/training/b026_000101.npz  \n",
            " extracting: dad/obj_feat/training/b026_000107.npz  \n",
            " extracting: dad/obj_feat/training/b026_000125.npz  \n",
            " extracting: dad/obj_feat/training/b026_000128.npz  \n",
            " extracting: dad/obj_feat/training/b026_000142.npz  \n",
            " extracting: dad/obj_feat/training/b026_000186.npz  \n",
            " extracting: dad/obj_feat/training/b026_000195.npz  \n",
            " extracting: dad/obj_feat/training/b026_000197.npz  \n",
            " extracting: dad/obj_feat/training/b026_000198.npz  \n",
            " extracting: dad/obj_feat/training/b027_000065.npz  \n",
            " extracting: dad/obj_feat/training/b027_000068.npz  \n",
            " extracting: dad/obj_feat/training/b027_000072.npz  \n",
            " extracting: dad/obj_feat/training/b027_000087.npz  \n",
            " extracting: dad/obj_feat/training/b027_000095.npz  \n",
            " extracting: dad/obj_feat/training/b027_000145.npz  \n",
            " extracting: dad/obj_feat/training/b027_000146.npz  \n",
            " extracting: dad/obj_feat/training/b027_000152.npz  \n",
            " extracting: dad/obj_feat/training/b027_000169.npz  \n",
            " extracting: dad/obj_feat/training/b027_000184.npz  \n",
            " extracting: dad/obj_feat/training/b028_000053.npz  \n",
            " extracting: dad/obj_feat/training/b028_000057.npz  \n",
            " extracting: dad/obj_feat/training/b028_000059.npz  \n",
            " extracting: dad/obj_feat/training/b028_000083.npz  \n",
            " extracting: dad/obj_feat/training/b028_000096.npz  \n",
            " extracting: dad/obj_feat/training/b028_000109.npz  \n",
            " extracting: dad/obj_feat/training/b028_000134.npz  \n",
            " extracting: dad/obj_feat/training/b028_000172.npz  \n",
            " extracting: dad/obj_feat/training/b028_000181.npz  \n",
            " extracting: dad/obj_feat/training/b028_000188.npz  \n",
            " extracting: dad/obj_feat/training/b029_000069.npz  \n",
            " extracting: dad/obj_feat/training/b029_000085.npz  \n",
            " extracting: dad/obj_feat/training/b029_000086.npz  \n",
            " extracting: dad/obj_feat/training/b029_000110.npz  \n",
            " extracting: dad/obj_feat/training/b029_000121.npz  \n",
            " extracting: dad/obj_feat/training/b029_000123.npz  \n",
            " extracting: dad/obj_feat/training/b029_000130.npz  \n",
            " extracting: dad/obj_feat/training/b029_000149.npz  \n",
            " extracting: dad/obj_feat/training/b029_000159.npz  \n",
            " extracting: dad/obj_feat/training/b029_000170.npz  \n",
            " extracting: dad/obj_feat/training/b030_000058.npz  \n",
            " extracting: dad/obj_feat/training/b030_000062.npz  \n",
            " extracting: dad/obj_feat/training/b030_000074.npz  \n",
            " extracting: dad/obj_feat/training/b030_000115.npz  \n",
            " extracting: dad/obj_feat/training/b030_000119.npz  \n",
            " extracting: dad/obj_feat/training/b030_000140.npz  \n",
            " extracting: dad/obj_feat/training/b030_000151.npz  \n",
            " extracting: dad/obj_feat/training/b030_000160.npz  \n",
            " extracting: dad/obj_feat/training/b030_000168.npz  \n",
            " extracting: dad/obj_feat/training/b030_000199.npz  \n",
            " extracting: dad/obj_feat/training/b031_000106.npz  \n",
            " extracting: dad/obj_feat/training/b031_000115.npz  \n",
            " extracting: dad/obj_feat/training/b031_000123.npz  \n",
            " extracting: dad/obj_feat/training/b031_000217.npz  \n",
            " extracting: dad/obj_feat/training/b031_000222.npz  \n",
            " extracting: dad/obj_feat/training/b031_000233.npz  \n",
            " extracting: dad/obj_feat/training/b031_000244.npz  \n",
            " extracting: dad/obj_feat/training/b031_000260.npz  \n",
            " extracting: dad/obj_feat/training/b031_000267.npz  \n",
            " extracting: dad/obj_feat/training/b031_000268.npz  \n",
            " extracting: dad/obj_feat/training/b032_000138.npz  \n",
            " extracting: dad/obj_feat/training/b032_000144.npz  \n",
            " extracting: dad/obj_feat/training/b032_000203.npz  \n",
            " extracting: dad/obj_feat/training/b032_000211.npz  \n",
            " extracting: dad/obj_feat/training/b032_000242.npz  \n",
            " extracting: dad/obj_feat/training/b032_000256.npz  \n",
            " extracting: dad/obj_feat/training/b032_000258.npz  \n",
            " extracting: dad/obj_feat/training/b032_000269.npz  \n",
            " extracting: dad/obj_feat/training/b032_000273.npz  \n",
            " extracting: dad/obj_feat/training/b032_000294.npz  \n",
            " extracting: dad/obj_feat/training/b033_000116.npz  \n",
            " extracting: dad/obj_feat/training/b033_000117.npz  \n",
            " extracting: dad/obj_feat/training/b033_000129.npz  \n",
            " extracting: dad/obj_feat/training/b033_000133.npz  \n",
            " extracting: dad/obj_feat/training/b033_000149.npz  \n",
            " extracting: dad/obj_feat/training/b033_000243.npz  \n",
            " extracting: dad/obj_feat/training/b033_000245.npz  \n",
            " extracting: dad/obj_feat/training/b033_000280.npz  \n",
            " extracting: dad/obj_feat/training/b033_000288.npz  \n",
            " extracting: dad/obj_feat/training/b033_000290.npz  \n",
            " extracting: dad/obj_feat/training/b034_000118.npz  \n",
            " extracting: dad/obj_feat/training/b034_000136.npz  \n",
            " extracting: dad/obj_feat/training/b034_000223.npz  \n",
            " extracting: dad/obj_feat/training/b034_000228.npz  \n",
            " extracting: dad/obj_feat/training/b034_000232.npz  \n",
            " extracting: dad/obj_feat/training/b034_000235.npz  \n",
            " extracting: dad/obj_feat/training/b034_000240.npz  \n",
            " extracting: dad/obj_feat/training/b034_000263.npz  \n",
            " extracting: dad/obj_feat/training/b034_000274.npz  \n",
            " extracting: dad/obj_feat/training/b034_000298.npz  \n",
            " extracting: dad/obj_feat/training/b035_000113.npz  \n",
            " extracting: dad/obj_feat/training/b035_000127.npz  \n",
            " extracting: dad/obj_feat/training/b035_000135.npz  \n",
            " extracting: dad/obj_feat/training/b035_000213.npz  \n",
            " extracting: dad/obj_feat/training/b035_000252.npz  \n",
            " extracting: dad/obj_feat/training/b035_000259.npz  \n",
            " extracting: dad/obj_feat/training/b035_000265.npz  \n",
            " extracting: dad/obj_feat/training/b035_000275.npz  \n",
            " extracting: dad/obj_feat/training/b035_000296.npz  \n",
            " extracting: dad/obj_feat/training/b035_000297.npz  \n",
            " extracting: dad/obj_feat/training/b036_000121.npz  \n",
            " extracting: dad/obj_feat/training/b036_000125.npz  \n",
            " extracting: dad/obj_feat/training/b036_000134.npz  \n",
            " extracting: dad/obj_feat/training/b036_000151.npz  \n",
            " extracting: dad/obj_feat/training/b036_000214.npz  \n",
            " extracting: dad/obj_feat/training/b036_000227.npz  \n",
            " extracting: dad/obj_feat/training/b036_000239.npz  \n",
            " extracting: dad/obj_feat/training/b036_000262.npz  \n",
            " extracting: dad/obj_feat/training/b036_000271.npz  \n",
            " extracting: dad/obj_feat/training/b036_000295.npz  \n",
            " extracting: dad/obj_feat/training/b037_000128.npz  \n",
            " extracting: dad/obj_feat/training/b037_000131.npz  \n",
            " extracting: dad/obj_feat/training/b037_000220.npz  \n",
            " extracting: dad/obj_feat/training/b037_000221.npz  \n",
            " extracting: dad/obj_feat/training/b037_000226.npz  \n",
            " extracting: dad/obj_feat/training/b037_000229.npz  \n",
            " extracting: dad/obj_feat/training/b037_000238.npz  \n",
            " extracting: dad/obj_feat/training/b037_000246.npz  \n",
            " extracting: dad/obj_feat/training/b037_000254.npz  \n",
            " extracting: dad/obj_feat/training/b037_000284.npz  \n",
            " extracting: dad/obj_feat/training/b038_000112.npz  \n",
            " extracting: dad/obj_feat/training/b038_000132.npz  \n",
            " extracting: dad/obj_feat/training/b038_000137.npz  \n",
            " extracting: dad/obj_feat/training/b038_000139.npz  \n",
            " extracting: dad/obj_feat/training/b038_000140.npz  \n",
            " extracting: dad/obj_feat/training/b038_000147.npz  \n",
            " extracting: dad/obj_feat/training/b038_000201.npz  \n",
            " extracting: dad/obj_feat/training/b038_000249.npz  \n",
            " extracting: dad/obj_feat/training/b038_000270.npz  \n",
            " extracting: dad/obj_feat/training/b038_000293.npz  \n",
            " extracting: dad/obj_feat/training/b039_000102.npz  \n",
            " extracting: dad/obj_feat/training/b039_000103.npz  \n",
            " extracting: dad/obj_feat/training/b039_000142.npz  \n",
            " extracting: dad/obj_feat/training/b039_000206.npz  \n",
            " extracting: dad/obj_feat/training/b039_000224.npz  \n",
            " extracting: dad/obj_feat/training/b039_000255.npz  \n",
            " extracting: dad/obj_feat/training/b039_000264.npz  \n",
            " extracting: dad/obj_feat/training/b039_000266.npz  \n",
            " extracting: dad/obj_feat/training/b039_000283.npz  \n",
            " extracting: dad/obj_feat/training/b039_000286.npz  \n",
            " extracting: dad/obj_feat/training/b040_000107.npz  \n",
            " extracting: dad/obj_feat/training/b040_000109.npz  \n",
            " extracting: dad/obj_feat/training/b040_000126.npz  \n",
            " extracting: dad/obj_feat/training/b040_000200.npz  \n",
            " extracting: dad/obj_feat/training/b040_000210.npz  \n",
            " extracting: dad/obj_feat/training/b040_000215.npz  \n",
            " extracting: dad/obj_feat/training/b040_000218.npz  \n",
            " extracting: dad/obj_feat/training/b040_000282.npz  \n",
            " extracting: dad/obj_feat/training/b040_000291.npz  \n",
            " extracting: dad/obj_feat/training/b040_000292.npz  \n",
            " extracting: dad/obj_feat/training/b041_000110.npz  \n",
            " extracting: dad/obj_feat/training/b041_000119.npz  \n",
            " extracting: dad/obj_feat/training/b041_000124.npz  \n",
            " extracting: dad/obj_feat/training/b041_000145.npz  \n",
            " extracting: dad/obj_feat/training/b041_000202.npz  \n",
            " extracting: dad/obj_feat/training/b041_000216.npz  \n",
            " extracting: dad/obj_feat/training/b041_000237.npz  \n",
            " extracting: dad/obj_feat/training/b041_000253.npz  \n",
            " extracting: dad/obj_feat/training/b041_000285.npz  \n",
            " extracting: dad/obj_feat/training/b041_000289.npz  \n",
            " extracting: dad/obj_feat/training/b042_000111.npz  \n",
            " extracting: dad/obj_feat/training/b042_000114.npz  \n",
            " extracting: dad/obj_feat/training/b042_000120.npz  \n",
            " extracting: dad/obj_feat/training/b042_000122.npz  \n",
            " extracting: dad/obj_feat/training/b042_000141.npz  \n",
            " extracting: dad/obj_feat/training/b042_000150.npz  \n",
            " extracting: dad/obj_feat/training/b042_000209.npz  \n",
            " extracting: dad/obj_feat/training/b042_000234.npz  \n",
            " extracting: dad/obj_feat/training/b042_000277.npz  \n",
            " extracting: dad/obj_feat/training/b042_000299.npz  \n",
            " extracting: dad/obj_feat/training/b043_000104.npz  \n",
            " extracting: dad/obj_feat/training/b043_000105.npz  \n",
            " extracting: dad/obj_feat/training/b043_000130.npz  \n",
            " extracting: dad/obj_feat/training/b043_000146.npz  \n",
            " extracting: dad/obj_feat/training/b043_000204.npz  \n",
            " extracting: dad/obj_feat/training/b043_000208.npz  \n",
            " extracting: dad/obj_feat/training/b043_000212.npz  \n",
            " extracting: dad/obj_feat/training/b043_000231.npz  \n",
            " extracting: dad/obj_feat/training/b043_000248.npz  \n",
            " extracting: dad/obj_feat/training/b043_000281.npz  \n",
            " extracting: dad/obj_feat/training/b044_000108.npz  \n",
            " extracting: dad/obj_feat/training/b044_000143.npz  \n",
            " extracting: dad/obj_feat/training/b044_000148.npz  \n",
            " extracting: dad/obj_feat/training/b044_000207.npz  \n",
            " extracting: dad/obj_feat/training/b044_000230.npz  \n",
            " extracting: dad/obj_feat/training/b044_000241.npz  \n",
            " extracting: dad/obj_feat/training/b044_000250.npz  \n",
            " extracting: dad/obj_feat/training/b044_000261.npz  \n",
            " extracting: dad/obj_feat/training/b044_000272.npz  \n",
            " extracting: dad/obj_feat/training/b044_000276.npz  \n",
            " extracting: dad/obj_feat/training/b045_000205.npz  \n",
            " extracting: dad/obj_feat/training/b045_000219.npz  \n",
            " extracting: dad/obj_feat/training/b045_000225.npz  \n",
            " extracting: dad/obj_feat/training/b045_000236.npz  \n",
            " extracting: dad/obj_feat/training/b045_000247.npz  \n",
            " extracting: dad/obj_feat/training/b045_000251.npz  \n",
            " extracting: dad/obj_feat/training/b045_000257.npz  \n",
            " extracting: dad/obj_feat/training/b045_000278.npz  \n",
            " extracting: dad/obj_feat/training/b045_000279.npz  \n",
            " extracting: dad/obj_feat/training/b045_000287.npz  \n",
            " extracting: dad/obj_feat/training/b046_000167.npz  \n",
            " extracting: dad/obj_feat/training/b046_000169.npz  \n",
            " extracting: dad/obj_feat/training/b046_000171.npz  \n",
            " extracting: dad/obj_feat/training/b046_000173.npz  \n",
            " extracting: dad/obj_feat/training/b046_000194.npz  \n",
            " extracting: dad/obj_feat/training/b046_000310.npz  \n",
            " extracting: dad/obj_feat/training/b046_000336.npz  \n",
            " extracting: dad/obj_feat/training/b046_000347.npz  \n",
            " extracting: dad/obj_feat/training/b046_000379.npz  \n",
            " extracting: dad/obj_feat/training/b046_000397.npz  \n",
            " extracting: dad/obj_feat/training/b047_000156.npz  \n",
            " extracting: dad/obj_feat/training/b047_000176.npz  \n",
            " extracting: dad/obj_feat/training/b047_000178.npz  \n",
            " extracting: dad/obj_feat/training/b047_000201.npz  \n",
            " extracting: dad/obj_feat/training/b047_000311.npz  \n",
            " extracting: dad/obj_feat/training/b047_000312.npz  \n",
            " extracting: dad/obj_feat/training/b047_000330.npz  \n",
            " extracting: dad/obj_feat/training/b047_000387.npz  \n",
            " extracting: dad/obj_feat/training/b047_000394.npz  \n",
            " extracting: dad/obj_feat/training/b047_000395.npz  \n",
            " extracting: dad/obj_feat/training/b048_000158.npz  \n",
            " extracting: dad/obj_feat/training/b048_000163.npz  \n",
            " extracting: dad/obj_feat/training/b048_000180.npz  \n",
            " extracting: dad/obj_feat/training/b048_000309.npz  \n",
            " extracting: dad/obj_feat/training/b048_000319.npz  \n",
            " extracting: dad/obj_feat/training/b048_000320.npz  \n",
            " extracting: dad/obj_feat/training/b048_000358.npz  \n",
            " extracting: dad/obj_feat/training/b048_000363.npz  \n",
            " extracting: dad/obj_feat/training/b048_000370.npz  \n",
            " extracting: dad/obj_feat/training/b048_000381.npz  \n",
            " extracting: dad/obj_feat/training/b049_000177.npz  \n",
            " extracting: dad/obj_feat/training/b049_000199.npz  \n",
            " extracting: dad/obj_feat/training/b049_000308.npz  \n",
            " extracting: dad/obj_feat/training/b049_000332.npz  \n",
            " extracting: dad/obj_feat/training/b049_000340.npz  \n",
            " extracting: dad/obj_feat/training/b049_000345.npz  \n",
            " extracting: dad/obj_feat/training/b049_000349.npz  \n",
            " extracting: dad/obj_feat/training/b049_000361.npz  \n",
            " extracting: dad/obj_feat/training/b049_000375.npz  \n",
            " extracting: dad/obj_feat/training/b049_000380.npz  \n",
            " extracting: dad/obj_feat/training/b050_000157.npz  \n",
            " extracting: dad/obj_feat/training/b050_000181.npz  \n",
            " extracting: dad/obj_feat/training/b050_000185.npz  \n",
            " extracting: dad/obj_feat/training/b050_000305.npz  \n",
            " extracting: dad/obj_feat/training/b050_000306.npz  \n",
            " extracting: dad/obj_feat/training/b050_000313.npz  \n",
            " extracting: dad/obj_feat/training/b050_000315.npz  \n",
            " extracting: dad/obj_feat/training/b050_000341.npz  \n",
            " extracting: dad/obj_feat/training/b050_000342.npz  \n",
            " extracting: dad/obj_feat/training/b050_000396.npz  \n",
            " extracting: dad/obj_feat/training/b051_000155.npz  \n",
            " extracting: dad/obj_feat/training/b051_000187.npz  \n",
            " extracting: dad/obj_feat/training/b051_000301.npz  \n",
            " extracting: dad/obj_feat/training/b051_000317.npz  \n",
            " extracting: dad/obj_feat/training/b051_000324.npz  \n",
            " extracting: dad/obj_feat/training/b051_000338.npz  \n",
            " extracting: dad/obj_feat/training/b051_000346.npz  \n",
            " extracting: dad/obj_feat/training/b051_000382.npz  \n",
            " extracting: dad/obj_feat/training/b051_000389.npz  \n",
            " extracting: dad/obj_feat/training/b051_000399.npz  \n",
            " extracting: dad/obj_feat/training/b052_000166.npz  \n",
            " extracting: dad/obj_feat/training/b052_000193.npz  \n",
            " extracting: dad/obj_feat/training/b052_000327.npz  \n",
            " extracting: dad/obj_feat/training/b052_000353.npz  \n",
            " extracting: dad/obj_feat/training/b052_000357.npz  \n",
            " extracting: dad/obj_feat/training/b052_000360.npz  \n",
            " extracting: dad/obj_feat/training/b052_000368.npz  \n",
            " extracting: dad/obj_feat/training/b052_000374.npz  \n",
            " extracting: dad/obj_feat/training/b052_000377.npz  \n",
            " extracting: dad/obj_feat/training/b052_000384.npz  \n",
            " extracting: dad/obj_feat/training/b053_000179.npz  \n",
            " extracting: dad/obj_feat/training/b053_000190.npz  \n",
            " extracting: dad/obj_feat/training/b053_000300.npz  \n",
            " extracting: dad/obj_feat/training/b053_000314.npz  \n",
            " extracting: dad/obj_feat/training/b053_000325.npz  \n",
            " extracting: dad/obj_feat/training/b053_000334.npz  \n",
            " extracting: dad/obj_feat/training/b053_000348.npz  \n",
            " extracting: dad/obj_feat/training/b053_000350.npz  \n",
            " extracting: dad/obj_feat/training/b053_000365.npz  \n",
            " extracting: dad/obj_feat/training/b053_000369.npz  \n",
            " extracting: dad/obj_feat/training/b054_000153.npz  \n",
            " extracting: dad/obj_feat/training/b054_000168.npz  \n",
            " extracting: dad/obj_feat/training/b054_000302.npz  \n",
            " extracting: dad/obj_feat/training/b054_000329.npz  \n",
            " extracting: dad/obj_feat/training/b054_000333.npz  \n",
            " extracting: dad/obj_feat/training/b054_000354.npz  \n",
            " extracting: dad/obj_feat/training/b054_000355.npz  \n",
            " extracting: dad/obj_feat/training/b054_000364.npz  \n",
            " extracting: dad/obj_feat/training/b054_000383.npz  \n",
            " extracting: dad/obj_feat/training/b054_000391.npz  \n",
            " extracting: dad/obj_feat/training/b055_000161.npz  \n",
            " extracting: dad/obj_feat/training/b055_000304.npz  \n",
            " extracting: dad/obj_feat/training/b055_000316.npz  \n",
            " extracting: dad/obj_feat/training/b055_000322.npz  \n",
            " extracting: dad/obj_feat/training/b055_000344.npz  \n",
            " extracting: dad/obj_feat/training/b055_000362.npz  \n",
            " extracting: dad/obj_feat/training/b055_000366.npz  \n",
            " extracting: dad/obj_feat/training/b055_000367.npz  \n",
            " extracting: dad/obj_feat/training/b055_000371.npz  \n",
            " extracting: dad/obj_feat/training/b055_000398.npz  \n",
            " extracting: dad/obj_feat/training/b056_000172.npz  \n",
            " extracting: dad/obj_feat/training/b056_000175.npz  \n",
            " extracting: dad/obj_feat/training/b056_000184.npz  \n",
            " extracting: dad/obj_feat/training/b056_000188.npz  \n",
            " extracting: dad/obj_feat/training/b056_000200.npz  \n",
            " extracting: dad/obj_feat/training/b056_000323.npz  \n",
            " extracting: dad/obj_feat/training/b056_000331.npz  \n",
            " extracting: dad/obj_feat/training/b056_000343.npz  \n",
            " extracting: dad/obj_feat/training/b056_000373.npz  \n",
            " extracting: dad/obj_feat/training/b056_000393.npz  \n",
            " extracting: dad/obj_feat/training/b057_000154.npz  \n",
            " extracting: dad/obj_feat/training/b057_000159.npz  \n",
            " extracting: dad/obj_feat/training/b057_000183.npz  \n",
            " extracting: dad/obj_feat/training/b057_000186.npz  \n",
            " extracting: dad/obj_feat/training/b057_000196.npz  \n",
            " extracting: dad/obj_feat/training/b057_000307.npz  \n",
            " extracting: dad/obj_feat/training/b057_000326.npz  \n",
            " extracting: dad/obj_feat/training/b057_000328.npz  \n",
            " extracting: dad/obj_feat/training/b057_000356.npz  \n",
            " extracting: dad/obj_feat/training/b057_000385.npz  \n",
            " extracting: dad/obj_feat/training/b058_000164.npz  \n",
            " extracting: dad/obj_feat/training/b058_000165.npz  \n",
            " extracting: dad/obj_feat/training/b058_000170.npz  \n",
            " extracting: dad/obj_feat/training/b058_000182.npz  \n",
            " extracting: dad/obj_feat/training/b058_000192.npz  \n",
            " extracting: dad/obj_feat/training/b058_000339.npz  \n",
            " extracting: dad/obj_feat/training/b058_000352.npz  \n",
            " extracting: dad/obj_feat/training/b058_000376.npz  \n",
            " extracting: dad/obj_feat/training/b058_000378.npz  \n",
            " extracting: dad/obj_feat/training/b058_000386.npz  \n",
            " extracting: dad/obj_feat/training/b059_000160.npz  \n",
            " extracting: dad/obj_feat/training/b059_000162.npz  \n",
            " extracting: dad/obj_feat/training/b059_000174.npz  \n",
            " extracting: dad/obj_feat/training/b059_000189.npz  \n",
            " extracting: dad/obj_feat/training/b059_000191.npz  \n",
            " extracting: dad/obj_feat/training/b059_000195.npz  \n",
            " extracting: dad/obj_feat/training/b059_000198.npz  \n",
            " extracting: dad/obj_feat/training/b059_000303.npz  \n",
            " extracting: dad/obj_feat/training/b059_000318.npz  \n",
            " extracting: dad/obj_feat/training/b059_000390.npz  \n",
            " extracting: dad/obj_feat/training/b060_000152.npz  \n",
            " extracting: dad/obj_feat/training/b060_000197.npz  \n",
            " extracting: dad/obj_feat/training/b060_000321.npz  \n",
            " extracting: dad/obj_feat/training/b060_000335.npz  \n",
            " extracting: dad/obj_feat/training/b060_000337.npz  \n",
            " extracting: dad/obj_feat/training/b060_000351.npz  \n",
            " extracting: dad/obj_feat/training/b060_000359.npz  \n",
            " extracting: dad/obj_feat/training/b060_000372.npz  \n",
            " extracting: dad/obj_feat/training/b060_000388.npz  \n",
            " extracting: dad/obj_feat/training/b060_000392.npz  \n",
            " extracting: dad/obj_feat/training/b061_000211.npz  \n",
            " extracting: dad/obj_feat/training/b061_000216.npz  \n",
            " extracting: dad/obj_feat/training/b061_000223.npz  \n",
            " extracting: dad/obj_feat/training/b061_000413.npz  \n",
            " extracting: dad/obj_feat/training/b061_000426.npz  \n",
            " extracting: dad/obj_feat/training/b061_000471.npz  \n",
            " extracting: dad/obj_feat/training/b061_000474.npz  \n",
            " extracting: dad/obj_feat/training/b061_000478.npz  \n",
            " extracting: dad/obj_feat/training/b061_000488.npz  \n",
            " extracting: dad/obj_feat/training/b061_000490.npz  \n",
            " extracting: dad/obj_feat/training/b062_000229.npz  \n",
            " extracting: dad/obj_feat/training/b062_000247.npz  \n",
            " extracting: dad/obj_feat/training/b062_000250.npz  \n",
            " extracting: dad/obj_feat/training/b062_000427.npz  \n",
            " extracting: dad/obj_feat/training/b062_000438.npz  \n",
            " extracting: dad/obj_feat/training/b062_000442.npz  \n",
            " extracting: dad/obj_feat/training/b062_000464.npz  \n",
            " extracting: dad/obj_feat/training/b062_000468.npz  \n",
            " extracting: dad/obj_feat/training/b062_000477.npz  \n",
            " extracting: dad/obj_feat/training/b062_000492.npz  \n",
            " extracting: dad/obj_feat/training/b063_000212.npz  \n",
            " extracting: dad/obj_feat/training/b063_000227.npz  \n",
            " extracting: dad/obj_feat/training/b063_000235.npz  \n",
            " extracting: dad/obj_feat/training/b063_000240.npz  \n",
            " extracting: dad/obj_feat/training/b063_000406.npz  \n",
            " extracting: dad/obj_feat/training/b063_000419.npz  \n",
            " extracting: dad/obj_feat/training/b063_000433.npz  \n",
            " extracting: dad/obj_feat/training/b063_000445.npz  \n",
            " extracting: dad/obj_feat/training/b063_000452.npz  \n",
            " extracting: dad/obj_feat/training/b063_000489.npz  \n",
            " extracting: dad/obj_feat/training/b064_000215.npz  \n",
            " extracting: dad/obj_feat/training/b064_000231.npz  \n",
            " extracting: dad/obj_feat/training/b064_000236.npz  \n",
            " extracting: dad/obj_feat/training/b064_000414.npz  \n",
            " extracting: dad/obj_feat/training/b064_000415.npz  \n",
            " extracting: dad/obj_feat/training/b064_000447.npz  \n",
            " extracting: dad/obj_feat/training/b064_000458.npz  \n",
            " extracting: dad/obj_feat/training/b064_000484.npz  \n",
            " extracting: dad/obj_feat/training/b064_000485.npz  \n",
            " extracting: dad/obj_feat/training/b064_000493.npz  \n",
            " extracting: dad/obj_feat/training/b065_000213.npz  \n",
            " extracting: dad/obj_feat/training/b065_000225.npz  \n",
            " extracting: dad/obj_feat/training/b065_000241.npz  \n",
            " extracting: dad/obj_feat/training/b065_000403.npz  \n",
            " extracting: dad/obj_feat/training/b065_000412.npz  \n",
            " extracting: dad/obj_feat/training/b065_000417.npz  \n",
            " extracting: dad/obj_feat/training/b065_000457.npz  \n",
            " extracting: dad/obj_feat/training/b065_000459.npz  \n",
            " extracting: dad/obj_feat/training/b065_000481.npz  \n",
            " extracting: dad/obj_feat/training/b065_000496.npz  \n",
            " extracting: dad/obj_feat/training/b066_000404.npz  \n",
            " extracting: dad/obj_feat/training/b066_000416.npz  \n",
            " extracting: dad/obj_feat/training/b066_000420.npz  \n",
            " extracting: dad/obj_feat/training/b066_000436.npz  \n",
            " extracting: dad/obj_feat/training/b066_000454.npz  \n",
            " extracting: dad/obj_feat/training/b066_000472.npz  \n",
            " extracting: dad/obj_feat/training/b066_000476.npz  \n",
            " extracting: dad/obj_feat/training/b066_000482.npz  \n",
            " extracting: dad/obj_feat/training/b066_000495.npz  \n",
            " extracting: dad/obj_feat/training/b066_000499.npz  \n",
            " extracting: dad/obj_feat/training/b067_000210.npz  \n",
            " extracting: dad/obj_feat/training/b067_000214.npz  \n",
            " extracting: dad/obj_feat/training/b067_000217.npz  \n",
            " extracting: dad/obj_feat/training/b067_000244.npz  \n",
            " extracting: dad/obj_feat/training/b067_000246.npz  \n",
            " extracting: dad/obj_feat/training/b067_000418.npz  \n",
            " extracting: dad/obj_feat/training/b067_000430.npz  \n",
            " extracting: dad/obj_feat/training/b067_000432.npz  \n",
            " extracting: dad/obj_feat/training/b067_000435.npz  \n",
            " extracting: dad/obj_feat/training/b067_000486.npz  \n",
            " extracting: dad/obj_feat/training/b068_000206.npz  \n",
            " extracting: dad/obj_feat/training/b068_000224.npz  \n",
            " extracting: dad/obj_feat/training/b068_000237.npz  \n",
            " extracting: dad/obj_feat/training/b068_000242.npz  \n",
            " extracting: dad/obj_feat/training/b068_000401.npz  \n",
            " extracting: dad/obj_feat/training/b068_000434.npz  \n",
            " extracting: dad/obj_feat/training/b068_000437.npz  \n",
            " extracting: dad/obj_feat/training/b068_000451.npz  \n",
            " extracting: dad/obj_feat/training/b068_000469.npz  \n",
            " extracting: dad/obj_feat/training/b068_000498.npz  \n",
            " extracting: dad/obj_feat/training/b069_000202.npz  \n",
            " extracting: dad/obj_feat/training/b069_000205.npz  \n",
            " extracting: dad/obj_feat/training/b069_000238.npz  \n",
            " extracting: dad/obj_feat/training/b069_000248.npz  \n",
            " extracting: dad/obj_feat/training/b069_000411.npz  \n",
            " extracting: dad/obj_feat/training/b069_000439.npz  \n",
            " extracting: dad/obj_feat/training/b069_000448.npz  \n",
            " extracting: dad/obj_feat/training/b069_000456.npz  \n",
            " extracting: dad/obj_feat/training/b069_000463.npz  \n",
            " extracting: dad/obj_feat/training/b069_000487.npz  \n",
            " extracting: dad/obj_feat/training/b070_000221.npz  \n",
            " extracting: dad/obj_feat/training/b070_000222.npz  \n",
            " extracting: dad/obj_feat/training/b070_000228.npz  \n",
            " extracting: dad/obj_feat/training/b070_000245.npz  \n",
            " extracting: dad/obj_feat/training/b070_000405.npz  \n",
            " extracting: dad/obj_feat/training/b070_000441.npz  \n",
            " extracting: dad/obj_feat/training/b070_000449.npz  \n",
            " extracting: dad/obj_feat/training/b070_000461.npz  \n",
            " extracting: dad/obj_feat/training/b070_000467.npz  \n",
            " extracting: dad/obj_feat/training/b070_000494.npz  \n",
            " extracting: dad/obj_feat/training/b071_000203.npz  \n",
            " extracting: dad/obj_feat/training/b071_000219.npz  \n",
            " extracting: dad/obj_feat/training/b071_000239.npz  \n",
            " extracting: dad/obj_feat/training/b071_000424.npz  \n",
            " extracting: dad/obj_feat/training/b071_000425.npz  \n",
            " extracting: dad/obj_feat/training/b071_000431.npz  \n",
            " extracting: dad/obj_feat/training/b071_000444.npz  \n",
            " extracting: dad/obj_feat/training/b071_000460.npz  \n",
            " extracting: dad/obj_feat/training/b071_000480.npz  \n",
            " extracting: dad/obj_feat/training/b071_000491.npz  \n",
            " extracting: dad/obj_feat/training/b072_000218.npz  \n",
            " extracting: dad/obj_feat/training/b072_000220.npz  \n",
            " extracting: dad/obj_feat/training/b072_000230.npz  \n",
            " extracting: dad/obj_feat/training/b072_000234.npz  \n",
            " extracting: dad/obj_feat/training/b072_000243.npz  \n",
            " extracting: dad/obj_feat/training/b072_000249.npz  \n",
            " extracting: dad/obj_feat/training/b072_000400.npz  \n",
            " extracting: dad/obj_feat/training/b072_000402.npz  \n",
            " extracting: dad/obj_feat/training/b072_000421.npz  \n",
            " extracting: dad/obj_feat/training/b072_000446.npz  \n",
            " extracting: dad/obj_feat/training/b073_000204.npz  \n",
            " extracting: dad/obj_feat/training/b073_000226.npz  \n",
            " extracting: dad/obj_feat/training/b073_000251.npz  \n",
            " extracting: dad/obj_feat/training/b073_000410.npz  \n",
            " extracting: dad/obj_feat/training/b073_000423.npz  \n",
            " extracting: dad/obj_feat/training/b073_000443.npz  \n",
            " extracting: dad/obj_feat/training/b073_000455.npz  \n",
            " extracting: dad/obj_feat/training/b073_000466.npz  \n",
            " extracting: dad/obj_feat/training/b073_000470.npz  \n",
            " extracting: dad/obj_feat/training/b073_000497.npz  \n",
            " extracting: dad/obj_feat/training/b074_000207.npz  \n",
            " extracting: dad/obj_feat/training/b074_000209.npz  \n",
            " extracting: dad/obj_feat/training/b074_000233.npz  \n",
            " extracting: dad/obj_feat/training/b074_000408.npz  \n",
            " extracting: dad/obj_feat/training/b074_000422.npz  \n",
            " extracting: dad/obj_feat/training/b074_000428.npz  \n",
            " extracting: dad/obj_feat/training/b074_000450.npz  \n",
            " extracting: dad/obj_feat/training/b074_000465.npz  \n",
            " extracting: dad/obj_feat/training/b074_000473.npz  \n",
            " extracting: dad/obj_feat/training/b074_000483.npz  \n",
            " extracting: dad/obj_feat/training/b075_000208.npz  \n",
            " extracting: dad/obj_feat/training/b075_000232.npz  \n",
            " extracting: dad/obj_feat/training/b075_000407.npz  \n",
            " extracting: dad/obj_feat/training/b075_000409.npz  \n",
            " extracting: dad/obj_feat/training/b075_000429.npz  \n",
            " extracting: dad/obj_feat/training/b075_000440.npz  \n",
            " extracting: dad/obj_feat/training/b075_000453.npz  \n",
            " extracting: dad/obj_feat/training/b075_000462.npz  \n",
            " extracting: dad/obj_feat/training/b075_000475.npz  \n",
            " extracting: dad/obj_feat/training/b075_000479.npz  \n",
            " extracting: dad/obj_feat/training/b076_000269.npz  \n",
            " extracting: dad/obj_feat/training/b076_000296.npz  \n",
            " extracting: dad/obj_feat/training/b076_000298.npz  \n",
            " extracting: dad/obj_feat/training/b076_000300.npz  \n",
            " extracting: dad/obj_feat/training/b076_000504.npz  \n",
            " extracting: dad/obj_feat/training/b076_000508.npz  \n",
            " extracting: dad/obj_feat/training/b076_000509.npz  \n",
            " extracting: dad/obj_feat/training/b076_000530.npz  \n",
            " extracting: dad/obj_feat/training/b076_000562.npz  \n",
            " extracting: dad/obj_feat/training/b076_000599.npz  \n",
            " extracting: dad/obj_feat/training/b077_000266.npz  \n",
            " extracting: dad/obj_feat/training/b077_000280.npz  \n",
            " extracting: dad/obj_feat/training/b077_000290.npz  \n",
            " extracting: dad/obj_feat/training/b077_000291.npz  \n",
            " extracting: dad/obj_feat/training/b077_000500.npz  \n",
            " extracting: dad/obj_feat/training/b077_000501.npz  \n",
            " extracting: dad/obj_feat/training/b077_000514.npz  \n",
            " extracting: dad/obj_feat/training/b077_000521.npz  \n",
            " extracting: dad/obj_feat/training/b077_000531.npz  \n",
            " extracting: dad/obj_feat/training/b077_000561.npz  \n",
            " extracting: dad/obj_feat/training/b078_000257.npz  \n",
            " extracting: dad/obj_feat/training/b078_000272.npz  \n",
            " extracting: dad/obj_feat/training/b078_000275.npz  \n",
            " extracting: dad/obj_feat/training/b078_000299.npz  \n",
            " extracting: dad/obj_feat/training/b078_000520.npz  \n",
            " extracting: dad/obj_feat/training/b078_000523.npz  \n",
            " extracting: dad/obj_feat/training/b078_000532.npz  \n",
            " extracting: dad/obj_feat/training/b078_000571.npz  \n",
            " extracting: dad/obj_feat/training/b078_000575.npz  \n",
            " extracting: dad/obj_feat/training/b078_000594.npz  \n",
            " extracting: dad/obj_feat/training/b079_000253.npz  \n",
            " extracting: dad/obj_feat/training/b079_000283.npz  \n",
            " extracting: dad/obj_feat/training/b079_000510.npz  \n",
            " extracting: dad/obj_feat/training/b079_000517.npz  \n",
            " extracting: dad/obj_feat/training/b079_000525.npz  \n",
            " extracting: dad/obj_feat/training/b079_000527.npz  \n",
            " extracting: dad/obj_feat/training/b079_000529.npz  \n",
            " extracting: dad/obj_feat/training/b079_000573.npz  \n",
            " extracting: dad/obj_feat/training/b079_000584.npz  \n",
            " extracting: dad/obj_feat/training/b079_000595.npz  \n",
            " extracting: dad/obj_feat/training/b080_000265.npz  \n",
            " extracting: dad/obj_feat/training/b080_000292.npz  \n",
            " extracting: dad/obj_feat/training/b080_000519.npz  \n",
            " extracting: dad/obj_feat/training/b080_000548.npz  \n",
            " extracting: dad/obj_feat/training/b080_000564.npz  \n",
            " extracting: dad/obj_feat/training/b080_000568.npz  \n",
            " extracting: dad/obj_feat/training/b080_000569.npz  \n",
            " extracting: dad/obj_feat/training/b080_000576.npz  \n",
            " extracting: dad/obj_feat/training/b080_000583.npz  \n",
            " extracting: dad/obj_feat/training/b080_000589.npz  \n",
            " extracting: dad/obj_feat/training/b081_000271.npz  \n",
            " extracting: dad/obj_feat/training/b081_000287.npz  \n",
            " extracting: dad/obj_feat/training/b081_000293.npz  \n",
            " extracting: dad/obj_feat/training/b081_000301.npz  \n",
            " extracting: dad/obj_feat/training/b081_000518.npz  \n",
            " extracting: dad/obj_feat/training/b081_000522.npz  \n",
            " extracting: dad/obj_feat/training/b081_000538.npz  \n",
            " extracting: dad/obj_feat/training/b081_000544.npz  \n",
            " extracting: dad/obj_feat/training/b081_000547.npz  \n",
            " extracting: dad/obj_feat/training/b081_000550.npz  \n",
            " extracting: dad/obj_feat/training/b082_000274.npz  \n",
            " extracting: dad/obj_feat/training/b082_000286.npz  \n",
            " extracting: dad/obj_feat/training/b082_000289.npz  \n",
            " extracting: dad/obj_feat/training/b082_000295.npz  \n",
            " extracting: dad/obj_feat/training/b082_000511.npz  \n",
            " extracting: dad/obj_feat/training/b082_000526.npz  \n",
            " extracting: dad/obj_feat/training/b082_000551.npz  \n",
            " extracting: dad/obj_feat/training/b082_000552.npz  \n",
            " extracting: dad/obj_feat/training/b082_000572.npz  \n",
            " extracting: dad/obj_feat/training/b082_000590.npz  \n",
            " extracting: dad/obj_feat/training/b083_000259.npz  \n",
            " extracting: dad/obj_feat/training/b083_000273.npz  \n",
            " extracting: dad/obj_feat/training/b083_000277.npz  \n",
            " extracting: dad/obj_feat/training/b083_000502.npz  \n",
            " extracting: dad/obj_feat/training/b083_000539.npz  \n",
            " extracting: dad/obj_feat/training/b083_000555.npz  \n",
            " extracting: dad/obj_feat/training/b083_000560.npz  \n",
            " extracting: dad/obj_feat/training/b083_000581.npz  \n",
            " extracting: dad/obj_feat/training/b083_000596.npz  \n",
            " extracting: dad/obj_feat/training/b083_000598.npz  \n",
            " extracting: dad/obj_feat/training/b084_000267.npz  \n",
            " extracting: dad/obj_feat/training/b084_000284.npz  \n",
            " extracting: dad/obj_feat/training/b084_000297.npz  \n",
            " extracting: dad/obj_feat/training/b084_000503.npz  \n",
            " extracting: dad/obj_feat/training/b084_000516.npz  \n",
            " extracting: dad/obj_feat/training/b084_000546.npz  \n",
            " extracting: dad/obj_feat/training/b084_000554.npz  \n",
            " extracting: dad/obj_feat/training/b084_000557.npz  \n",
            " extracting: dad/obj_feat/training/b084_000578.npz  \n",
            " extracting: dad/obj_feat/training/b084_000597.npz  \n",
            " extracting: dad/obj_feat/training/b085_000260.npz  \n",
            " extracting: dad/obj_feat/training/b085_000281.npz  \n",
            " extracting: dad/obj_feat/training/b085_000282.npz  \n",
            " extracting: dad/obj_feat/training/b085_000535.npz  \n",
            " extracting: dad/obj_feat/training/b085_000558.npz  \n",
            " extracting: dad/obj_feat/training/b085_000574.npz  \n",
            " extracting: dad/obj_feat/training/b085_000580.npz  \n",
            " extracting: dad/obj_feat/training/b085_000582.npz  \n",
            " extracting: dad/obj_feat/training/b085_000588.npz  \n",
            " extracting: dad/obj_feat/training/b085_000592.npz  \n",
            " extracting: dad/obj_feat/training/b086_000254.npz  \n",
            " extracting: dad/obj_feat/training/b086_000505.npz  \n",
            " extracting: dad/obj_feat/training/b086_000515.npz  \n",
            " extracting: dad/obj_feat/training/b086_000545.npz  \n",
            " extracting: dad/obj_feat/training/b086_000549.npz  \n",
            " extracting: dad/obj_feat/training/b086_000565.npz  \n",
            " extracting: dad/obj_feat/training/b086_000577.npz  \n",
            " extracting: dad/obj_feat/training/b086_000586.npz  \n",
            " extracting: dad/obj_feat/training/b086_000587.npz  \n",
            " extracting: dad/obj_feat/training/b086_000593.npz  \n",
            " extracting: dad/obj_feat/training/b087_000270.npz  \n",
            " extracting: dad/obj_feat/training/b087_000278.npz  \n",
            " extracting: dad/obj_feat/training/b087_000285.npz  \n",
            " extracting: dad/obj_feat/training/b087_000533.npz  \n",
            " extracting: dad/obj_feat/training/b087_000540.npz  \n",
            " extracting: dad/obj_feat/training/b087_000543.npz  \n",
            " extracting: dad/obj_feat/training/b087_000559.npz  \n",
            " extracting: dad/obj_feat/training/b087_000563.npz  \n",
            " extracting: dad/obj_feat/training/b087_000567.npz  \n",
            " extracting: dad/obj_feat/training/b087_000591.npz  \n",
            " extracting: dad/obj_feat/training/b088_000256.npz  \n",
            " extracting: dad/obj_feat/training/b088_000263.npz  \n",
            " extracting: dad/obj_feat/training/b088_000294.npz  \n",
            " extracting: dad/obj_feat/training/b088_000507.npz  \n",
            " extracting: dad/obj_feat/training/b088_000513.npz  \n",
            " extracting: dad/obj_feat/training/b088_000528.npz  \n",
            " extracting: dad/obj_feat/training/b088_000537.npz  \n",
            " extracting: dad/obj_feat/training/b088_000541.npz  \n",
            " extracting: dad/obj_feat/training/b088_000542.npz  \n",
            " extracting: dad/obj_feat/training/b088_000585.npz  \n",
            " extracting: dad/obj_feat/training/b089_000252.npz  \n",
            " extracting: dad/obj_feat/training/b089_000255.npz  \n",
            " extracting: dad/obj_feat/training/b089_000258.npz  \n",
            " extracting: dad/obj_feat/training/b089_000506.npz  \n",
            " extracting: dad/obj_feat/training/b089_000512.npz  \n",
            " extracting: dad/obj_feat/training/b089_000524.npz  \n",
            " extracting: dad/obj_feat/training/b089_000553.npz  \n",
            " extracting: dad/obj_feat/training/b089_000556.npz  \n",
            " extracting: dad/obj_feat/training/b089_000566.npz  \n",
            " extracting: dad/obj_feat/training/b089_000579.npz  \n",
            " extracting: dad/obj_feat/training/b090_000261.npz  \n",
            " extracting: dad/obj_feat/training/b090_000262.npz  \n",
            " extracting: dad/obj_feat/training/b090_000264.npz  \n",
            " extracting: dad/obj_feat/training/b090_000268.npz  \n",
            " extracting: dad/obj_feat/training/b090_000276.npz  \n",
            " extracting: dad/obj_feat/training/b090_000279.npz  \n",
            " extracting: dad/obj_feat/training/b090_000288.npz  \n",
            " extracting: dad/obj_feat/training/b090_000534.npz  \n",
            " extracting: dad/obj_feat/training/b090_000536.npz  \n",
            " extracting: dad/obj_feat/training/b090_000570.npz  \n",
            " extracting: dad/obj_feat/training/b091_000308.npz  \n",
            " extracting: dad/obj_feat/training/b091_000321.npz  \n",
            " extracting: dad/obj_feat/training/b091_000647.npz  \n",
            " extracting: dad/obj_feat/training/b091_000655.npz  \n",
            " extracting: dad/obj_feat/training/b091_000656.npz  \n",
            " extracting: dad/obj_feat/training/b091_000660.npz  \n",
            " extracting: dad/obj_feat/training/b091_000663.npz  \n",
            " extracting: dad/obj_feat/training/b091_000665.npz  \n",
            " extracting: dad/obj_feat/training/b091_000677.npz  \n",
            " extracting: dad/obj_feat/training/b091_000696.npz  \n",
            " extracting: dad/obj_feat/training/b092_000328.npz  \n",
            " extracting: dad/obj_feat/training/b092_000332.npz  \n",
            " extracting: dad/obj_feat/training/b092_000336.npz  \n",
            " extracting: dad/obj_feat/training/b092_000606.npz  \n",
            " extracting: dad/obj_feat/training/b092_000610.npz  \n",
            " extracting: dad/obj_feat/training/b092_000623.npz  \n",
            " extracting: dad/obj_feat/training/b092_000645.npz  \n",
            " extracting: dad/obj_feat/training/b092_000667.npz  \n",
            " extracting: dad/obj_feat/training/b092_000674.npz  \n",
            " extracting: dad/obj_feat/training/b092_000681.npz  \n",
            " extracting: dad/obj_feat/training/b093_000310.npz  \n",
            " extracting: dad/obj_feat/training/b093_000315.npz  \n",
            " extracting: dad/obj_feat/training/b093_000346.npz  \n",
            " extracting: dad/obj_feat/training/b093_000612.npz  \n",
            " extracting: dad/obj_feat/training/b093_000619.npz  \n",
            " extracting: dad/obj_feat/training/b093_000636.npz  \n",
            " extracting: dad/obj_feat/training/b093_000652.npz  \n",
            " extracting: dad/obj_feat/training/b093_000669.npz  \n",
            " extracting: dad/obj_feat/training/b093_000690.npz  \n",
            " extracting: dad/obj_feat/training/b093_000692.npz  \n",
            " extracting: dad/obj_feat/training/b094_000303.npz  \n",
            " extracting: dad/obj_feat/training/b094_000304.npz  \n",
            " extracting: dad/obj_feat/training/b094_000340.npz  \n",
            " extracting: dad/obj_feat/training/b094_000350.npz  \n",
            " extracting: dad/obj_feat/training/b094_000622.npz  \n",
            " extracting: dad/obj_feat/training/b094_000630.npz  \n",
            " extracting: dad/obj_feat/training/b094_000662.npz  \n",
            " extracting: dad/obj_feat/training/b094_000676.npz  \n",
            " extracting: dad/obj_feat/training/b094_000678.npz  \n",
            " extracting: dad/obj_feat/training/b094_000695.npz  \n",
            " extracting: dad/obj_feat/training/b095_000311.npz  \n",
            " extracting: dad/obj_feat/training/b095_000318.npz  \n",
            " extracting: dad/obj_feat/training/b095_000324.npz  \n",
            " extracting: dad/obj_feat/training/b095_000608.npz  \n",
            " extracting: dad/obj_feat/training/b095_000628.npz  \n",
            " extracting: dad/obj_feat/training/b095_000643.npz  \n",
            " extracting: dad/obj_feat/training/b095_000675.npz  \n",
            " extracting: dad/obj_feat/training/b095_000687.npz  \n",
            " extracting: dad/obj_feat/training/b095_000694.npz  \n",
            " extracting: dad/obj_feat/training/b095_000699.npz  \n",
            " extracting: dad/obj_feat/training/b096_000313.npz  \n",
            " extracting: dad/obj_feat/training/b096_000317.npz  \n",
            " extracting: dad/obj_feat/training/b096_000326.npz  \n",
            " extracting: dad/obj_feat/training/b096_000626.npz  \n",
            " extracting: dad/obj_feat/training/b096_000638.npz  \n",
            " extracting: dad/obj_feat/training/b096_000653.npz  \n",
            " extracting: dad/obj_feat/training/b096_000657.npz  \n",
            " extracting: dad/obj_feat/training/b096_000680.npz  \n",
            " extracting: dad/obj_feat/training/b096_000684.npz  \n",
            " extracting: dad/obj_feat/training/b096_000693.npz  \n",
            " extracting: dad/obj_feat/training/b097_000307.npz  \n",
            " extracting: dad/obj_feat/training/b097_000312.npz  \n",
            " extracting: dad/obj_feat/training/b097_000330.npz  \n",
            " extracting: dad/obj_feat/training/b097_000348.npz  \n",
            " extracting: dad/obj_feat/training/b097_000351.npz  \n",
            " extracting: dad/obj_feat/training/b097_000600.npz  \n",
            " extracting: dad/obj_feat/training/b097_000614.npz  \n",
            " extracting: dad/obj_feat/training/b097_000646.npz  \n",
            " extracting: dad/obj_feat/training/b097_000661.npz  \n",
            " extracting: dad/obj_feat/training/b097_000666.npz  \n",
            " extracting: dad/obj_feat/training/b098_000319.npz  \n",
            " extracting: dad/obj_feat/training/b098_000325.npz  \n",
            " extracting: dad/obj_feat/training/b098_000329.npz  \n",
            " extracting: dad/obj_feat/training/b098_000335.npz  \n",
            " extracting: dad/obj_feat/training/b098_000339.npz  \n",
            " extracting: dad/obj_feat/training/b098_000342.npz  \n",
            " extracting: dad/obj_feat/training/b098_000620.npz  \n",
            " extracting: dad/obj_feat/training/b098_000621.npz  \n",
            " extracting: dad/obj_feat/training/b098_000627.npz  \n",
            " extracting: dad/obj_feat/training/b098_000685.npz  \n",
            " extracting: dad/obj_feat/training/b099_000323.npz  \n",
            " extracting: dad/obj_feat/training/b099_000349.npz  \n",
            " extracting: dad/obj_feat/training/b099_000609.npz  \n",
            " extracting: dad/obj_feat/training/b099_000629.npz  \n",
            " extracting: dad/obj_feat/training/b099_000631.npz  \n",
            " extracting: dad/obj_feat/training/b099_000632.npz  \n",
            " extracting: dad/obj_feat/training/b099_000633.npz  \n",
            " extracting: dad/obj_feat/training/b099_000639.npz  \n",
            " extracting: dad/obj_feat/training/b099_000654.npz  \n",
            " extracting: dad/obj_feat/training/b099_000659.npz  \n",
            " extracting: dad/obj_feat/training/b100_000305.npz  \n",
            " extracting: dad/obj_feat/training/b100_000320.npz  \n",
            " extracting: dad/obj_feat/training/b100_000331.npz  \n",
            " extracting: dad/obj_feat/training/b100_000337.npz  \n",
            " extracting: dad/obj_feat/training/b100_000344.npz  \n",
            " extracting: dad/obj_feat/training/b100_000347.npz  \n",
            " extracting: dad/obj_feat/training/b100_000602.npz  \n",
            " extracting: dad/obj_feat/training/b100_000617.npz  \n",
            " extracting: dad/obj_feat/training/b100_000618.npz  \n",
            " extracting: dad/obj_feat/training/b100_000644.npz  \n",
            " extracting: dad/obj_feat/training/b101_000334.npz  \n",
            " extracting: dad/obj_feat/training/b101_000338.npz  \n",
            " extracting: dad/obj_feat/training/b101_000343.npz  \n",
            " extracting: dad/obj_feat/training/b101_000601.npz  \n",
            " extracting: dad/obj_feat/training/b101_000605.npz  \n",
            " extracting: dad/obj_feat/training/b101_000615.npz  \n",
            " extracting: dad/obj_feat/training/b101_000641.npz  \n",
            " extracting: dad/obj_feat/training/b101_000668.npz  \n",
            " extracting: dad/obj_feat/training/b101_000671.npz  \n",
            " extracting: dad/obj_feat/training/b101_000682.npz  \n",
            " extracting: dad/obj_feat/training/b102_000341.npz  \n",
            " extracting: dad/obj_feat/training/b102_000345.npz  \n",
            " extracting: dad/obj_feat/training/b102_000603.npz  \n",
            " extracting: dad/obj_feat/training/b102_000616.npz  \n",
            " extracting: dad/obj_feat/training/b102_000624.npz  \n",
            " extracting: dad/obj_feat/training/b102_000650.npz  \n",
            " extracting: dad/obj_feat/training/b102_000672.npz  \n",
            " extracting: dad/obj_feat/training/b102_000683.npz  \n",
            " extracting: dad/obj_feat/training/b102_000686.npz  \n",
            " extracting: dad/obj_feat/training/b102_000688.npz  \n",
            " extracting: dad/obj_feat/training/b103_000306.npz  \n",
            " extracting: dad/obj_feat/training/b103_000327.npz  \n",
            " extracting: dad/obj_feat/training/b103_000607.npz  \n",
            " extracting: dad/obj_feat/training/b103_000637.npz  \n",
            " extracting: dad/obj_feat/training/b103_000640.npz  \n",
            " extracting: dad/obj_feat/training/b103_000649.npz  \n",
            " extracting: dad/obj_feat/training/b103_000651.npz  \n",
            " extracting: dad/obj_feat/training/b103_000658.npz  \n",
            " extracting: dad/obj_feat/training/b103_000664.npz  \n",
            " extracting: dad/obj_feat/training/b103_000691.npz  \n",
            " extracting: dad/obj_feat/training/b104_000302.npz  \n",
            " extracting: dad/obj_feat/training/b104_000309.npz  \n",
            " extracting: dad/obj_feat/training/b104_000314.npz  \n",
            " extracting: dad/obj_feat/training/b104_000316.npz  \n",
            " extracting: dad/obj_feat/training/b104_000625.npz  \n",
            " extracting: dad/obj_feat/training/b104_000634.npz  \n",
            " extracting: dad/obj_feat/training/b104_000635.npz  \n",
            " extracting: dad/obj_feat/training/b104_000642.npz  \n",
            " extracting: dad/obj_feat/training/b104_000648.npz  \n",
            " extracting: dad/obj_feat/training/b104_000698.npz  \n",
            " extracting: dad/obj_feat/training/b105_000322.npz  \n",
            " extracting: dad/obj_feat/training/b105_000333.npz  \n",
            " extracting: dad/obj_feat/training/b105_000604.npz  \n",
            " extracting: dad/obj_feat/training/b105_000611.npz  \n",
            " extracting: dad/obj_feat/training/b105_000613.npz  \n",
            " extracting: dad/obj_feat/training/b105_000670.npz  \n",
            " extracting: dad/obj_feat/training/b105_000673.npz  \n",
            " extracting: dad/obj_feat/training/b105_000679.npz  \n",
            " extracting: dad/obj_feat/training/b105_000689.npz  \n",
            " extracting: dad/obj_feat/training/b105_000697.npz  \n",
            " extracting: dad/obj_feat/training/b106_000357.npz  \n",
            " extracting: dad/obj_feat/training/b106_000361.npz  \n",
            " extracting: dad/obj_feat/training/b106_000385.npz  \n",
            " extracting: dad/obj_feat/training/b106_000386.npz  \n",
            " extracting: dad/obj_feat/training/b106_000742.npz  \n",
            " extracting: dad/obj_feat/training/b106_000759.npz  \n",
            " extracting: dad/obj_feat/training/b106_000776.npz  \n",
            " extracting: dad/obj_feat/training/b106_000777.npz  \n",
            " extracting: dad/obj_feat/training/b106_000778.npz  \n",
            " extracting: dad/obj_feat/training/b106_000787.npz  \n",
            " extracting: dad/obj_feat/training/b107_000358.npz  \n",
            " extracting: dad/obj_feat/training/b107_000374.npz  \n",
            " extracting: dad/obj_feat/training/b107_000379.npz  \n",
            " extracting: dad/obj_feat/training/b107_000393.npz  \n",
            " extracting: dad/obj_feat/training/b107_000716.npz  \n",
            " extracting: dad/obj_feat/training/b107_000728.npz  \n",
            " extracting: dad/obj_feat/training/b107_000732.npz  \n",
            " extracting: dad/obj_feat/training/b107_000739.npz  \n",
            " extracting: dad/obj_feat/training/b107_000765.npz  \n",
            " extracting: dad/obj_feat/training/b107_000797.npz  \n",
            " extracting: dad/obj_feat/training/b108_000354.npz  \n",
            " extracting: dad/obj_feat/training/b108_000369.npz  \n",
            " extracting: dad/obj_feat/training/b108_000391.npz  \n",
            " extracting: dad/obj_feat/training/b108_000395.npz  \n",
            " extracting: dad/obj_feat/training/b108_000727.npz  \n",
            " extracting: dad/obj_feat/training/b108_000756.npz  \n",
            " extracting: dad/obj_feat/training/b108_000767.npz  \n",
            " extracting: dad/obj_feat/training/b108_000768.npz  \n",
            " extracting: dad/obj_feat/training/b108_000790.npz  \n",
            " extracting: dad/obj_feat/training/b108_000791.npz  \n",
            " extracting: dad/obj_feat/training/b109_000384.npz  \n",
            " extracting: dad/obj_feat/training/b109_000401.npz  \n",
            " extracting: dad/obj_feat/training/b109_000729.npz  \n",
            " extracting: dad/obj_feat/training/b109_000733.npz  \n",
            " extracting: dad/obj_feat/training/b109_000738.npz  \n",
            " extracting: dad/obj_feat/training/b109_000754.npz  \n",
            " extracting: dad/obj_feat/training/b109_000762.npz  \n",
            " extracting: dad/obj_feat/training/b109_000783.npz  \n",
            " extracting: dad/obj_feat/training/b109_000789.npz  \n",
            " extracting: dad/obj_feat/training/b109_000799.npz  \n",
            " extracting: dad/obj_feat/training/b110_000353.npz  \n",
            " extracting: dad/obj_feat/training/b110_000368.npz  \n",
            " extracting: dad/obj_feat/training/b110_000373.npz  \n",
            " extracting: dad/obj_feat/training/b110_000389.npz  \n",
            " extracting: dad/obj_feat/training/b110_000712.npz  \n",
            " extracting: dad/obj_feat/training/b110_000726.npz  \n",
            " extracting: dad/obj_feat/training/b110_000730.npz  \n",
            " extracting: dad/obj_feat/training/b110_000745.npz  \n",
            " extracting: dad/obj_feat/training/b110_000758.npz  \n",
            " extracting: dad/obj_feat/training/b110_000792.npz  \n",
            " extracting: dad/obj_feat/training/b111_000356.npz  \n",
            " extracting: dad/obj_feat/training/b111_000364.npz  \n",
            " extracting: dad/obj_feat/training/b111_000387.npz  \n",
            " extracting: dad/obj_feat/training/b111_000703.npz  \n",
            " extracting: dad/obj_feat/training/b111_000709.npz  \n",
            " extracting: dad/obj_feat/training/b111_000720.npz  \n",
            " extracting: dad/obj_feat/training/b111_000735.npz  \n",
            " extracting: dad/obj_feat/training/b111_000753.npz  \n",
            " extracting: dad/obj_feat/training/b111_000771.npz  \n",
            " extracting: dad/obj_feat/training/b111_000772.npz  \n",
            " extracting: dad/obj_feat/training/b112_000378.npz  \n",
            " extracting: dad/obj_feat/training/b112_000382.npz  \n",
            " extracting: dad/obj_feat/training/b112_000400.npz  \n",
            " extracting: dad/obj_feat/training/b112_000700.npz  \n",
            " extracting: dad/obj_feat/training/b112_000718.npz  \n",
            " extracting: dad/obj_feat/training/b112_000747.npz  \n",
            " extracting: dad/obj_feat/training/b112_000766.npz  \n",
            " extracting: dad/obj_feat/training/b112_000769.npz  \n",
            " extracting: dad/obj_feat/training/b112_000780.npz  \n",
            " extracting: dad/obj_feat/training/b112_000788.npz  \n",
            " extracting: dad/obj_feat/training/b113_000359.npz  \n",
            " extracting: dad/obj_feat/training/b113_000363.npz  \n",
            " extracting: dad/obj_feat/training/b113_000371.npz  \n",
            " extracting: dad/obj_feat/training/b113_000372.npz  \n",
            " extracting: dad/obj_feat/training/b113_000383.npz  \n",
            " extracting: dad/obj_feat/training/b113_000388.npz  \n",
            " extracting: dad/obj_feat/training/b113_000717.npz  \n",
            " extracting: dad/obj_feat/training/b113_000724.npz  \n",
            " extracting: dad/obj_feat/training/b113_000736.npz  \n",
            " extracting: dad/obj_feat/training/b113_000773.npz  \n",
            " extracting: dad/obj_feat/training/b114_000375.npz  \n",
            " extracting: dad/obj_feat/training/b114_000390.npz  \n",
            " extracting: dad/obj_feat/training/b114_000701.npz  \n",
            " extracting: dad/obj_feat/training/b114_000734.npz  \n",
            " extracting: dad/obj_feat/training/b114_000746.npz  \n",
            " extracting: dad/obj_feat/training/b114_000755.npz  \n",
            " extracting: dad/obj_feat/training/b114_000761.npz  \n",
            " extracting: dad/obj_feat/training/b114_000770.npz  \n",
            " extracting: dad/obj_feat/training/b114_000774.npz  \n",
            " extracting: dad/obj_feat/training/b114_000779.npz  \n",
            " extracting: dad/obj_feat/training/b115_000355.npz  \n",
            " extracting: dad/obj_feat/training/b115_000367.npz  \n",
            " extracting: dad/obj_feat/training/b115_000380.npz  \n",
            " extracting: dad/obj_feat/training/b115_000398.npz  \n",
            " extracting: dad/obj_feat/training/b115_000399.npz  \n",
            " extracting: dad/obj_feat/training/b115_000711.npz  \n",
            " extracting: dad/obj_feat/training/b115_000731.npz  \n",
            " extracting: dad/obj_feat/training/b115_000749.npz  \n",
            " extracting: dad/obj_feat/training/b115_000757.npz  \n",
            " extracting: dad/obj_feat/training/b115_000794.npz  \n",
            " extracting: dad/obj_feat/training/b116_000365.npz  \n",
            " extracting: dad/obj_feat/training/b116_000370.npz  \n",
            " extracting: dad/obj_feat/training/b116_000396.npz  \n",
            " extracting: dad/obj_feat/training/b116_000708.npz  \n",
            " extracting: dad/obj_feat/training/b116_000721.npz  \n",
            " extracting: dad/obj_feat/training/b116_000722.npz  \n",
            " extracting: dad/obj_feat/training/b116_000740.npz  \n",
            " extracting: dad/obj_feat/training/b116_000741.npz  \n",
            " extracting: dad/obj_feat/training/b116_000763.npz  \n",
            " extracting: dad/obj_feat/training/b116_000786.npz  \n",
            " extracting: dad/obj_feat/training/b117_000362.npz  \n",
            " extracting: dad/obj_feat/training/b117_000377.npz  \n",
            " extracting: dad/obj_feat/training/b117_000381.npz  \n",
            " extracting: dad/obj_feat/training/b117_000705.npz  \n",
            " extracting: dad/obj_feat/training/b117_000715.npz  \n",
            " extracting: dad/obj_feat/training/b117_000737.npz  \n",
            " extracting: dad/obj_feat/training/b117_000752.npz  \n",
            " extracting: dad/obj_feat/training/b117_000764.npz  \n",
            " extracting: dad/obj_feat/training/b117_000784.npz  \n",
            " extracting: dad/obj_feat/training/b117_000798.npz  \n",
            " extracting: dad/obj_feat/training/b118_000360.npz  \n",
            " extracting: dad/obj_feat/training/b118_000392.npz  \n",
            " extracting: dad/obj_feat/training/b118_000704.npz  \n",
            " extracting: dad/obj_feat/training/b118_000719.npz  \n",
            " extracting: dad/obj_feat/training/b118_000744.npz  \n",
            " extracting: dad/obj_feat/training/b118_000750.npz  \n",
            " extracting: dad/obj_feat/training/b118_000751.npz  \n",
            " extracting: dad/obj_feat/training/b118_000781.npz  \n",
            " extracting: dad/obj_feat/training/b118_000782.npz  \n",
            " extracting: dad/obj_feat/training/b118_000795.npz  \n",
            " extracting: dad/obj_feat/training/b119_000352.npz  \n",
            " extracting: dad/obj_feat/training/b119_000376.npz  \n",
            " extracting: dad/obj_feat/training/b119_000397.npz  \n",
            " extracting: dad/obj_feat/training/b119_000713.npz  \n",
            " extracting: dad/obj_feat/training/b119_000723.npz  \n",
            " extracting: dad/obj_feat/training/b119_000743.npz  \n",
            " extracting: dad/obj_feat/training/b119_000760.npz  \n",
            " extracting: dad/obj_feat/training/b119_000775.npz  \n",
            " extracting: dad/obj_feat/training/b119_000793.npz  \n",
            " extracting: dad/obj_feat/training/b119_000796.npz  \n",
            " extracting: dad/obj_feat/training/b120_000366.npz  \n",
            " extracting: dad/obj_feat/training/b120_000394.npz  \n",
            " extracting: dad/obj_feat/training/b120_000702.npz  \n",
            " extracting: dad/obj_feat/training/b120_000706.npz  \n",
            " extracting: dad/obj_feat/training/b120_000707.npz  \n",
            " extracting: dad/obj_feat/training/b120_000710.npz  \n",
            " extracting: dad/obj_feat/training/b120_000714.npz  \n",
            " extracting: dad/obj_feat/training/b120_000725.npz  \n",
            " extracting: dad/obj_feat/training/b120_000748.npz  \n",
            " extracting: dad/obj_feat/training/b120_000785.npz  \n",
            " extracting: dad/obj_feat/training/b121_000334.npz  \n",
            " extracting: dad/obj_feat/training/b121_000336.npz  \n",
            " extracting: dad/obj_feat/training/b121_000343.npz  \n",
            " extracting: dad/obj_feat/training/b121_000366.npz  \n",
            " extracting: dad/obj_feat/training/b121_000371.npz  \n",
            " extracting: dad/obj_feat/training/b121_000380.npz  \n",
            " extracting: dad/obj_feat/training/b121_000815.npz  \n",
            " extracting: dad/obj_feat/training/b121_000818.npz  \n",
            " extracting: dad/obj_feat/training/b121_000823.npz  \n",
            " extracting: dad/obj_feat/training/b121_000826.npz  \n",
            " extracting: dad/obj_feat/training/b122_000332.npz  \n",
            " extracting: dad/obj_feat/training/b122_000341.npz  \n",
            " extracting: dad/obj_feat/training/b122_000351.npz  \n",
            " extracting: dad/obj_feat/training/b122_000385.npz  \n",
            " extracting: dad/obj_feat/training/b122_000800.npz  \n",
            " extracting: dad/obj_feat/training/b122_000802.npz  \n",
            " extracting: dad/obj_feat/training/b122_000809.npz  \n",
            " extracting: dad/obj_feat/training/b122_000817.npz  \n",
            " extracting: dad/obj_feat/training/b122_000819.npz  \n",
            " extracting: dad/obj_feat/training/b122_000827.npz  \n",
            " extracting: dad/obj_feat/training/b123_000337.npz  \n",
            " extracting: dad/obj_feat/training/b123_000345.npz  \n",
            " extracting: dad/obj_feat/training/b123_000354.npz  \n",
            " extracting: dad/obj_feat/training/b123_000356.npz  \n",
            " extracting: dad/obj_feat/training/b123_000370.npz  \n",
            " extracting: dad/obj_feat/training/b123_000372.npz  \n",
            " extracting: dad/obj_feat/training/b123_000375.npz  \n",
            " extracting: dad/obj_feat/training/b123_000379.npz  \n",
            " extracting: dad/obj_feat/training/b123_000811.npz  \n",
            " extracting: dad/obj_feat/training/b123_000828.npz  \n",
            " extracting: dad/obj_feat/training/b124_000335.npz  \n",
            " extracting: dad/obj_feat/training/b124_000342.npz  \n",
            " extracting: dad/obj_feat/training/b124_000349.npz  \n",
            " extracting: dad/obj_feat/training/b124_000350.npz  \n",
            " extracting: dad/obj_feat/training/b124_000355.npz  \n",
            " extracting: dad/obj_feat/training/b124_000358.npz  \n",
            " extracting: dad/obj_feat/training/b124_000810.npz  \n",
            " extracting: dad/obj_feat/training/b124_000820.npz  \n",
            " extracting: dad/obj_feat/training/b124_000821.npz  \n",
            " extracting: dad/obj_feat/training/b124_000822.npz  \n",
            " extracting: dad/obj_feat/training/b125_000353.npz  \n",
            " extracting: dad/obj_feat/training/b125_000362.npz  \n",
            " extracting: dad/obj_feat/training/b125_000363.npz  \n",
            " extracting: dad/obj_feat/training/b125_000368.npz  \n",
            " extracting: dad/obj_feat/training/b125_000376.npz  \n",
            " extracting: dad/obj_feat/training/b125_000381.npz  \n",
            " extracting: dad/obj_feat/training/b125_000803.npz  \n",
            " extracting: dad/obj_feat/training/b125_000808.npz  \n",
            " extracting: dad/obj_feat/training/b125_000813.npz  \n",
            " extracting: dad/obj_feat/training/b125_000816.npz  \n",
            " extracting: dad/obj_feat/training/b126_000339.npz  \n",
            " extracting: dad/obj_feat/training/b126_000346.npz  \n",
            " extracting: dad/obj_feat/training/b126_000348.npz  \n",
            " extracting: dad/obj_feat/training/b126_000352.npz  \n",
            " extracting: dad/obj_feat/training/b126_000364.npz  \n",
            " extracting: dad/obj_feat/training/b126_000367.npz  \n",
            " extracting: dad/obj_feat/training/b126_000374.npz  \n",
            " extracting: dad/obj_feat/training/b126_000382.npz  \n",
            " extracting: dad/obj_feat/training/b126_000383.npz  \n",
            " extracting: dad/obj_feat/training/b126_000805.npz  \n",
            " extracting: dad/obj_feat/training/b127_000331.npz  \n",
            " extracting: dad/obj_feat/training/b127_000333.npz  \n",
            " extracting: dad/obj_feat/training/b127_000338.npz  \n",
            " extracting: dad/obj_feat/training/b127_000340.npz  \n",
            " extracting: dad/obj_feat/training/b127_000344.npz  \n",
            " extracting: dad/obj_feat/training/b127_000360.npz  \n",
            " extracting: dad/obj_feat/training/b127_000804.npz  \n",
            " extracting: dad/obj_feat/training/b127_000806.npz  \n",
            " extracting: dad/obj_feat/training/b127_000812.npz  \n",
            " extracting: dad/obj_feat/training/b127_000825.npz  \n",
            " extracting: dad/obj_feat/training/b128_000347.npz  \n",
            " extracting: dad/obj_feat/training/b128_000357.npz  \n",
            " extracting: dad/obj_feat/training/b128_000359.npz  \n",
            " extracting: dad/obj_feat/training/b128_000365.npz  \n",
            " extracting: dad/obj_feat/training/b128_000369.npz  \n",
            " extracting: dad/obj_feat/training/b128_000377.npz  \n",
            " extracting: dad/obj_feat/training/b128_000801.npz  \n",
            " extracting: dad/obj_feat/training/b128_000807.npz  \n",
            " extracting: dad/obj_feat/training/b128_000814.npz  \n",
            " extracting: dad/obj_feat/training/b128_000824.npz  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pickle\n",
        "import os\n",
        "from sklearn.cluster import KMeans\n",
        "from sklearn.decomposition import PCA\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "class FeatureSkewNonIID:\n",
        "    \"\"\"\n",
        "    Create non-IID data distribution using clustering-based feature skew for i3d_feat data.\n",
        "    \"\"\"\n",
        "\n",
        "    def __init__(self, n_clients: int = 5, random_seed: int = 42):\n",
        "        self.n_clients = n_clients\n",
        "        self.random_seed = random_seed\n",
        "        np.random.seed(random_seed)\n",
        "\n",
        "    def create_non_iid_distribution(self, i3d_train: np.ndarray, i3d_test: np.ndarray,\n",
        "                                    n_clusters: int = 10) -> dict:\n",
        "        \"\"\"\n",
        "        Create non-IID distribution using clustering on i3d_feat training data.\n",
        "\n",
        "        Args:\n",
        "            i3d_train: Training i3d features\n",
        "            i3d_test: Test i3d features\n",
        "            n_clusters: Number of clusters (default: 10)\n",
        "\n",
        "        Returns:\n",
        "            Dictionary with train and test client assignments\n",
        "        \"\"\"\n",
        "        print(f\"Training data shape: {i3d_train.shape}\")\n",
        "        print(f\"Test data shape: {i3d_test.shape}\")\n",
        "        print(f\"Number of clusters: {n_clusters}\")\n",
        "\n",
        "        # Flatten features if multidimensional\n",
        "        if len(i3d_train.shape) > 2:\n",
        "            train_flat = i3d_train.reshape(i3d_train.shape[0], -1)\n",
        "        else:\n",
        "            train_flat = i3d_train\n",
        "\n",
        "        if len(i3d_test.shape) > 2:\n",
        "            test_flat = i3d_test.reshape(i3d_test.shape[0], -1)\n",
        "        else:\n",
        "            test_flat = i3d_test\n",
        "\n",
        "        # Perform K-Means clustering on training data\n",
        "        print(\"\\nPerforming K-Means clustering on training data...\")\n",
        "        kmeans = KMeans(n_clusters=n_clusters, random_state=self.random_seed, n_init=10)\n",
        "        train_cluster_labels = kmeans.fit_predict(train_flat)\n",
        "        print(\" Training clustering complete\")\n",
        "\n",
        "        # Predict clusters for test data using the same model\n",
        "        print(\"Assigning test data to clusters...\")\n",
        "        test_cluster_labels = kmeans.predict(test_flat)\n",
        "        print(\" Test clustering complete\")\n",
        "\n",
        "        # Assign clusters to clients\n",
        "        clusters_per_client = n_clusters // self.n_clients\n",
        "        cluster_ids = np.arange(n_clusters)\n",
        "        np.random.shuffle(cluster_ids)\n",
        "\n",
        "        client_train_data = {}\n",
        "        client_test_data = {}\n",
        "\n",
        "        print(f\"\\nDistributing data to {self.n_clients} clients...\")\n",
        "\n",
        "        for client_id in range(self.n_clients):\n",
        "            # Determine which clusters this client gets\n",
        "            start_idx = client_id * clusters_per_client\n",
        "            end_idx = start_idx + clusters_per_client if client_id < self.n_clients - 1 else n_clusters\n",
        "            assigned_clusters = cluster_ids[start_idx:end_idx]\n",
        "\n",
        "            # Get training indices for this client\n",
        "            train_indices = []\n",
        "            for cluster_id in assigned_clusters:\n",
        "                indices = np.where(train_cluster_labels == cluster_id)[0]\n",
        "                train_indices.extend(indices.tolist())\n",
        "            # Ensure indices are integers\n",
        "            train_indices = np.array(train_indices, dtype=int)\n",
        "\n",
        "\n",
        "            # Get test indices for this client\n",
        "            test_indices = []\n",
        "            for cluster_id in assigned_clusters:\n",
        "                indices = np.where(test_cluster_labels == cluster_id)[0]\n",
        "                test_indices.extend(indices.tolist())\n",
        "            # Ensure indices are integers\n",
        "            test_indices = np.array(test_indices, dtype=int)\n",
        "\n",
        "\n",
        "            # Store train data\n",
        "            client_train_data[f'client_{client_id}'] = {\n",
        "                'indices': train_indices,\n",
        "                'n_samples': len(train_indices),\n",
        "                'assigned_clusters': assigned_clusters.tolist(),\n",
        "                'i3d_feat': i3d_train[train_indices]\n",
        "            }\n",
        "\n",
        "            # Store test data\n",
        "            client_test_data[f'client_{client_id}'] = {\n",
        "                'indices': test_indices,\n",
        "                'n_samples': len(test_indices),\n",
        "                'assigned_clusters': assigned_clusters.tolist(),\n",
        "                'i3d_feat': i3d_test[test_indices]\n",
        "            }\n",
        "\n",
        "            print(f\"  Client {client_id}:\")\n",
        "            print(f\"    - Train: {len(train_indices)} samples\")\n",
        "            print(f\"    - Test: {len(test_indices)} samples\")\n",
        "            print(f\"    - Clusters: {assigned_clusters}\")\n",
        "\n",
        "        return {\n",
        "            'train': client_train_data,\n",
        "            'test': client_test_data\n",
        "        }\n",
        "\n",
        "    def visualize_distribution(self, client_data: dict, split: str = 'train'):\n",
        "        \"\"\"Visualize the non-IID distribution\"\"\"\n",
        "        print(f\"\\nGenerating visualization for {split} data...\")\n",
        "\n",
        "        # Collect all data for PCA\n",
        "        all_data = []\n",
        "        all_labels = []\n",
        "\n",
        "        for client_id in range(self.n_clients):\n",
        "            client_feat = client_data[split][f'client_{client_id}']['i3d_feat']\n",
        "            if len(client_feat.shape) > 2:\n",
        "                client_feat = client_feat.reshape(client_feat.shape[0], -1)\n",
        "            all_data.append(client_feat)\n",
        "            all_labels.extend([client_id] * len(client_feat))\n",
        "\n",
        "        all_data = np.vstack(all_data)\n",
        "        all_labels = np.array(all_labels)\n",
        "\n",
        "        # Apply PCA\n",
        "        pca = PCA(n_components=2, random_state=self.random_seed)\n",
        "        features_2d = pca.fit_transform(all_data)\n",
        "\n",
        "        plt.figure(figsize=(15, 5))\n",
        "        colors = plt.cm.tab10(np.linspace(0, 1, self.n_clients))\n",
        "\n",
        "        # Plot 1: Distribution in 2D PCA space\n",
        "        plt.subplot(1, 3, 1)\n",
        "        for client_id in range(self.n_clients):\n",
        "            mask = all_labels == client_id\n",
        "            plt.scatter(features_2d[mask, 0], features_2d[mask, 1],\n",
        "                       alpha=0.6, label=f'Client {client_id}', s=20, color=colors[client_id])\n",
        "        plt.xlabel('PC1')\n",
        "        plt.ylabel('PC2')\n",
        "        plt.title(f'Client Data Distribution - {split.upper()} (PCA)')\n",
        "        plt.legend()\n",
        "        plt.grid(True, alpha=0.3)\n",
        "\n",
        "        # Plot 2: Sample count per client\n",
        "        plt.subplot(1, 3, 2)\n",
        "        sample_counts = [client_data[split][f'client_{i}']['n_samples'] for i in range(self.n_clients)]\n",
        "        plt.bar(range(self.n_clients), sample_counts, color=colors, alpha=0.7)\n",
        "        plt.xlabel('Client ID')\n",
        "        plt.ylabel('Number of Samples')\n",
        "        plt.title(f'Sample Distribution - {split.upper()}')\n",
        "        plt.grid(True, alpha=0.3, axis='y')\n",
        "\n",
        "        # Plot 3: Feature statistics per client\n",
        "        plt.subplot(1, 3, 3)\n",
        "        means = []\n",
        "        stds = []\n",
        "        for client_id in range(self.n_clients):\n",
        "            client_feat = client_data[split][f'client_{client_id}']['i3d_feat']\n",
        "            if len(client_feat.shape) > 2:\n",
        "                client_feat = client_feat.reshape(client_feat.shape[0], -1)\n",
        "            means.append(np.mean(client_feat))\n",
        "            stds.append(np.std(client_feat))\n",
        "\n",
        "        x = np.arange(self.n_clients)\n",
        "        width = 0.35\n",
        "        plt.bar(x - width/2, means, width, label='Mean', alpha=0.7)\n",
        "        plt.bar(x + width/2, stds, width, label='Std Dev', alpha=0.7)\n",
        "        plt.xlabel('Client ID')\n",
        "        plt.ylabel('Feature Statistics')\n",
        "        plt.title(f'Feature Statistics - {split.upper()}')\n",
        "        plt.legend()\n",
        "        plt.grid(True, alpha=0.3, axis='y')\n",
        "\n",
        "        plt.tight_layout()\n",
        "        filename = f'non_iid_distribution_{split}.png'\n",
        "        plt.savefig(filename, dpi=150, bbox_inches='tight')\n",
        "        print(f\"✓ Visualization saved as '{filename}'\")\n",
        "        plt.show()\n",
        "\n",
        "    def save_client_data(self, client_data: dict, output_dir: str = './client_data'):\n",
        "        \"\"\"Save each client's train and test data\"\"\"\n",
        "        os.makedirs(output_dir, exist_ok=True)\n",
        "\n",
        "        print(f\"\\nSaving client data to {output_dir}...\")\n",
        "\n",
        "        for client_id in range(self.n_clients):\n",
        "            # Save training data\n",
        "            train_data = {\n",
        "                'i3d_feat': client_data['train'][f'client_{client_id}']['i3d_feat'],\n",
        "                'indices': client_data['train'][f'client_{client_id}']['indices'],\n",
        "                'n_samples': client_data['train'][f'client_{client_id}']['n_samples']\n",
        "            }\n",
        "            train_path = os.path.join(output_dir, f'client_{client_id}_train.npz')\n",
        "            np.savez_compressed(train_path, **train_data)\n",
        "\n",
        "            # Save test data\n",
        "            test_data = {\n",
        "                'i3d_feat': client_data['test'][f'client_{client_id}']['i3d_feat'],\n",
        "                'indices': client_data['test'][f'client_{client_id}']['indices'],\n",
        "                'n_samples': client_data['test'][f'client_{client_id}']['n_samples']\n",
        "            }\n",
        "            test_path = os.path.join(output_dir, f'client_{client_id}_test.npz')\n",
        "            np.savez_compressed(test_path, **test_data)\n",
        "\n",
        "            print(f\"  ✓ Client {client_id}: train ({train_data['n_samples']} samples) & test ({test_data['n_samples']} samples)\")\n",
        "\n",
        "        print(f\"\\n✓ All client data saved successfully!\")\n",
        "\n",
        "\n",
        "# Main execution\n",
        "if __name__ == \"__main__\":\n",
        "    print(\"=\"*70)\n",
        "    print(\"Non-IID Dataset Generation using Feature Distribution Skew\")\n",
        "    print(\"=\"*70)\n",
        "\n",
        "    # Initialize\n",
        "    distributor = FeatureSkewNonIID(n_clients=5, random_seed=42)\n",
        "\n",
        "    # LOAD YOUR I3D DATA HERE\n",
        "    print(\"\\nLoading i3d_feat data...\")\n",
        "\n",
        "    # Assuming your data is in .npy files within subdirectories of the specified directories\n",
        "    train_dir = '/content/dad/i3d_feat/training'\n",
        "    test_dir = '/content/dad/i3d_feat/testing'\n",
        "\n",
        "    train_files = []\n",
        "    for root, _, files in os.walk(train_dir):\n",
        "        for f in files:\n",
        "            if f.endswith('.npy'):\n",
        "                train_files.append(os.path.join(root, f))\n",
        "\n",
        "    test_files = []\n",
        "    for root, _, files in os.walk(test_dir):\n",
        "        for f in files:\n",
        "            if f.endswith('.npy'):\n",
        "                test_files.append(os.path.join(root, f))\n",
        "\n",
        "\n",
        "    if not train_files:\n",
        "        print(f\"Error: No .npy files found in {train_dir} or its subdirectories.\")\n",
        "    else:\n",
        "        i3d_train = np.vstack([np.load(f, allow_pickle=True) for f in train_files])\n",
        "        print(f\"  ✓ Loaded train: {i3d_train.shape}\")\n",
        "\n",
        "    if not test_files:\n",
        "        print(f\"Error: No .npy files found in {test_dir} or its subdirectories.\")\n",
        "    else:\n",
        "        i3d_test = np.vstack([np.load(f, allow_pickle=True) for f in test_files])\n",
        "        print(f\"  ✓ Loaded test: {i3d_test.shape}\")\n",
        "\n",
        "\n",
        "    # Create non-IID distribution\n",
        "    print(\"\\n\" + \"=\"*70)\n",
        "    # Only proceed if both train and test data were loaded successfully\n",
        "    if train_files and test_files:\n",
        "        client_data = distributor.create_non_iid_distribution(\n",
        "            i3d_train=i3d_train,\n",
        "            i3d_test=i3d_test,\n",
        "            n_clusters=10\n",
        "        )\n",
        "\n",
        "        # Visualize training distribution\n",
        "        print(\"\\n\" + \"=\"*70)\n",
        "        distributor.visualize_distribution(client_data, split='train')\n",
        "\n",
        "        # Visualize test distribution\n",
        "        print(\"\\n\" + \"=\"*70)\n",
        "        distributor.visualize_distribution(client_data, split='test')\n",
        "\n",
        "        # Save client data\n",
        "        print(\"\\n\" + \"=\"*70)\n",
        "        distributor.save_client_data(client_data)\n",
        "\n",
        "        print(\"\\n\" + \"=\"*70)\n",
        "        print(\"Non-IID Dataset Creation Complete!\")\n",
        "        print(\"=\"*70)\n",
        "        print(\"\\nSummary:\")\n",
        "        for client_id in range(5):\n",
        "            train_samples = client_data['train'][f'client_{client_id}']['n_samples']\n",
        "            test_samples = client_data['test'][f'client_{client_id}']['n_samples']\n",
        "            print(f\"  Client {client_id}: {train_samples} train, {test_samples} test samples\")\n",
        "    else:\n",
        "        print(\"\\nSkipping non-IID distribution creation due to missing data files.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "UgnP4AThZuAK",
        "outputId": "636b4cf2-61ae-47c5-e791-77bf6b8fe25a"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "======================================================================\n",
            "Non-IID Dataset Generation using Feature Distribution Skew\n",
            "======================================================================\n",
            "\n",
            "Loading i3d_feat data...\n",
            "  ✓ Loaded train: (128400, 2048)\n",
            "  ✓ Loaded test: (46600, 2048)\n",
            "\n",
            "======================================================================\n",
            "Training data shape: (128400, 2048)\n",
            "Test data shape: (46600, 2048)\n",
            "Number of clusters: 10\n",
            "\n",
            "Performing K-Means clustering on training data...\n",
            " Training clustering complete\n",
            "Assigning test data to clusters...\n",
            " Test clustering complete\n",
            "\n",
            "Distributing data to 5 clients...\n",
            "  Client 0:\n",
            "    - Train: 22001 samples\n",
            "    - Test: 9620 samples\n",
            "    - Clusters: [8 1]\n",
            "  Client 1:\n",
            "    - Train: 29217 samples\n",
            "    - Test: 11848 samples\n",
            "    - Clusters: [5 0]\n",
            "  Client 2:\n",
            "    - Train: 33220 samples\n",
            "    - Test: 10643 samples\n",
            "    - Clusters: [7 2]\n",
            "  Client 3:\n",
            "    - Train: 27062 samples\n",
            "    - Test: 8021 samples\n",
            "    - Clusters: [9 4]\n",
            "  Client 4:\n",
            "    - Train: 16900 samples\n",
            "    - Test: 6468 samples\n",
            "    - Clusters: [3 6]\n",
            "\n",
            "======================================================================\n",
            "\n",
            "Generating visualization for train data...\n",
            "✓ Visualization saved as 'non_iid_distribution_train.png'\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x500 with 3 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "======================================================================\n",
            "\n",
            "Generating visualization for test data...\n",
            "✓ Visualization saved as 'non_iid_distribution_test.png'\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x500 with 3 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "======================================================================\n",
            "\n",
            "Saving client data to ./client_data...\n",
            "  ✓ Client 0: train (22001 samples) & test (9620 samples)\n",
            "  ✓ Client 1: train (29217 samples) & test (11848 samples)\n",
            "  ✓ Client 2: train (33220 samples) & test (10643 samples)\n",
            "  ✓ Client 3: train (27062 samples) & test (8021 samples)\n",
            "  ✓ Client 4: train (16900 samples) & test (6468 samples)\n",
            "\n",
            "✓ All client data saved successfully!\n",
            "\n",
            "======================================================================\n",
            "Non-IID Dataset Creation Complete!\n",
            "======================================================================\n",
            "\n",
            "Summary:\n",
            "  Client 0: 22001 train, 9620 test samples\n",
            "  Client 1: 29217 train, 11848 test samples\n",
            "  Client 2: 33220 train, 10643 test samples\n",
            "  Client 3: 27062 train, 8021 test samples\n",
            "  Client 4: 16900 train, 6468 test samples\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "97063daf",
        "outputId": "ca64255a-cc98-4681-df61-d57bfcc205d0"
      },
      "source": [
        "import os\n",
        "\n",
        "train_dir = '/content/dad/i3d_feat/training'\n",
        "test_dir = '/content/dad/i3d_feat/testing'\n",
        "\n",
        "print(\"Files in training directory:\")\n",
        "print(os.listdir(train_dir)[:10]) # Print first 10 files\n",
        "\n",
        "print(\"\\nFiles in testing directory:\")\n",
        "print(os.listdir(test_dir)[:10]) # Print first 10 files"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Files in training directory:\n",
            "['negative', 'positive']\n",
            "\n",
            "Files in testing directory:\n",
            "['negative', 'positive']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pickle\n",
        "import os\n",
        "from sklearn.cluster import KMeans\n",
        "from sklearn.decomposition import PCA\n",
        "from sklearn.metrics import average_precision_score, precision_recall_curve, auc, roc_auc_score\n",
        "import matplotlib.pyplot as plt\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.optim as optim\n",
        "from torch.utils.data import Dataset, DataLoader\n",
        "import copy\n",
        "\n",
        "class I3DDataset(Dataset):\n",
        "    \"\"\"Dataset wrapper for i3d features\"\"\"\n",
        "    def __init__(self, features, labels):\n",
        "        self.features = torch.FloatTensor(features)\n",
        "        self.labels = torch.LongTensor(labels)\n",
        "\n",
        "    def __len__(self):\n",
        "        return len(self.features)\n",
        "\n",
        "    def __getitem__(self, idx):\n",
        "        return self.features[idx], self.labels[idx]\n",
        "\n",
        "\n",
        "class SimpleClassifier(nn.Module):\n",
        "    \"\"\"Simple classifier for i3d features\"\"\"\n",
        "    def __init__(self, input_dim, num_classes):\n",
        "        super(SimpleClassifier, self).__init__()\n",
        "        self.fc1 = nn.Linear(input_dim, 512)\n",
        "        self.relu1 = nn.ReLU()\n",
        "        self.dropout1 = nn.Dropout(0.3)\n",
        "        self.fc2 = nn.Linear(512, 256)\n",
        "        self.relu2 = nn.ReLU()\n",
        "        self.dropout2 = nn.Dropout(0.3)\n",
        "        self.fc3 = nn.Linear(256, num_classes)\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = self.dropout1(self.relu1(self.fc1(x)))\n",
        "        x = self.dropout2(self.relu2(self.fc2(x)))\n",
        "        x = self.fc3(x)\n",
        "        return x\n",
        "\n",
        "\n",
        "class FedProxClient:\n",
        "    \"\"\"FedProx client implementation\"\"\"\n",
        "    def __init__(self, client_id, model, train_data, train_labels, device, mu=0.01):\n",
        "        self.client_id = client_id\n",
        "        self.model = model\n",
        "        self.device = device\n",
        "        self.mu = mu  # FedProx proximal term\n",
        "\n",
        "        # Create dataset and dataloader\n",
        "        dataset = I3DDataset(train_data, train_labels)\n",
        "        self.train_loader = DataLoader(dataset, batch_size=32, shuffle=True)\n",
        "\n",
        "    def train(self, global_model, epochs=5):\n",
        "        \"\"\"Train local model with FedProx\"\"\"\n",
        "        self.model.train()\n",
        "        optimizer = optim.Adam(self.model.parameters(), lr=0.001)\n",
        "        criterion = nn.CrossEntropyLoss()\n",
        "\n",
        "        # Store global model parameters for proximal term\n",
        "        global_params = [param.data.clone() for param in global_model.parameters()]\n",
        "\n",
        "        for epoch in range(epochs):\n",
        "            epoch_loss = 0.0\n",
        "            for batch_features, batch_labels in self.train_loader:\n",
        "                batch_features = batch_features.to(self.device)\n",
        "                batch_labels = batch_labels.to(self.device)\n",
        "\n",
        "                optimizer.zero_grad()\n",
        "                outputs = self.model(batch_features)\n",
        "                loss = criterion(outputs, batch_labels)\n",
        "\n",
        "                # FedProx proximal term\n",
        "                proximal_term = 0.0\n",
        "                for param, global_param in zip(self.model.parameters(), global_params):\n",
        "                    proximal_term += ((param - global_param) ** 2).sum()\n",
        "\n",
        "                loss += (self.mu / 2) * proximal_term\n",
        "\n",
        "                loss.backward()\n",
        "                optimizer.step()\n",
        "                epoch_loss += loss.item()\n",
        "\n",
        "            avg_loss = epoch_loss / len(self.train_loader)\n",
        "            if epoch % 2 == 0:\n",
        "                print(f\"    Client {self.client_id} - Epoch {epoch+1}/{epochs}, Loss: {avg_loss:.4f}\")\n",
        "\n",
        "        return self.model.state_dict()\n",
        "\n",
        "\n",
        "class FedProxServer:\n",
        "    \"\"\"FedProx server implementation\"\"\"\n",
        "    def __init__(self, model, test_data, test_labels, device, num_classes):\n",
        "        self.global_model = model\n",
        "        self.device = device\n",
        "        self.num_classes = num_classes\n",
        "\n",
        "        # Create test dataset\n",
        "        test_dataset = I3DDataset(test_data, test_labels)\n",
        "        self.test_loader = DataLoader(test_dataset, batch_size=64, shuffle=False)\n",
        "\n",
        "        # Metrics storage\n",
        "        self.round_metrics = {\n",
        "            'average_precision': [],\n",
        "            'precision': [],\n",
        "            'recall': [],\n",
        "            'auc_pr': [],\n",
        "            'roc_auc': [] # Added ROC AUC\n",
        "        }\n",
        "\n",
        "    def aggregate(self, client_models):\n",
        "        \"\"\"Aggregate client models (FedAvg)\"\"\"\n",
        "        global_dict = self.global_model.state_dict()\n",
        "\n",
        "        for key in global_dict.keys():\n",
        "            global_dict[key] = torch.stack([client_models[i][key].float() for i in range(len(client_models))], 0).mean(0)\n",
        "\n",
        "        self.global_model.load_state_dict(global_dict)\n",
        "        return self.global_model\n",
        "\n",
        "    def evaluate(self, round_num):\n",
        "        \"\"\"Evaluate global model on test set\"\"\"\n",
        "        self.global_model.eval()\n",
        "        all_labels = []\n",
        "        all_probs = []\n",
        "\n",
        "        with torch.no_grad():\n",
        "            for batch_features, batch_labels in self.test_loader:\n",
        "                batch_features = batch_features.to(self.device)\n",
        "                outputs = self.global_model(batch_features)\n",
        "                probs = torch.softmax(outputs, dim=1)\n",
        "\n",
        "                all_labels.extend(batch_labels.numpy())\n",
        "                all_probs.extend(probs.cpu().numpy())\n",
        "\n",
        "        all_labels = np.array(all_labels)\n",
        "        all_probs = np.array(all_probs)\n",
        "\n",
        "        # Ensure labels are 1D for binary metrics\n",
        "        if all_labels.ndim > 1:\n",
        "             all_labels = np.argmax(all_labels, axis=1)\n",
        "\n",
        "\n",
        "        # For binary classification, we use the probability of the positive class\n",
        "        # Assuming positive class is 1\n",
        "        positive_class_probs = all_probs[:, 1]\n",
        "\n",
        "        # Calculate metrics for binary classification\n",
        "        # average_precision_score expects 1D y_true and y_score for binary\n",
        "        avg_precision = average_precision_score(all_labels, positive_class_probs)\n",
        "\n",
        "        # precision_recall_curve also expects 1D y_true and y_score for binary\n",
        "        precision, recall, _ = precision_recall_curve(all_labels, positive_class_probs)\n",
        "        auc_pr = auc(recall, precision)\n",
        "\n",
        "        # ROC AUC score (another common binary metric)\n",
        "        roc_auc = roc_auc_score(all_labels, positive_class_probs)\n",
        "\n",
        "\n",
        "        # Store metrics\n",
        "        self.round_metrics['average_precision'].append(avg_precision)\n",
        "        self.round_metrics['precision'].append(precision) # Store the curve points\n",
        "        self.round_metrics['recall'].append(recall)     # Store the curve points\n",
        "        self.round_metrics['auc_pr'].append(auc_pr)\n",
        "        self.round_metrics['roc_auc'].append(roc_auc) # Store ROC AUC\n",
        "\n",
        "\n",
        "        print(f\"\\n  Round {round_num} - Global Model Evaluation:\")\n",
        "        print(f\"    Average Precision (AP): {avg_precision:.4f}\") # Changed mAP to AP for binary\n",
        "        print(f\"    AUC-PR: {auc_pr:.4f}\")\n",
        "        print(f\"    ROC AUC: {roc_auc:.4f}\")\n",
        "\n",
        "        # Return precision and recall for plotting PR curve for this round\n",
        "        return avg_precision, precision, recall, roc_auc # Added roc_auc to return values\n",
        "\n",
        "\n",
        "    def plot_metrics(self):\n",
        "        \"\"\"Plot precision-recall curves and average precision over rounds\"\"\"\n",
        "        # Ensure we have data to plot\n",
        "        if not self.round_metrics['average_precision']:\n",
        "            print(\"No evaluation results to plot.\")\n",
        "            return\n",
        "\n",
        "        fig, axes = plt.subplots(1, 3, figsize=(18, 5)) # Adjusted for 3 plots\n",
        "\n",
        "        rounds = range(1, len(self.round_metrics['average_precision']) + 1)\n",
        "\n",
        "        # Plot 1: Average Precision (AP) over rounds\n",
        "        ax1 = axes[0]\n",
        "        ax1.plot(rounds, self.round_metrics['average_precision'], 'o-', linewidth=2, markersize=8)\n",
        "        ax1.set_xlabel('Communication Round', fontsize=12)\n",
        "        ax1.set_ylabel('Average Precision (AP)', fontsize=12)\n",
        "        ax1.set_title('Average Precision vs Communication Rounds', fontsize=14, fontweight='bold')\n",
        "        ax1.grid(True, alpha=0.3)\n",
        "        ax1.set_xticks(rounds)\n",
        "\n",
        "        # Plot 2: AUC-PR over rounds (new plot)\n",
        "        ax2 = axes[1]\n",
        "        ax2.plot(rounds, self.round_metrics['auc_pr'], 'o-', linewidth=2, markersize=8, color='green')\n",
        "        ax2.set_xlabel('Communication Round', fontsize=12)\n",
        "        ax2.set_ylabel('AUC-PR', fontsize=12)\n",
        "        ax2.set_title('AUC-PR vs Communication Rounds', fontsize=14, fontweight='bold')\n",
        "        ax2.grid(True, alpha=0.3)\n",
        "        ax2.set_xticks(rounds)\n",
        "\n",
        "\n",
        "        # Plot 3: Precision-Recall curve for the last round\n",
        "        ax3 = axes[2] # Adjusted for the third plot\n",
        "        last_precision = self.round_metrics['precision'][-1]\n",
        "        last_recall = self.round_metrics['recall'][-1]\n",
        "\n",
        "\n",
        "        ax3.plot(last_recall, last_precision, label=f'Round {len(rounds)} (AUC-PR={self.round_metrics[\"auc_pr\"][-1]:.2f})', linewidth=2)\n",
        "\n",
        "\n",
        "        ax3.set_xlabel('Recall', fontsize=12)\n",
        "        ax3.set_ylabel('Precision', fontsize=12)\n",
        "        ax3.set_title(f'Precision-Recall Curve (Last Round)', fontsize=14, fontweight='bold')\n",
        "        ax3.legend(loc='best')\n",
        "        ax3.grid(True, alpha=0.3)\n",
        "        ax3.set_xlim([0, 1])\n",
        "        ax3.set_ylim([0, 1])\n",
        "\n",
        "\n",
        "        plt.tight_layout()\n",
        "        plt.savefig('fedprox_metrics.png', dpi=150, bbox_inches='tight')\n",
        "        print(\"\\n✓ Metrics plot saved as 'fedprox_metrics.png'\")\n",
        "        plt.show()\n",
        "\n",
        "        # Additional plot: ROC AUC over rounds\n",
        "        fig2, ax = plt.subplots(1, 1, figsize=(10, 6))\n",
        "        ax.plot(rounds, self.round_metrics['roc_auc'], 'o-', linewidth=2, markersize=8, color='purple')\n",
        "        ax.set_xlabel('Communication Round', fontsize=12)\n",
        "        ax.set_ylabel('ROC AUC', fontsize=12)\n",
        "        ax.set_title('ROC AUC vs Communication Rounds', fontsize=14, fontweight='bold')\n",
        "        ax.grid(True, alpha=0.3)\n",
        "        ax.set_xticks(rounds)\n",
        "        plt.tight_layout()\n",
        "        plt.savefig('fedprox_roc_auc.png', dpi=150, bbox_inches='tight')\n",
        "        print(\"✓ ROC AUC plot saved as 'fedprox_roc_auc.png'\")\n",
        "        plt.show()\n",
        "\n",
        "\n",
        "class FeatureSkewNonIID:\n",
        "    \"\"\"Create non-IID data distribution using clustering-based feature skew\"\"\"\n",
        "\n",
        "    def __init__(self, n_clients: int = 5, random_seed: int = 42):\n",
        "        self.n_clients = n_clients\n",
        "        self.random_seed = random_seed\n",
        "        np.random.seed(random_seed)\n",
        "\n",
        "    def create_non_iid_distribution(self, i3d_train, train_labels, i3d_test, test_labels, n_clusters=10):\n",
        "        \"\"\"Create non-IID distribution using clustering\"\"\"\n",
        "        print(f\"Training data shape: {i3d_train.shape}\")\n",
        "        print(f\"Test data shape: {i3d_test.shape}\")\n",
        "        print(f\"Number of clusters: {n_clusters}\")\n",
        "\n",
        "        # Flatten features if needed\n",
        "        if len(i3d_train.shape) > 2:\n",
        "            train_flat = i3d_train.reshape(i3d_train.shape[0], -1)\n",
        "        else:\n",
        "            train_flat = i3d_train\n",
        "\n",
        "        if len(i3d_test.shape) > 2:\n",
        "            test_flat = i3d_test.reshape(i3d_test.shape[0], -1)\n",
        "        else:\n",
        "            test_flat = i3d_test\n",
        "\n",
        "        # Perform K-Means clustering\n",
        "        print(\"\\nPerforming K-Means clustering...\")\n",
        "        kmeans = KMeans(n_clusters=n_clusters, random_state=self.random_seed, n_init=10)\n",
        "        train_cluster_labels = kmeans.fit_predict(train_flat)\n",
        "        test_cluster_labels = kmeans.predict(test_flat)\n",
        "        print(\"✓ Clustering complete!\")\n",
        "\n",
        "        # Distribute to clients\n",
        "        clusters_per_client = n_clusters // self.n_clients\n",
        "        cluster_ids = np.arange(n_clusters)\n",
        "        np.random.shuffle(cluster_ids)\n",
        "\n",
        "        client_train_data = []\n",
        "        client_train_labels = []\n",
        "        client_test_data = []\n",
        "        client_test_labels = []\n",
        "\n",
        "        print(f\"\\nDistributing data to {self.n_clients} clients...\")\n",
        "\n",
        "        for client_id in range(self.n_clients):\n",
        "            start_idx = client_id * clusters_per_client\n",
        "            end_idx = start_idx + clusters_per_client if client_id < self.n_clients - 1 else n_clusters\n",
        "            assigned_clusters = cluster_ids[start_idx:end_idx]\n",
        "\n",
        "            # Training data\n",
        "            train_indices = []\n",
        "            for cluster_id in assigned_clusters:\n",
        "                indices = np.where(train_cluster_labels == cluster_id)[0]\n",
        "                train_indices.extend(indices.tolist())\n",
        "            train_indices = np.array(train_indices)\n",
        "\n",
        "            # Test data\n",
        "            test_indices = []\n",
        "            for cluster_id in assigned_clusters:\n",
        "                indices = np.where(test_cluster_labels == cluster_id)[0]\n",
        "                test_indices.extend(indices.tolist())\n",
        "            test_indices = np.array(test_indices)\n",
        "\n",
        "            client_train_data.append(i3d_train[train_indices])\n",
        "            client_train_labels.append(train_labels[train_indices])\n",
        "            client_test_data.append(i3d_test[test_indices])\n",
        "            client_test_labels.append(test_labels[test_indices])\n",
        "\n",
        "            print(f\"  Client {client_id}: {len(train_indices)} train, {len(test_indices)} test samples\")\n",
        "\n",
        "        return client_train_data, client_train_labels, client_test_data, client_test_labels\n",
        "\n",
        "\n",
        "def run_fedprox(i3d_train, train_labels, i3d_test, test_labels,\n",
        "                n_clients=5, rounds=10, epochs=5, mu=0.01):\n",
        "    \"\"\"Main FedProx training loop\"\"\"\n",
        "\n",
        "    print(\"=\"*70)\n",
        "    print(\"FedProx Federated Learning with Non-IID Data\")\n",
        "    print(\"=\"*70)\n",
        "\n",
        "    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
        "    print(f\"\\nUsing device: {device}\")\n",
        "\n",
        "    # Flatten features\n",
        "    if len(i3d_train.shape) > 2:\n",
        "        i3d_train = i3d_train.reshape(i3d_train.shape[0], -1)\n",
        "    if len(i3d_test.shape) > 2:\n",
        "        i3d_test = i3d_test.reshape(i3d_test.shape[0], -1)\n",
        "\n",
        "    input_dim = i3d_train.shape[1]\n",
        "    num_classes = len(np.unique(train_labels))\n",
        "\n",
        "    print(f\"Input dimension: {input_dim}\")\n",
        "    print(f\"Number of classes: {num_classes}\")\n",
        "\n",
        "    # Create non-IID distribution\n",
        "    print(\"\\n\" + \"=\"*70)\n",
        "    print(\"Creating Non-IID Data Distribution\")\n",
        "    print(\"=\"*70)\n",
        "    distributor = FeatureSkewNonIID(n_clients=n_clients)\n",
        "    client_train_data, client_train_labels, _, _ = distributor.create_non_iid_distribution(\n",
        "        i3d_train, train_labels, i3d_test, test_labels, n_clusters=10\n",
        "    )\n",
        "\n",
        "    # Initialize global model\n",
        "    global_model = SimpleClassifier(input_dim, num_classes).to(device)\n",
        "\n",
        "    # Initialize server\n",
        "    server = FedProxServer(global_model, i3d_test, test_labels, device, num_classes)\n",
        "\n",
        "    # Initialize clients\n",
        "    clients = []\n",
        "    for client_id in range(n_clients):\n",
        "        client_model = SimpleClassifier(input_dim, num_classes).to(device)\n",
        "        client = FedProxClient(client_id, client_model,\n",
        "                               client_train_data[client_id],\n",
        "                               client_train_labels[client_id],\n",
        "                               device, mu=mu)\n",
        "        clients.append(client)\n",
        "\n",
        "    # FedProx training\n",
        "    print(\"\\n\" + \"=\"*70)\n",
        "    print(f\"Starting FedProx Training: {rounds} rounds, {epochs} epochs per round\")\n",
        "    print(\"=\"*70)\n",
        "\n",
        "    for round_num in range(1, rounds + 1):\n",
        "        print(f\"\\n{'='*70}\")\n",
        "        print(f\"Round {round_num}/{rounds}\")\n",
        "        print(f\"{'='*70}\")\n",
        "\n",
        "        client_models = []\n",
        "\n",
        "        # Client training\n",
        "        for client in clients:\n",
        "            print(f\"\\n  Training Client {client.client_id}...\")\n",
        "            client.model.load_state_dict(server.global_model.state_dict())\n",
        "            client_state = client.train(server.global_model, epochs=epochs)\n",
        "            client_models.append(client_state)\n",
        "\n",
        "        # Server aggregation\n",
        "        print(f\"\\n  Aggregating {len(client_models)} client models...\")\n",
        "        server.aggregate(client_models)\n",
        "\n",
        "        # Evaluate global model\n",
        "        server.evaluate(round_num)\n",
        "\n",
        "    # Plot final results\n",
        "    print(\"\\n\" + \"=\"*70)\n",
        "    print(\"Generating Performance Plots\")\n",
        "    print(\"=\"*70)\n",
        "    server.plot_metrics()\n",
        "\n",
        "    print(\"\\n\" + \"=\"*70)\n",
        "    print(\"FedProx Training Complete!\")\n",
        "    print(\"=\"*70)\n",
        "\n",
        "    return server\n",
        "\n",
        "\n",
        "# Main execution\n",
        "if __name__ == \"__main__\":\n",
        "    print(\"=\"*70)\n",
        "    print(\"FedProx Federated Learning Pipeline\")\n",
        "    print(\"=\"*70)\n",
        "\n",
        "    # LOAD YOUR I3D DATA HERE\n",
        "    print(\"\\nStep 1: Loading i3d_feat data...\")\n",
        "\n",
        "    train_dir = '/content/dad/i3d_feat/training'\n",
        "    test_dir = '/content/dad/i3d_feat/testing'\n",
        "\n",
        "    # Function to load data and create labels from directory structure\n",
        "    def load_data_with_labels(data_dir):\n",
        "        all_features = []\n",
        "        all_labels = []\n",
        "        label_map = {'negative': 0, 'positive': 1} # Assuming 'negative' and 'positive' are your classes\n",
        "\n",
        "        for root, dirs, files in os.walk(data_dir):\n",
        "            for file in files:\n",
        "                if file.endswith('.npy'):\n",
        "                    file_path = os.path.join(root, file)\n",
        "                    features = np.load(file_path, allow_pickle=True)\n",
        "                    # Assuming each .npy file contains multiple feature vectors\n",
        "                    # And the label for all vectors in a file is determined by the parent directory\n",
        "                    label_name = os.path.basename(root)\n",
        "                    if label_name in label_map:\n",
        "                        label = label_map[label_name]\n",
        "                        # Create a label array with the same number of elements as feature vectors in the file\n",
        "                        labels_for_file = np.full(features.shape[0], label, dtype=int)\n",
        "                        all_features.append(features)\n",
        "                        all_labels.append(labels_for_file)\n",
        "                    else:\n",
        "                        print(f\"Warning: Unknown directory name '{label_name}' in {root}. Skipping file.\")\n",
        "\n",
        "\n",
        "        if not all_features:\n",
        "            return np.array([]), np.array([]) # Return empty arrays if no data found\n",
        "\n",
        "        # Concatenate all feature arrays and all label arrays\n",
        "        return np.vstack(all_features), np.concatenate(all_labels)\n",
        "\n",
        "\n",
        "    i3d_train, train_labels = load_data_with_labels(train_dir)\n",
        "    i3d_test, test_labels = load_data_with_labels(test_dir)\n",
        "\n",
        "\n",
        "    if i3d_train.size == 0 or i3d_test.size == 0:\n",
        "        print(\"\\nError: Could not load training or testing data. Please check the directory paths and file formats.\")\n",
        "    else:\n",
        "        print(f\"   Train: {i3d_train.shape}, Labels: {train_labels.shape}\")\n",
        "        print(f\"   Test: {i3d_test.shape}, Labels: {test_labels.shape}\")\n",
        "\n",
        "        # Run FedProx\n",
        "        print(\"\\nStep 2: Running FedProx...\")\n",
        "        server = run_fedprox(\n",
        "            i3d_train=i3d_train,\n",
        "            train_labels=train_labels,\n",
        "            i3d_test=i3d_test,\n",
        "            test_labels=test_labels,\n",
        "            n_clients=5,\n",
        "            rounds=10,\n",
        "            epochs=5,\n",
        "            mu=0.01\n",
        "        )\n",
        "\n",
        "        print(\"\\n✓ All tasks completed successfully!\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "JKbJAWElgwgs",
        "outputId": "8158d912-5478-4d63-ee71-e12186d428d7"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "======================================================================\n",
            "FedProx Federated Learning Pipeline\n",
            "======================================================================\n",
            "\n",
            "Step 1: Loading i3d_feat data...\n",
            "   Train: (128400, 2048), Labels: (128400,)\n",
            "   Test: (46600, 2048), Labels: (46600,)\n",
            "\n",
            "Step 2: Running FedProx...\n",
            "======================================================================\n",
            "FedProx Federated Learning with Non-IID Data\n",
            "======================================================================\n",
            "\n",
            "Using device: cpu\n",
            "Input dimension: 2048\n",
            "Number of classes: 2\n",
            "\n",
            "======================================================================\n",
            "Creating Non-IID Data Distribution\n",
            "======================================================================\n",
            "Training data shape: (128400, 2048)\n",
            "Test data shape: (46600, 2048)\n",
            "Number of clusters: 10\n",
            "\n",
            "Performing K-Means clustering...\n",
            "✓ Clustering complete!\n",
            "\n",
            "Distributing data to 5 clients...\n",
            "  Client 0: 22001 train, 9620 test samples\n",
            "  Client 1: 29217 train, 11848 test samples\n",
            "  Client 2: 33220 train, 10643 test samples\n",
            "  Client 3: 27062 train, 8021 test samples\n",
            "  Client 4: 16900 train, 6468 test samples\n",
            "\n",
            "======================================================================\n",
            "Starting FedProx Training: 10 rounds, 5 epochs per round\n",
            "======================================================================\n",
            "\n",
            "======================================================================\n",
            "Round 1/10\n",
            "======================================================================\n",
            "\n",
            "  Training Client 0...\n",
            "    Client 0 - Epoch 1/5, Loss: 0.6287\n",
            "    Client 0 - Epoch 3/5, Loss: 0.5205\n",
            "    Client 0 - Epoch 5/5, Loss: 0.4792\n",
            "\n",
            "  Training Client 1...\n",
            "    Client 1 - Epoch 1/5, Loss: 0.6861\n",
            "    Client 1 - Epoch 3/5, Loss: 0.6214\n",
            "    Client 1 - Epoch 5/5, Loss: 0.5981\n",
            "\n",
            "  Training Client 2...\n",
            "    Client 2 - Epoch 1/5, Loss: 0.6793\n",
            "    Client 2 - Epoch 3/5, Loss: 0.6776\n",
            "    Client 2 - Epoch 5/5, Loss: 0.6746\n",
            "\n",
            "  Training Client 3...\n",
            "    Client 3 - Epoch 1/5, Loss: 0.6443\n",
            "    Client 3 - Epoch 3/5, Loss: 0.6031\n",
            "    Client 3 - Epoch 5/5, Loss: 0.5634\n",
            "\n",
            "  Training Client 4...\n",
            "    Client 4 - Epoch 1/5, Loss: 0.6529\n",
            "    Client 4 - Epoch 3/5, Loss: 0.5812\n",
            "    Client 4 - Epoch 5/5, Loss: 0.5590\n",
            "\n",
            "  Aggregating 5 client models...\n",
            "\n",
            "  Round 1 - Global Model Evaluation:\n",
            "    Average Precision (AP): 0.4371\n",
            "    AUC-PR: 0.4371\n",
            "    ROC AUC: 0.5814\n",
            "\n",
            "======================================================================\n",
            "Round 2/10\n",
            "======================================================================\n",
            "\n",
            "  Training Client 0...\n",
            "    Client 0 - Epoch 1/5, Loss: 0.5393\n",
            "    Client 0 - Epoch 3/5, Loss: 0.4134\n",
            "    Client 0 - Epoch 5/5, Loss: 0.3981\n",
            "\n",
            "  Training Client 1...\n",
            "    Client 1 - Epoch 1/5, Loss: 0.6059\n",
            "    Client 1 - Epoch 3/5, Loss: 0.5492\n",
            "    Client 1 - Epoch 5/5, Loss: 0.5336\n",
            "\n",
            "  Training Client 2...\n",
            "    Client 2 - Epoch 1/5, Loss: 0.6416\n",
            "    Client 2 - Epoch 3/5, Loss: 0.5981\n",
            "    Client 2 - Epoch 5/5, Loss: 0.6282\n",
            "\n",
            "  Training Client 3...\n",
            "    Client 3 - Epoch 1/5, Loss: 0.5591\n",
            "    Client 3 - Epoch 3/5, Loss: 0.5239\n",
            "    Client 3 - Epoch 5/5, Loss: 0.5200\n",
            "\n",
            "  Training Client 4...\n",
            "    Client 4 - Epoch 1/5, Loss: 0.5549\n",
            "    Client 4 - Epoch 3/5, Loss: 0.4866\n",
            "    Client 4 - Epoch 5/5, Loss: 0.4795\n",
            "\n",
            "  Aggregating 5 client models...\n",
            "\n",
            "  Round 2 - Global Model Evaluation:\n",
            "    Average Precision (AP): 0.3605\n",
            "    AUC-PR: 0.3630\n",
            "    ROC AUC: 0.5088\n",
            "\n",
            "======================================================================\n",
            "Round 3/10\n",
            "======================================================================\n",
            "\n",
            "  Training Client 0...\n",
            "    Client 0 - Epoch 1/5, Loss: 0.4962\n",
            "    Client 0 - Epoch 3/5, Loss: 0.4463\n",
            "    Client 0 - Epoch 5/5, Loss: 0.4263\n",
            "\n",
            "  Training Client 1...\n",
            "    Client 1 - Epoch 1/5, Loss: 0.5805\n",
            "    Client 1 - Epoch 3/5, Loss: 0.5458\n",
            "    Client 1 - Epoch 5/5, Loss: 0.5307\n",
            "\n",
            "  Training Client 2...\n",
            "    Client 2 - Epoch 1/5, Loss: 0.6190\n",
            "    Client 2 - Epoch 3/5, Loss: 0.6084\n",
            "    Client 2 - Epoch 5/5, Loss: 0.6060\n",
            "\n",
            "  Training Client 3...\n",
            "    Client 3 - Epoch 1/5, Loss: 0.6028\n",
            "    Client 3 - Epoch 3/5, Loss: 0.5502\n",
            "    Client 3 - Epoch 5/5, Loss: 0.5409\n",
            "\n",
            "  Training Client 4...\n",
            "    Client 4 - Epoch 1/5, Loss: 0.5773\n",
            "    Client 4 - Epoch 3/5, Loss: 0.4931\n",
            "    Client 4 - Epoch 5/5, Loss: 0.5023\n",
            "\n",
            "  Aggregating 5 client models...\n",
            "\n",
            "  Round 3 - Global Model Evaluation:\n",
            "    Average Precision (AP): 0.3608\n",
            "    AUC-PR: 0.4093\n",
            "    ROC AUC: 0.5095\n",
            "\n",
            "======================================================================\n",
            "Round 4/10\n",
            "======================================================================\n",
            "\n",
            "  Training Client 0...\n",
            "    Client 0 - Epoch 1/5, Loss: 0.5325\n",
            "    Client 0 - Epoch 3/5, Loss: 0.4907\n",
            "    Client 0 - Epoch 5/5, Loss: 0.4853\n",
            "\n",
            "  Training Client 1...\n",
            "    Client 1 - Epoch 1/5, Loss: 0.6492\n",
            "    Client 1 - Epoch 3/5, Loss: 0.5722\n",
            "    Client 1 - Epoch 5/5, Loss: 0.5529\n",
            "\n",
            "  Training Client 2...\n",
            "    Client 2 - Epoch 1/5, Loss: 0.6103\n",
            "    Client 2 - Epoch 3/5, Loss: 0.5975\n",
            "    Client 2 - Epoch 5/5, Loss: 0.5958\n",
            "\n",
            "  Training Client 3...\n",
            "    Client 3 - Epoch 1/5, Loss: 0.5612\n",
            "    Client 3 - Epoch 3/5, Loss: 0.5252\n",
            "    Client 3 - Epoch 5/5, Loss: 0.5175\n",
            "\n",
            "  Training Client 4...\n",
            "    Client 4 - Epoch 1/5, Loss: 0.5379\n",
            "    Client 4 - Epoch 3/5, Loss: 0.4783\n",
            "    Client 4 - Epoch 5/5, Loss: 0.4613\n",
            "\n",
            "  Aggregating 5 client models...\n",
            "\n",
            "  Round 4 - Global Model Evaluation:\n",
            "    Average Precision (AP): 0.3557\n",
            "    AUC-PR: 0.3848\n",
            "    ROC AUC: 0.5035\n",
            "\n",
            "======================================================================\n",
            "Round 5/10\n",
            "======================================================================\n",
            "\n",
            "  Training Client 0...\n",
            "    Client 0 - Epoch 1/5, Loss: 0.6184\n",
            "    Client 0 - Epoch 3/5, Loss: 0.5390\n",
            "    Client 0 - Epoch 5/5, Loss: 0.5184\n",
            "\n",
            "  Training Client 1...\n",
            "    Client 1 - Epoch 1/5, Loss: 0.6750\n",
            "    Client 1 - Epoch 3/5, Loss: 0.6755\n",
            "    Client 1 - Epoch 5/5, Loss: 0.6773\n",
            "\n",
            "  Training Client 2...\n",
            "    Client 2 - Epoch 1/5, Loss: 0.6476\n",
            "    Client 2 - Epoch 3/5, Loss: 0.6532\n",
            "    Client 2 - Epoch 5/5, Loss: 0.6535\n",
            "\n",
            "  Training Client 3...\n",
            "    Client 3 - Epoch 1/5, Loss: 0.6296\n",
            "    Client 3 - Epoch 3/5, Loss: 0.6286\n",
            "    Client 3 - Epoch 5/5, Loss: 0.6279\n",
            "\n",
            "  Training Client 4...\n",
            "    Client 4 - Epoch 1/5, Loss: 0.5645\n",
            "    Client 4 - Epoch 3/5, Loss: 0.4892\n",
            "    Client 4 - Epoch 5/5, Loss: 0.4657\n",
            "\n",
            "  Aggregating 5 client models...\n",
            "\n",
            "  Round 5 - Global Model Evaluation:\n",
            "    Average Precision (AP): 0.3562\n",
            "    AUC-PR: 0.3773\n",
            "    ROC AUC: 0.5025\n",
            "\n",
            "======================================================================\n",
            "Round 6/10\n",
            "======================================================================\n",
            "\n",
            "  Training Client 0...\n",
            "    Client 0 - Epoch 1/5, Loss: 0.5718\n",
            "    Client 0 - Epoch 3/5, Loss: 0.5026\n",
            "    Client 0 - Epoch 5/5, Loss: 0.4829\n",
            "\n",
            "  Training Client 1...\n",
            "    Client 1 - Epoch 1/5, Loss: 0.6343\n",
            "    Client 1 - Epoch 3/5, Loss: 0.5677\n",
            "    Client 1 - Epoch 5/5, Loss: 0.5504\n",
            "\n",
            "  Training Client 2...\n",
            "    Client 2 - Epoch 1/5, Loss: 0.6529\n",
            "    Client 2 - Epoch 3/5, Loss: 0.6524\n",
            "    Client 2 - Epoch 5/5, Loss: 0.6529\n",
            "\n",
            "  Training Client 3...\n",
            "    Client 3 - Epoch 1/5, Loss: 0.6284\n",
            "    Client 3 - Epoch 3/5, Loss: 0.6272\n",
            "    Client 3 - Epoch 5/5, Loss: 0.6268\n",
            "\n",
            "  Training Client 4...\n",
            "    Client 4 - Epoch 1/5, Loss: 0.5537\n",
            "    Client 4 - Epoch 3/5, Loss: 0.4731\n",
            "    Client 4 - Epoch 5/5, Loss: 0.4669\n",
            "\n",
            "  Aggregating 5 client models...\n",
            "\n",
            "  Round 6 - Global Model Evaluation:\n",
            "    Average Precision (AP): 0.3545\n",
            "    AUC-PR: 0.3431\n",
            "    ROC AUC: 0.5017\n",
            "\n",
            "======================================================================\n",
            "Round 7/10\n",
            "======================================================================\n",
            "\n",
            "  Training Client 0...\n",
            "    Client 0 - Epoch 1/5, Loss: 0.5275\n",
            "    Client 0 - Epoch 3/5, Loss: 0.4634\n",
            "    Client 0 - Epoch 5/5, Loss: 0.4504\n",
            "\n",
            "  Training Client 1...\n",
            "    Client 1 - Epoch 1/5, Loss: 0.6356\n",
            "    Client 1 - Epoch 3/5, Loss: 0.5529\n",
            "    Client 1 - Epoch 5/5, Loss: 0.6361\n",
            "\n",
            "  Training Client 2...\n",
            "    Client 2 - Epoch 1/5, Loss: 0.6538\n",
            "    Client 2 - Epoch 3/5, Loss: 0.6532\n",
            "    Client 2 - Epoch 5/5, Loss: 0.6534\n",
            "\n",
            "  Training Client 3...\n",
            "    Client 3 - Epoch 1/5, Loss: 0.6281\n",
            "    Client 3 - Epoch 3/5, Loss: 0.5921\n",
            "    Client 3 - Epoch 5/5, Loss: 0.5577\n",
            "\n",
            "  Training Client 4...\n",
            "    Client 4 - Epoch 1/5, Loss: 0.5084\n",
            "    Client 4 - Epoch 3/5, Loss: 0.4582\n",
            "    Client 4 - Epoch 5/5, Loss: 0.4434\n",
            "\n",
            "  Aggregating 5 client models...\n",
            "\n",
            "  Round 7 - Global Model Evaluation:\n",
            "    Average Precision (AP): 0.3536\n",
            "    AUC-PR: 0.3671\n",
            "    ROC AUC: 0.5027\n",
            "\n",
            "======================================================================\n",
            "Round 8/10\n",
            "======================================================================\n",
            "\n",
            "  Training Client 0...\n",
            "    Client 0 - Epoch 1/5, Loss: 0.6296\n",
            "    Client 0 - Epoch 3/5, Loss: 0.6290\n",
            "    Client 0 - Epoch 5/5, Loss: 0.6108\n",
            "\n",
            "  Training Client 1...\n",
            "    Client 1 - Epoch 1/5, Loss: 0.6366\n",
            "    Client 1 - Epoch 3/5, Loss: 0.5557\n",
            "    Client 1 - Epoch 5/5, Loss: 0.5685\n",
            "\n",
            "  Training Client 2...\n",
            "    Client 2 - Epoch 1/5, Loss: 0.6524\n",
            "    Client 2 - Epoch 3/5, Loss: 0.6527\n",
            "    Client 2 - Epoch 5/5, Loss: 0.6523\n",
            "\n",
            "  Training Client 3...\n",
            "    Client 3 - Epoch 1/5, Loss: 0.5648\n",
            "    Client 3 - Epoch 3/5, Loss: 0.5284\n",
            "    Client 3 - Epoch 5/5, Loss: 0.5190\n",
            "\n",
            "  Training Client 4...\n",
            "    Client 4 - Epoch 1/5, Loss: 0.4869\n",
            "    Client 4 - Epoch 3/5, Loss: 0.4297\n",
            "    Client 4 - Epoch 5/5, Loss: 0.5056\n",
            "\n",
            "  Aggregating 5 client models...\n",
            "\n",
            "  Round 8 - Global Model Evaluation:\n",
            "    Average Precision (AP): 0.3579\n",
            "    AUC-PR: 0.3651\n",
            "    ROC AUC: 0.5055\n",
            "\n",
            "======================================================================\n",
            "Round 9/10\n",
            "======================================================================\n",
            "\n",
            "  Training Client 0...\n",
            "    Client 0 - Epoch 1/5, Loss: 0.5559\n",
            "    Client 0 - Epoch 3/5, Loss: 0.4829\n",
            "    Client 0 - Epoch 5/5, Loss: 0.4623\n",
            "\n",
            "  Training Client 1...\n",
            "    Client 1 - Epoch 1/5, Loss: 0.5884\n",
            "    Client 1 - Epoch 3/5, Loss: 0.5555\n",
            "    Client 1 - Epoch 5/5, Loss: 0.6893\n",
            "\n",
            "  Training Client 2...\n",
            "    Client 2 - Epoch 1/5, Loss: 0.6534\n",
            "    Client 2 - Epoch 3/5, Loss: 0.6528\n",
            "    Client 2 - Epoch 5/5, Loss: 0.6550\n",
            "\n",
            "  Training Client 3...\n",
            "    Client 3 - Epoch 1/5, Loss: 0.5390\n",
            "    Client 3 - Epoch 3/5, Loss: 0.5153\n",
            "    Client 3 - Epoch 5/5, Loss: 0.5139\n",
            "\n",
            "  Training Client 4...\n",
            "    Client 4 - Epoch 1/5, Loss: 0.5320\n",
            "    Client 4 - Epoch 3/5, Loss: 0.4589\n",
            "    Client 4 - Epoch 5/5, Loss: 0.4310\n",
            "\n",
            "  Aggregating 5 client models...\n",
            "\n",
            "  Round 9 - Global Model Evaluation:\n",
            "    Average Precision (AP): 0.3548\n",
            "    AUC-PR: 0.4333\n",
            "    ROC AUC: 0.5006\n",
            "\n",
            "======================================================================\n",
            "Round 10/10\n",
            "======================================================================\n",
            "\n",
            "  Training Client 0...\n",
            "    Client 0 - Epoch 1/5, Loss: 0.5821\n",
            "    Client 0 - Epoch 3/5, Loss: 0.5098\n",
            "    Client 0 - Epoch 5/5, Loss: 0.5038\n",
            "\n",
            "  Training Client 1...\n",
            "    Client 1 - Epoch 1/5, Loss: 0.6563\n",
            "    Client 1 - Epoch 3/5, Loss: 0.5685\n",
            "    Client 1 - Epoch 5/5, Loss: 0.6966\n",
            "\n",
            "  Training Client 2...\n",
            "    Client 2 - Epoch 1/5, Loss: 0.6523\n",
            "    Client 2 - Epoch 3/5, Loss: 0.6521\n",
            "    Client 2 - Epoch 5/5, Loss: 0.6518\n",
            "\n",
            "  Training Client 3...\n",
            "    Client 3 - Epoch 1/5, Loss: 0.5281\n",
            "    Client 3 - Epoch 3/5, Loss: 0.5059\n",
            "    Client 3 - Epoch 5/5, Loss: 0.5048\n",
            "\n",
            "  Training Client 4...\n",
            "    Client 4 - Epoch 1/5, Loss: 0.5148\n",
            "    Client 4 - Epoch 3/5, Loss: 0.5260\n",
            "    Client 4 - Epoch 5/5, Loss: 0.4512\n",
            "\n",
            "  Aggregating 5 client models...\n",
            "\n",
            "  Round 10 - Global Model Evaluation:\n",
            "    Average Precision (AP): 0.3551\n",
            "    AUC-PR: 0.4198\n",
            "    ROC AUC: 0.5009\n",
            "\n",
            "======================================================================\n",
            "Generating Performance Plots\n",
            "======================================================================\n",
            "\n",
            "✓ Metrics plot saved as 'fedprox_metrics.png'\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1800x500 with 3 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✓ ROC AUC plot saved as 'fedprox_roc_auc.png'\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "======================================================================\n",
            "FedProx Training Complete!\n",
            "======================================================================\n",
            "\n",
            "✓ All tasks completed successfully!\n"
          ]
        }
      ]
    }
  ]
}